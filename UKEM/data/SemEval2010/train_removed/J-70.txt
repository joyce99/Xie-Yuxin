self-interested automated mechanism design and 
implications for optimal combinatorial auctions 
vincent conitzer 
carnegie mellon university 
 forbes avenue 
pittsburgh pa usa 
conitzer cs cmu edu 
tuomas sandholm 
carnegie mellon university 
 forbes avenue 
pittsburgh pa usa 
sandholm cs cmu edu 
abstract 
often an outcome must be chosen on the basis of the 
preferences reported by a group of agents the key difficulty 
is that the agents may report their preferences insincerely 
to make the chosen outcome more favorable to themselves 
mechanism design is the art of designing the rules of the 
game so that the agents are motivated to report their 
preferences truthfully and a desirable outcome is chosen in a 
recently proposed approach-called automated mechanism 
design-a mechanism is computed for the preference 
aggregation setting at hand this has several advantages but the 
downside is that the mechanism design optimization 
problem needs to be solved anew each time unlike the earlier 
work on automated mechanism design that studied a 
benevolent designer in this paper we study automated mechanism 
design problems where the designer is self-interested in this 
case the center cares only about which outcome is chosen 
and what payments are made to it the reason that the 
agents preferences are relevant is that the center is 
constrained to making each agent at least as well off as the agent 
would have been had it not participated in the mechanism 
in this setting we show that designing optimal deterministic 
mechanisms is np-complete in two important special cases 
when the center is interested only in the payments made 
to it and when payments are not possible and the center 
is interested only in the outcome chosen we then show 
how allowing for randomization in the mechanism makes 
problems in this setting computationally easy finally we 
show that the payment-maximizing amd problem is closely 
related to an interesting variant of the optimal 
 revenuemaximizing combinatorial auction design problem where 
the bidders have best-only preferences we show that 
here too designing an optimal deterministic auction is 
npcomplete but designing an optimal randomized auction is 
easy 
categories and subject descriptors 
f theory of computation analysis of algorithms 
and problem complexity j computer applications 
social and behavioral sciences-economics 
general terms 
algorithms economics theory 
 introduction 
in multiagent settings often an outcome must be 
chosen on the basis of the preferences reported by a group of 
agents such outcomes could be potential presidents joint 
plans allocations of goods or resources etc the preference 
aggregator generally does not know the agents preferences 
a priori rather the agents report their preferences to the 
coordinator unfortunately an agent may have an incentive 
to misreport its preferences in order to mislead the 
mechanism into selecting an outcome that is more desirable to 
the agent than the outcome that would be selected if the 
agent revealed its preferences truthfully such manipulation 
is undesirable because preference aggregation mechanisms 
are tailored to aggregate preferences in a socially desirable 
way and if the agents reveal their preferences insincerely a 
socially undesirable outcome may be chosen 
manipulability is a pervasive problem across preference 
aggregation mechanisms a seminal negative result the 
gibbard-satterthwaite theorem shows that under any 
nondictatorial preference aggregation scheme if there are at 
least possible outcomes there are preferences under which 
an agent is better off reporting untruthfully a 
preference aggregation scheme is called dictatorial if one of 
the agents dictates the outcome no matter what preferences 
the other agents report 
what the aggregator would like to do is design a 
preference aggregation mechanism so that the self-interested 
agents are motivated to report their preferences truthfully 
and the mechanism chooses an outcome that is desirable 
from the perspective of some objective this is the classic 
setting of mechanism design in game theory in this paper 
we study the case where the designer is self-interested that 
is the designer does not directly care about how the 
out 
come relates to the agents preferences but is rather 
concerned with its own agenda for which outcome should be 
chosen and with maximizing payments to itself this is the 
mechanism design setting most relevant to electronic 
commerce 
in the case where the mechanism designer is interested in 
maximizing some notion of social welfare the importance 
of collecting the agents preferences is clear it is perhaps 
less obvious why they should be collected when the designer 
is self-interested and hence its objective is not directly 
related to the agents preferences the reason for this is that 
often the agents preferences impose limits on how the 
designer chooses the outcome and payments the most 
common such constraint is that of individual rationality ir 
which means that the mechanism cannot make any agent 
worse off than the agent would have been had it not 
participated in the mechanism for instance in the setting 
of optimal auction design the designer auctioneer is only 
concerned with how much revenue is collected and not per 
se with how well the allocation of the good or goods 
corresponds to the agents preferences nevertheless the 
designer cannot force an agent to pay more than its valuation 
for the bundle of goods allocated to it therefore even a 
self-interested designer will choose an outcome that makes 
the agents reasonably well off on the other hand the 
designer will not necessarily choose a social welfare 
maximizing outcome for example if the designer always chooses 
an outcome that maximizes social welfare with respect to 
the reported preferences and forces each agent to pay the 
difference between the utility it has now and the utility it 
would have had if it had not participated in the mechanism 
it is easy to see that agents may have an incentive to 
misreport their preferences-and this may actually lead to less 
revenue being collected indeed one of the counterintuitive 
results of optimal auction design theory is that sometimes 
the good is allocated to nobody even when the auctioneer 
has a reservation price of 
classical mechanism design provides some general 
mechanisms which under certain assumptions satisfy some 
notion of nonmanipulability and maximize some objective the 
upside of these mechanisms is that they do not rely on 
 even probabilistic information about the agents 
preferences e g the vickrey-clarke-groves vcg mechanism 
 or they can be easily applied to any probability 
distribution over the preferences e g the dagva 
mechanism the myerson auction and the maskin-riley 
multi-unit auction however the general mechanisms 
also have significant downsides 
 the most famous and most broadly applicable general 
mechanisms vcg and dagva only maximize social 
welfare if the designer is self-interested as is the case 
in many electronic commerce settings these 
mechanisms do not maximize the designer s objective 
 the general mechanisms that do focus on a 
selfinterested designer are only applicable in very restricted 
settings-such as myerson s expected revenue 
maximizing auction for selling a single item and maskin 
and riley s expected revenue maximizing auction for 
selling multiple identical units of an item 
 even in the restricted settings in which these 
mechanisms apply the mechanisms only allow for payment 
maximization in practice the designer may also be 
interested in the outcome per se for example an 
auctioneer may care which bidder receives the item 
 it is often assumed that side payments can be used 
to tailor the agents incentives but this is not always 
practical for example in barter-based electronic 
marketplaces-such as recipco firstbarter com 
barterone and intagio-side payments are not 
allowed furthermore among software agents it might 
be more desirable to construct mechanisms that do not 
rely on the ability to make payments because many 
software agents do not have the infrastructure to make 
payments 
in contrast we follow a recent approach where the 
mechanism is designed automatically for the specific problem at 
hand this approach addresses all of the downsides listed 
above we formulate the mechanism design problem as an 
optimization problem the input is characterized by the 
number of agents the agents possible types preferences 
and the aggregator s prior distributions over the agents 
types the output is a nonmanipulable mechanism that is 
optimal with respect to some objective this approach is 
called automated mechanism design 
the automated mechanism design approach has four 
advantages over the classical approach of designing general 
mechanisms first it can be used even in settings that 
do not satisfy the assumptions of the classical mechanisms 
 such as availability of side payments or that the objective 
is social welfare second it may allow one to circumvent 
impossibility results such as the gibbard-satterthwaite 
theorem which state that there is no mechanism that is 
desirable across all preferences when the mechanism is designed 
for the setting at hand it does not matter that it would 
not work more generally third it may yield better 
mechanisms in terms of stronger nonmanipulability guarantees 
and or better outcomes than classical mechanisms because 
the mechanism capitalizes on the particulars of the setting 
 the probabilistic information that the designer has about 
the agents types given the vast amount of information 
that parties have about each other today this approach is 
likely to lead to tremendous savings over classical 
mechanisms which largely ignore that information for example 
imagine a company automatically creating its procurement 
mechanism based on statistical knowledge about its 
suppliers rather than using a classical descending procurement 
auction fourth the burden of design is shifted from 
humans to a machine 
however automated mechanism design requires the 
mechanism design optimization problem to be solved anew for 
each setting hence its computational complexity becomes 
a key issue previous research has studied this question for 
benevolent designers-that wish to maximize for example 
social welfare in this paper we study the 
computational complexity of automated mechanism design in the 
case of a self-interested designer this is an important 
setting for automated mechanism design due to the shortage 
of general mechanisms in this area and the fact that in 
most e-commerce settings the designer is self-interested we 
also show that this problem is closely related to a particular 
optimal revenue-maximizing combinatorial auction design 
problem 
 
the rest of this paper is organized as follows in 
section we justify the focus on nonmanipulable mechanisms 
in section we define the problem we study in section 
we show that designing an optimal deterministic mechanism 
is np-complete even when the designer only cares about the 
payments made to it in section we show that designing 
an optimal deterministic mechanism is also np-complete 
when payments are not possible and the designer is only 
interested in the outcome chosen in section we show that 
an optimal randomized mechanism can be designed in 
polynomial time even in the general case finally in section 
we show that for designing optimal combinatorial auctions 
under best-only preferences our results on amd imply that 
this problem is np-complete for deterministic auctions but 
easy for randomized auctions 
 justifying the focus on 
nonmanipulable mechanisms 
before we define the computational problem of automated 
mechanism design we should justify our focus on 
nonmanipulable mechanisms after all it is not immediately 
obvious that there are no manipulable mechanisms that even 
when agents report their types strategically and hence 
sometimes untruthfully still reach better outcomes according to 
whatever objective we use than any nonmanipulable 
mechanism this does however turn out to be the case given 
any mechanism we can construct a nonmanipulable 
mechanism whose performance is identical as follows we build 
an interface layer between the agents and the original 
mechanism the agents report their preferences or types to 
the interface layer subsequently the interface layer inputs 
into the original mechanism the types that the agents would 
have strategically reported to the original mechanism if their 
types were as declared to the interface layer the resulting 
outcome is the outcome of the new mechanism since the 
interface layer acts strategically on each agent s behalf 
there is never an incentive to report falsely to the interface 
layer and hence the types reported by the interface layer 
are the strategic types that would have been reported 
without the interface layer so the results are exactly as they 
would have been with the original mechanism this 
argument is known in the mechanism design literature as the 
revelation principle there are computational difficulties 
with applying the revelation principle in large combinatorial 
outcome and type spaces however because here we 
focus on flatly represented outcome and type spaces this is 
not a concern here given this we can focus on truthful 
mechanisms in the rest of the paper 
 definitions 
we now formalize the automated mechanism design 
setting 
definition in an automated mechanism design 
setting we are given 
 a finite set of outcomes o 
 a finite set of n agents 
 for each agent i 
 a finite set of types θi 
 a probability distribution γi over θi in the case of 
correlated types there is a single joint distribution 
γ over θ × × θn and 
 a utility function ui θi × o → r 
 an objective function whose expectation the designer 
wishes to maximize 
there are many possible objective functions the designer 
might have for example social welfare where the designer 
seeks to maximize the sum of the agents utilities or the 
minimum utility of any agent where the designer seeks to 
maximize the worst utility had by any agent in both 
of these cases the designer is benevolent because the 
designer in some sense is pursuing the agents collective 
happiness however in this paper we focus on the case of 
a self-interested designer a self-interested designer cares 
only about the outcome chosen that is the designer does 
not care how the outcome relates to the agents preferences 
but rather has a fixed preference over the outcomes and 
about the net payments made by the agents which flow to 
the designer 
definition a self-interested designer has an objective 
function given by g o 
n 
i 
πi where g o → r indicates 
the designer s own preference over the outcomes and πi is 
the payment made by agent i in the case where g 
everywhere the designer is said to be payment maximizing 
in the case where payments are not possible g constitutes 
the objective function by itself 
we now define the kinds of mechanisms under study by 
the revelation principle we can restrict attention to 
truthful direct revelation mechanisms where agents report their 
types directly and never have an incentive to misreport them 
definition we consider the following kinds of 
mechanism 
 a deterministic mechanism without payments consists 
of an outcome selection function o θ × θ × × 
θn → o 
 a randomized mechanism without payments consists 
of a distribution selection function p θ × θ × × 
θn → p o where p o is the set of probability 
distributions over o 
 a deterministic mechanism with payments consists of 
an outcome selection function o θ ×θ × ×θn → 
o and for each agent i a payment selection function 
πi θ × θ × × θn → r where πi θ θn 
gives the payment made by agent i when the reported 
types are θ θn 
 
though this follows standard game theory notation 
the fact that the agent has both a utility function and a type 
is perhaps confusing the types encode the various possible 
preferences that the agent may turn out to have and the 
agent s type is not known to the aggregator the utility 
function is common knowledge but because the agent s type 
is a parameter in the agent s utility function the aggregator 
cannot know what the agent s utility is without knowing the 
agent s type 
 
 a randomized mechanism with payments consists of 
a distribution selection function p θ × θ × × 
θn → p o and for each agent i a payment selection 
function πi θ × θ × × θn → r 
there are two types of constraint on the designer in 
building the mechanism 
 individual rationality ir constraints 
the first type of constraint is the following the utility of 
each agent has to be at least as great as the agent s fallback 
utility that is the utility that the agent would receive if it 
did not participate in the mechanism otherwise that agent 
would not participate in the mechanism-and no agent s 
participation can ever hurt the mechanism designer s 
objective because at worst the mechanism can ignore an agent 
by pretending the agent is not there furthermore if no 
such constraint applied the designer could simply make the 
agents pay an infinite amount this type of constraint is 
called an ir individual rationality constraint there are 
three different possible ir constraints ex ante ex interim 
and ex post depending on what the agent knows about its 
own type and the others types when deciding whether to 
participate in the mechanism ex ante ir means that the 
agent would participate if it knew nothing at all not even 
its own type we will not study this concept in this paper 
ex interim ir means that the agent would always 
participate if it knew only its own type but not those of the others 
ex post ir means that the agent would always participate 
even if it knew everybody s type we will define the 
latter two notions of ir formally first we need to formalize 
the concept of the fallback outcome we assume that each 
agent s fallback utility is zero for each one of its types this 
is without loss of generality because we can add a constant 
term to an agent s utility function for a given type 
without affecting the decision-making behavior of that expected 
utility maximizing agent 
definition in any automated mechanism design 
setting with an ir constraint there is a fallback outcome o ∈ 
o where for any agent i and any type θi ∈ θi we have 
ui θi o additionally in the case of a self-interested 
designer g o 
we can now to define the notions of individual rationality 
definition individual rationality ir is defined by 
 a deterministic mechanism is ex interim ir if for any 
agent i and any type θi ∈ θi we have 
e θ θi− θi θn θi 
 ui θi o θ θn −πi θ θn 
≥ 
a randomized mechanism is ex interim ir if for any 
agent i and any type θi ∈ θi we have 
e θ θi− θi θn θi 
eo θ θn ui θi o −πi θ θn 
≥ 
 a deterministic mechanism is ex post ir if for any 
agent i and any type vector θ θn ∈ θ × × 
θn we have ui θi o θ θn − πi θ θn ≥ 
 
 
we do not randomize over payments because as long as 
the agents and the designer are risk neutral with respect to 
payments that is their utility is linear in payments there 
is no reason to randomize over payments 
a randomized mechanism is ex post ir if for any agent 
i and any type vector θ θn ∈ θ × × θn 
we have eo θ θn ui θi o − πi θ θn ≥ 
the terms involving payments can be left out in the case 
where payments are not possible 
 incentive compatibility ic constraints 
the second type of constraint says that the agents should 
never have an incentive to misreport their type as justified 
above by the revelation principle for this type of 
constraint the two most common variants or solution concepts 
are implementation in dominant strategies and 
implementation in bayes-nash equilibrium 
definition given an automated mechanism design 
setting a mechanism is said to implement its outcome and 
payment functions in dominant strategies if truthtelling is 
always optimal even when the types reported by the other 
agents are already known formally for any agent i any 
type vector θ θi θn ∈ θ × × θi × × θn 
and any alternative type report ˆθi ∈ θi in the case of 
deterministic mechanisms we have 
ui θi o θ θi θn − πi θ θi θn ≥ 
ui θi o θ ˆθi θn − πi θ ˆθi θn 
in the case of randomized mechanisms we have 
eo θ θi θn ui θi o − πi θ θi θn ≥ 
eo θ ˆθi θn 
 ui θi o − πi θ ˆθi θn 
the terms involving payments can be left out in the case 
where payments are not possible 
thus in dominant strategies implementation truthtelling 
is optimal regardless of what the other agents report if it 
is optimal only given that the other agents are truthful and 
given that one does not know the other agents types we 
have implementation in bayes-nash equilibrium 
definition given an automated mechanism design 
setting a mechanism is said to implement its outcome and 
payment functions in bayes-nash equilibrium if truthtelling 
is always optimal to an agent when that agent does not yet 
know anything about the other agents types and the other 
agents are telling the truth formally for any agent i any 
type θi ∈ θi and any alternative type report ˆθi ∈ θi in the 
case of deterministic mechanisms we have 
e θ θi− θi θn θi 
 ui θi o θ θi θn − 
πi θ θi θn ≥ 
e θ θi− θi θn θi 
 ui θi o θ ˆθi θn − 
πi θ ˆθi θn 
in the case of randomized mechanisms we have 
e θ θi− θi θn θi 
eo θ θi θn ui θi o − 
πi θ θi θn ≥ 
e θ θi− θi θn θi 
eo θ ˆθi θn 
 ui θi o − 
πi θ ˆθi θn 
the terms involving payments can be left out in the case 
where payments are not possible 
 
 automated mechanism design 
we can now define the computational problem we study 
definition automated-mechanism-design 
 amd we are given 
 an automated mechanism design setting 
 an ir notion ex interim ex post or none 
 a solution concept dominant strategies or bayes-nash 
 whether payments are possible 
 whether randomization is possible 
 in the decision variant of the problem a target value 
g 
we are asked whether there exists a mechanism of the 
specified kind in terms of payments and randomization that 
satisfies both the ir notion and the solution concept and 
gives an expected value of at least g for the objective 
an interesting special case is the setting where there is 
only one agent in this case the reporting agent always 
knows everything there is to know about the other agents 
types-because there are no other agents since ex post and 
ex interim ir only differ on what an agent is assumed to 
know about other agents types the two ir concepts 
coincide here also because implementation in dominant 
strategies and implementation in bayes-nash equilibrium only 
differ on what an agent is assumed to know about other agents 
types the two solution concepts coincide here this 
observation will prove to be a useful tool in proving hardness 
results if we prove computational hardness in the 
singleagent setting this immediately implies hardness for both 
ir concepts for both solution concepts for any number of 
agents 
 
payment-maximizingdeterministic amd is hard 
in this section we demonstrate that it is np-complete 
to design a deterministic mechanism that maximizes the 
expected sum of the payments collected from the agents 
we show that this problem is hard even in the single-agent 
setting thereby immediately showing it hard for both ir 
concepts for both solution concepts to demonstrate 
nphardness we reduce from the minsat problem 
definition minsat we are given a formula φ 
in conjunctive normal form represented by a set of boolean 
variables v and a set of clauses c and an integer k k 
 c we are asked whether there exists an assignment to the 
variables in v such that at most k clauses in φ are satisfied 
minsat was recently shown to be np-complete we 
can now present our result 
theorem payment-maximizing deterministic amd is 
np-complete even for a single agent even with a uniform 
distribution over types 
proof it is easy to show that the problem is in np 
to show np-hardness we reduce an arbitrary minsat 
instance to the following single-agent payment-maximizing 
deterministic amd instance let the agent s type set be 
θ θc c ∈ c ∪ θv v ∈ v where c is the set of 
clauses in the minsat instance and v is the set of 
variables let the probability distribution over these types be 
uniform let the outcome set be o o ∪ oc c ∈ 
c ∪ ol l ∈ l where l is the set of literals that is 
l v v ∈ v ∪ −v v ∈ v let the notation v l v 
denote that v is the variable corresponding to the literal l 
that is l ∈ v −v let l ∈ c denote that the literal l 
occurs in clause c then let the agent s utility function 
be given by u θc ol θ for all l ∈ l with l ∈ c 
u θc ol for all l ∈ l with l ∈ c u θc oc θ 
u θc oc for all c ∈ c with c c u θv ol θ for all 
l ∈ l with v l v u θv ol for all l ∈ l with v l v 
u θv oc for all c ∈ c the goal of the amd instance 
is g θ c −k 
 θ 
 where k is the goal of the minsat 
instance we show the instances are equivalent first suppose 
there is a solution to the minsat instance let the 
assignment of truth values to the variables in this solution be given 
by the function f v → l where v f v v for all v ∈ v 
then for every v ∈ v let o θv of v and π θv θ 
for every c ∈ c let o θc oc let π θc θ if c 
is not satisfied in the minsat solution and π θc θ 
if c is satisfied it is straightforward to check that the ir 
constraint is satisfied we now check that the agent has no 
incentive to misreport if the agent s type is some θv then 
any other report will give it an outcome that is no better 
for a payment that is no less so it has no incentive to 
misreport if the agent s type is some θc where c is a satisfied 
clause again any other report will give it an outcome that 
is no better for a payment that is no less so it has no 
incentive to misreport the final case to check is where the 
agent s type is some θc where c is an unsatisfied clause in 
this case we observe that for none of the types reporting it 
leads to an outcome ol for a literal l ∈ c precisely because 
the clause is not satisfied in the minsat instance because 
also no type besides θc leads to the outcome oc reporting 
any other type will give an outcome with utility while still 
forcing a payment of at least θ from the agent clearly the 
agent is better off reporting truthfully for a total utility of 
 this establishes that the agent never has an incentive to 
misreport finally we show that the goal is reached if s is 
the number of satisfied clauses in the minsat solution so 
that s ≤ k the expected payment from this mechanism 
is v θ s θ c −s θ 
 θ 
≥ v θ k θ c −k θ 
 θ 
 
 θ c −k 
 θ 
 g so there is a solution to the amd 
instance 
now suppose there is a solution to the amd instance 
given by an outcome function o and a payment function 
π first suppose there is some v ∈ v such that o θv ∈ 
 o v o−v then the utility that the agent derives from 
the given outcome for this type is and hence by ir no 
payment can be extracted from the agent for this type 
because again by ir the maximum payment that can be 
extracted for any other type is θ it follows that the 
maximum expected payment that could be obtained is at 
most θ − θ 
 θ 
 θ g contradicting that this is a 
solution to the amd instance it follows that in the solution 
to the amd instance for every v ∈ v o θv ∈ o v o−v 
 
we can interpret this as an assignment of truth values to 
the variables v is set to true if o θv o v and to false 
if o θv o−v we claim this assignment is a solution to 
the minsat instance by the ir constraint the maximum 
payment we can extract from any type θv is θ because 
there can be no incentives for the agent to report falsely for 
any clause c satisfied by the given assignment the maximum 
payment we can extract for the corresponding type θc is θ 
 for if we extracted more from this type the agent s utility 
in this case would be less than and if v is the variable 
satisfying c in the assignment so that o θv ol where l occurs 
in c then the agent would be better off reporting θv instead 
of the truthful report θc to get an outcome worth θ to 
it while having to pay at most θ finally for any 
unsatisfied clause c by the ir constraint the maximum payment 
we can extract for the corresponding type θc is θ it 
follows that the expected payment from our mechanism is 
at most v θ s θ c −s θ 
θ 
 where s is the number of 
satisfied clauses because our mechanism achieves the goal 
it follows that v θ s θ c −s θ 
θ 
≥ g which by simple 
algebraic manipulations is equivalent to s ≤ k so there is 
a solution to the minsat instance 
because payment-maximizing amd is just the special case 
of amd for a self-interested designer where the designer has 
no preferences over the outcome chosen this immediately 
implies hardness for the general case of amd for a 
selfinterested designer where payments are possible however 
it does not yet imply hardness for the special case where 
payments are not possible we will prove hardness in this 
case in the next section 
 self-interested deterministic 
amd without payments is hard 
in this section we demonstrate that it is np-complete to 
design a deterministic mechanism that maximizes the 
expectation of the designer s objective when payments are not 
possible we show that this problem is hard even in the 
single-agent setting thereby immediately showing it hard 
for both ir concepts for both solution concepts 
theorem without payments deterministic amd for 
a self-interested designer is np-complete even for a single 
agent even with a uniform distribution over types 
proof it is easy to show that the problem is in np 
to show np-hardness we reduce an arbitrary minsat 
instance to the following single-agent self-interested 
deterministic amd without payments instance let the agent s type 
set be θ θc c ∈ c ∪ θv v ∈ v where c is the 
set of clauses in the minsat instance and v is the set of 
variables let the probability distribution over these types 
be uniform let the outcome set be o o ∪ oc c ∈ 
c ∪ ol l ∈ l ∪ o 
 where l is the set of literals that is 
l v v ∈ v ∪ −v v ∈ v let the notation v l v 
denote that v is the variable corresponding to the literal l 
that is l ∈ v −v let l ∈ c denote that the literal l 
occurs in clause c then let the agent s utility function be 
given by u θc ol for all l ∈ l with l ∈ c u θc ol − 
for all l ∈ l with l ∈ c u θc oc u θc oc − for 
all c ∈ c with c c u θc o 
 u θv ol for all 
l ∈ l with v l v u θv ol − for all l ∈ l with 
v l v u θv oc − for all c ∈ c u θv o 
 − let 
the designer s objective function be given by g o 
 θ 
g ol θ for all l ∈ l g oc θ for all c ∈ c the goal 
of the amd instance is g θ c −k 
 θ 
 where k is the 
goal of the minsat instance we show the instances are 
equivalent first suppose there is a solution to the minsat 
instance let the assignment of truth values to the variables 
in this solution be given by the function f v → l where 
v f v v for all v ∈ v then for every v ∈ v let 
o θv of v for every c ∈ c that is satisfied in the 
minsat solution let o θc oc for every unsatisfied c ∈ c 
let o θc o 
 it is straightforward to check that the ir 
constraint is satisfied we now check that the agent has no 
incentive to misreport if the agent s type is some θv it is 
getting the maximum utility for that type so it has no 
incentive to misreport if the agent s type is some θc where c 
is a satisfied clause again it is getting the maximum utility 
for that type so it has no incentive to misreport the final 
case to check is where the agent s type is some θc where c is 
an unsatisfied clause in this case we observe that for none 
of the types reporting it leads to an outcome ol for a literal 
l ∈ c precisely because the clause is not satisfied in the 
minsat instance because also no type leads to the outcome 
oc there is no outcome that the mechanism ever selects that 
would give the agent utility greater than for type θc and 
hence the agent has no incentive to report falsely this 
establishes that the agent never has an incentive to misreport 
finally we show that the goal is reached if s is the number 
of satisfied clauses in the minsat solution so that s ≤ k 
then the expected value of the designer s objective function 
is v θ s θ c −s θ 
 θ 
≥ v θ k θ c −k θ 
 θ 
 
 θ c −k 
 θ 
 g so there is a solution to the amd 
instance 
now suppose there is a solution to the amd instance 
given by an outcome function o first suppose there is 
some v ∈ v such that o θv ∈ o v o−v the only other 
outcome that the mechanism is allowed to choose under the 
ir constraint is o this has an objective value of and 
because the highest value the objective function ever takes 
is θ it follows that the maximum expected value of 
the objective function that could be obtained is at most 
 θ − θ 
 θ 
 θ g contradicting that this is a 
solution to the amd instance it follows that in the solution 
to the amd instance for every v ∈ v o θv ∈ o v o−v 
we can interpret this as an assignment of truth values to 
the variables v is set to true if o θv o v and to false 
if o θv o−v we claim this assignment is a solution to 
the minsat instance by the above for any type θv the 
value of the objective function in this mechanism will be 
 θ for any clause c satisfied by the given assignment 
the value of the objective function in the case where the 
agent reports type θc will be at most θ this is because 
we cannot choose the outcome o 
for such a type as in 
this case the agent would have an incentive to report θv 
instead where v is the variable satisfying c in the 
assignment so that o θv ol where l occurs in c finally 
for any unsatisfied clause c the maximum value the 
objective function can take in the case where the agent 
reports type θc is θ simply because this is the largest 
value the function ever takes it follows that the expected 
value of the objective function for our mechanism is at most 
v θ s θ c −s θ 
θ 
 where s is the number of satisfied 
 
clauses because our mechanism achieves the goal it follows 
that v θ s θ c −s θ 
θ 
≥ g which by simple algebraic 
manipulations is equivalent to s ≤ k so there is a solution 
to the minsat instance 
both of our hardness results relied on the constraint that 
the mechanism should be deterministic in the next section 
we show that the hardness of design disappears when we 
allow for randomization in the mechanism 
 randomized amd for a 
selfinterested designer is easy 
we now show how allowing for randomization over the 
outcomes makes the problem of self-interested amd tractable 
through linear programming for any constant number of 
agents 
theorem self-interested randomized amd with a 
constant number of agents is solvable in polynomial time by 
linear programming both with and without payments both for 
ex post and ex interim ir and both for implementation in 
dominant strategies and for implementation in bayes-nash 
equilibrium-even if the types are correlated 
proof because linear programs can be solved in 
polynomial time all we need to show is that the number of 
variables and equations in our program is polynomial for any 
constant number of agents-that is exponential only in n 
throughout for purposes of determining the size of the 
linear program let t maxi θi the variables of our linear 
program will be the probabilities p θ θ θn o at 
most tn 
 o variables and the payments πi θ θ θn 
 at most ntn 
variables we show the linear program for 
the case where payments are possible the case without 
payments is easily obtained from this by simply omitting all the 
payment variables in the program or by adding additional 
constraints forcing the payments to be 
first we show the ir constraints for ex post ir we add 
the following at most ntn 
 constraints to the lp 
 for every i ∈ n and for every θ θ θn 
∈ θ × θ × × θn we add 
 
o∈o 
 p θ θ θn o u θi o − πi θ θ θn ≥ 
for ex interim ir we add the following at most nt 
constraints to the lp 
 for every i ∈ n for every θi ∈ θi we add 
θ θn 
γ θ θn θi 
o∈o 
 p θ θ θn o u θi o − 
πi θ θ θn ≥ 
now we show the solution concept constraints for 
implementation in dominant strategies we add the following 
 at most ntn 
 constraints to the lp 
 for every i ∈ n for every 
 θ θ θi θn ∈ θ × θ × × θn and for every 
alternative type report ˆθi ∈ θi we add the constraint 
 
o∈o 
 p θ θ θi θn o u θi o − 
πi θ θ θi θn ≥ 
 
o∈o 
 p θ θ ˆθi θn o u θi o − 
πi θ θ ˆθi θn 
finally for implementation in bayes-nash equilibrium we 
add the following at most nt 
 constraints to the lp 
 for every i ∈ n for every θi ∈ θi and for 
every alternative type report ˆθi ∈ θi we add the constraint 
θ θn 
γ θ θn θi 
o∈o 
 p θ θ θi θn o u θi o 
− πi θ θ θi θn ≥ 
θ θn 
γ θ θn θi 
o∈o 
 p θ θ ˆθi θn o u θi o 
− πi θ θ ˆθi θn 
all that is left to do is to give the expression the designer 
is seeking to maximize which is 
 
θ θn 
γ θ θn 
o∈o 
 p θ θ θi θn o g o 
 
n 
i 
πi θ θ θn 
as we indicated the number of variables and constraints 
is exponential only in n and hence the linear program is of 
polynomial size for constant numbers of agents thus the 
problem is solvable in polynomial time 
 implications for an optimal 
combinatorial auction design 
problem 
in this section we will demonstrate some interesting 
consequences of the problem of automated mechanism design 
for a self-interested designer on designing optimal 
combinatorial auctions 
consider a combinatorial auction with a set s of items 
for sale for any bundle b ⊆ s let ui θi b be bidder 
i s utility for receiving bundle b when the bidder s type is 
θi the optimal auction design problem is to specify the 
rules of the auction so as to maximize expected revenue to 
the auctioneer by the revelation principle without loss 
of generality we can assume the auction is truthful the 
optimal auction design problem is solved for the case of a 
single item by the famous myerson auction however 
designing optimal auctions in combinatorial auctions is a 
recognized open research problem the problem is 
open even if there are only two items for sale the 
twoitem case with a very special form of complementarity and 
no substitutability has been solved recently 
suppose we have free disposal-items can be thrown away 
at no cost also suppose that the bidders preferences have 
the following structure whenever a bidder receives a bundle 
of items the bidder s utility for that bundle is determined 
by the best item in the bundle only we emphasize that 
 
which item is the best is allowed to depend on the bidder s 
type 
definition bidder i is said to have best-only 
preferences over bundles of items if there exists a function vi 
θi × s → r such that for any θi ∈ θi for any b ⊆ s 
ui θi b maxs∈b vi θi s 
we make the following useful observation in this setting 
there is no sense in awarding a bidder more than one item 
the reason is that if the bidder is reporting truthfully taking 
all but the highest valued item away from the bidder will 
not hurt the bidder and by free disposal doing so can only 
reduce the incentive for this bidder to falsely report this 
type when the bidder actually has another type 
we now show that the problem of designing a 
deterministic optimal auction here is np-complete by a reduction 
from the payment maximizing amd problem 
theorem given an optimal combinatorial auction 
design problem under best-only preferences given by a set of 
items s and for each bidder i a finite type space θi and a 
function vi θi × s → r such that for any θi ∈ θi for any 
b ⊆ s ui θi b maxs∈b vi θi s designing the 
optimal deterministic auction is np-complete even for a single 
bidder with a uniform distribution over types 
proof the problem is in np because we can 
nondeterministically generate an allocation rule and then set the 
payments using linear programming 
to show np-hardness we reduce an arbitrary 
paymentmaximizing deterministic amd instance with a single agent 
and a uniform distribution over types to the following 
optimal combinatorial auction design problem instance with 
a single bidder with best-only preferences for every 
outcome o ∈ o in the amd instance besides the outcome o 
let there be one item so ∈ s let the type space be the 
same and let v θi so ui θi o where u is as specified in 
the amd instance let the expected revenue target value 
be the same in both instances we show the instances are 
equivalent 
first suppose there exists a solution to the amd instance 
given by an outcome function and a payment function then 
if the amd solution chooses outcome o for a type in the 
optimal auction solution allocate so to the bidder for this 
type unless o o in which case we allocate to the 
bidder let the payment functions be the same in both 
instances then the utility that an agent receives for 
reporting a type given the true type in either solution is the 
same so we have incentive compatibility in the optimal 
auction solution moreover because the type distribution and 
the payment function are the same the expected revenue to 
the auctioneer designer is the same it follows that there 
exists a solution to the optimal auction design instance 
now suppose there exists a solution to the optimal auction 
design instance by the at-most-one-item observation we 
can assume without loss of generality that the solution never 
allocates more than one item then if the optimal auction 
solution allocates item so to the bidder for a type in the 
amd solution let the mechanism choose outcome o for that 
type if the optimal auction solution allocates nothing to the 
bidder for a type in the amd solution let the mechanism 
choose outcome o for that type let the payment functions 
be the same then the utility that an agent receives for 
reporting a type given the true type in either solution is 
the same so we have incentive compatibility in the amd 
solution moreover because the type distribution and the 
payment function are the same the expected revenue to the 
designer auctioneer is the same it follows that there exists 
a solution to the amd instance 
fortunately we can also carry through the easiness result 
for randomized mechanisms to this combinatorial auction 
setting-giving us one of the few known polynomial-time 
algorithms for an optimal combinatorial auction design 
problem 
theorem given an optimal combinatorial auction 
design problem under best-only preferences given by a set of 
items s and for each bidder i a finite type space θi and a 
function vi θi × s → r such that for any θi ∈ θi for 
any b ⊆ s ui θi b maxs∈b vi θi s if the number of 
bidders is a constant k then the optimal randomized 
auction can be designed in polynomial time for any ic and 
ir constraints 
proof by the at-most-one-item observation we can 
without loss of generality restrict ourselves to allocations where 
each bidder receives at most one item there are fewer than 
 s k 
such allocations-that is a polynomial number 
of allocations because we can list the outcomes explicitly 
we can simply solve this as a payment-maximizing amd 
instance with linear programming 
 related research on 
complexity in mechanism design 
there has been considerable recent interest in mechanism 
design in computer science some of it has focused on 
issues of computational complexity but most of that work has 
strived toward designing mechanisms that are easy to 
execute e g rather than studying the 
complexity of designing the mechanism the closest piece of 
earlier work studied the complexity of automated mechanism 
design by a benevolent designer roughgarden has 
studied the complexity of designing a good network 
topology for agents that selfishly choose the links they use 
this is related to mechanism design but differs significantly 
in that the designer only has restricted control over the rules 
of the game because there is no party that can impose the 
outcome or side payments also there is no explicit 
reporting of preferences 
 conclusions and future 
research 
often an outcome must be chosen on the basis of the 
preferences reported by a group of agents the key difficulty 
is that the agents may report their preferences insincerely 
to make the chosen outcome more favorable to themselves 
mechanism design is the art of designing the rules of the 
game so that the agents are motivated to report their 
preferences truthfully and a desirable outcome is chosen in a 
recently emerging approach-called automated mechanism 
design-a mechanism is computed for the specific preference 
aggregation setting at hand this has several advantages 
 
but the downside is that the mechanism design optimization 
problem needs to be solved anew each time unlike earlier 
work on automated mechanism design that studied a 
benevolent designer in this paper we studied automated 
mechanism design problems where the designer is 
self-interesteda setting much more relevant for electronic commerce in 
this setting the center cares only about which outcome is 
chosen and what payments are made to it the reason that 
the agents preferences are relevant is that the center is 
constrained to making each agent at least as well off as the agent 
would have been had it not participated in the mechanism 
in this setting we showed that designing an optimal 
deterministic mechanism is np-complete in two important 
special cases when the center is interested only in the payments 
made to it and when payments are not possible and the 
center is interested only in the outcome chosen these 
hardness results imply hardness in all more general automated 
mechanism design settings with a self-interested designer 
the hardness results apply whether the individual 
rationality participation constraints are applied ex interim or ex 
post and whether the solution concept is dominant 
strategies implementation or bayes-nash equilibrium 
implementation we then showed that allowing randomization in the 
mechanism makes the design problem in all these settings 
computationally easy finally we showed that the 
paymentmaximizing amd problem is closely related to an interesting 
variant of the optimal revenue-maximizing combinatorial 
auction design problem where the bidders have best-only 
preferences we showed that here too designing an 
optimal deterministic mechanism is np-complete even with one 
agent but designing an optimal randomized mechanism is 
easy 
future research includes studying automated mechanism 
design with a self-interested designer in more restricted 
settings such as auctions where the designer s objective may 
include preferences about which bidder should receive the 
good-as well as payments we also want to study the 
complexity of automated mechanism design in settings where the 
outcome and type spaces have special structure so they can 
be represented more concisely finally we plan to assemble 
a data set of real-world mechanism design problems-both 
historical and current-and apply automated mechanism 
design to those problems 
 references 
 m armstrong optimal multi-object auctions review 
of economic studies - 
 k arrow the property rights doctrine and demand 
revelation under incomplete information in 
m boskin editor economics and human welfare 
new york academic press 
 c avery and t hendershott bundling and optimal 
auctions of multiple products review of economic 
studies - 
 e h clarke multipart pricing of public goods public 
choice - 
 v conitzer and t sandholm complexity of 
mechanism design in proceedings of the th annual 
conference on uncertainty in artificial intelligence 
 uai- pages - edmonton canada 
 v conitzer and t sandholm automated mechanism 
design complexity results stemming from the 
single-agent setting in proceedings of the th 
international conference on electronic commerce 
 icec- pages - pittsburgh pa usa 
 v conitzer and t sandholm computational 
criticisms of the revelation principle in proceedings of 
the acm conference on electronic commerce 
 acm-ec new york ny short paper 
full-length version appeared in the aamas- 
workshop on agent-mediated electronic commerce 
 amec 
 c d aspremont and l a g´erard-varet incentives 
and incomplete information journal of public 
economics - 
 j feigenbaum c papadimitriou and s shenker 
sharing the cost of muliticast transmissions journal 
of computer and system sciences - 
early version in proceedings of the annual acm 
symposium on theory of computing stoc 
 a gibbard manipulation of voting schemes 
econometrica - 
 t groves incentives in teams econometrica 
 - 
 j hershberger and s suri vickrey prices and 
shortest paths what is an edge worth in 
proceedings of the annual symposium on foundations 
of computer science focs 
 l khachiyan a polynomial algorithm in linear 
programming soviet math doklady - 
 
 r kohli r krishnamurthi and p mirchandani the 
minimum satisfiability problem siam journal of 
discrete mathematics - 
 d lehmann l i o callaghan and y shoham 
truth revelation in rapid approximately efficient 
combinatorial auctions journal of the acm 
 - early version appeared in 
proceedings of the acm conference on electronic 
commerce acm-ec 
 a mas-colell m whinston and j r green 
microeconomic theory oxford university press 
 e s maskin and j riley optimal multi-unit 
auctions in f hahn editor the economics of 
missing markets information and games 
chapter pages - clarendon press oxford 
 
 r myerson optimal auction design mathematics of 
operation research - 
 n nisan and a ronen computationally feasible 
vcg mechanisms in proceedings of the acm 
conference on electronic commerce acm-ec 
pages - minneapolis mn 
 n nisan and a ronen algorithmic mechanism 
design games and economic behavior - 
 early version in proceedings of the annual acm 
symposium on theory of computing stoc 
 t roughgarden designing networks for selfish users 
is hard in proceedings of the annual symposium on 
foundations of computer science focs 
 t sandholm issues in computational vickrey 
auctions international journal of electronic 
commerce - special issue on 
 
applying intelligent agents for electronic commerce 
a short early version appeared at the second 
international conference on multi-agent systems 
 icmas pages - 
 m a satterthwaite strategy-proofness and arrow s 
conditions existence and correspondence theorems for 
voting procedures and social welfare functions 
journal of economic theory - 
 w vickrey counterspeculation auctions and 
competitive sealed tenders journal of finance 
 - 
 r v vohra research problems in combinatorial 
auctions mimeo version oct 
 
