context awareness for group interaction support 
alois ferscha clemens holzmann stefan oppl 
institut für pervasive computing johannes kepler universität linz 
altenbergerstraße a- linz 
 ferscha holzmann oppl  soft uni-linz ac at 
abstract 
in this paper we present an implemented system for supporting 
group interaction in mobile distributed computing environments 
first an introduction to context computing and a motivation for 
using contextual information to facilitate group interaction is 
given we then present the architecture of our system which 
consists of two parts a subsystem for location sensing that 
acquires information about the location of users as well as spatial 
proximities between them and one for the actual context-aware 
application which provides services for group interaction 
categories and subject descriptors 
c computer-communication networks distributed 
systems - distributed applications 
h models and principles user machine systems - human 
factors 
h information interfaces and presentation group and 
organization interfaces - asynchronous interaction collaborative 
computing theory and models synchronous interaction 
general terms 
design experimentation 
 introduction 
today s computing environments are characterized by an 
increasing number of powerful wirelessly connected mobile 
devices users can move throughout an environment while 
carrying their computers with them and having remote access to 
information and services anytime and anywhere new situations 
appear where the user s context - for example his current 
location or nearby people - is more dynamic computation does 
not occur at a single location and in a single context any longer 
but comprises a multitude of situations and locations this 
development leads to a new class of applications which are 
aware of the context in which they run in and thus bringing virtual 
and real worlds together 
motivated by this and the fact that only a few studies have been 
done for supporting group communication in such computing 
environments we have developed a system which we refer 
to as group interaction support system giss it supports group 
interaction in mobile distributed computing environments in a 
way that group members need not to at the same place any longer 
in order to interact with each other or just to be aware of the 
others situation 
in the following subchapters we will give a short overview on 
context aware computing and motivate its benefits for supporting 
group interaction a software framework for developing 
contextsensitive applications is presented which serves as middleware 
for giss chapter presents the architecture of giss and chapter 
 and discuss the location sensing and group interaction 
concepts of giss in more detail chapter gives a final summary 
of our work 
 what is context computing 
according to merriam-webster s online dictionary 
 context is 
defined as the interrelated conditions in which something exists 
or occurs because this definition is very general many 
approaches have been made to define the notion of context with 
respect to computing environments 
most definitions of context are done by enumerating examples or 
by choosing synonyms for context the term context-aware has 
been introduced first in where context is referred to as 
location identities of nearby people and objects and changes to 
those objects in context is also defined by an enumeration of 
examples namely location identities of the people around the 
user the time of the day season temperature etc defines 
context as the user s location environment identity and time 
here we conform to a widely accepted and more formal 
definition which defines context as any information than can be 
used to characterize the situation of an entity an entity is a 
person place or object that is considered relevant to the 
interaction between a user and an application including the user 
and applications themselves 
 identifies four primary types of context information 
 sometimes referred to as context dimensions that are - with 
respect to characterizing the situation of an entity - more 
important than others these are location identity time and 
activity which can also be used to derive other sources of 
contextual information secondary context types for example if 
we know a person s identity we can easily derive related 
information about this person from several data sources e g day 
of birth or e-mail address 
according to this definition defines a system to be 
contextaware if it uses context to provide relevant information and or 
services to the user where relevancy depends on the user s task 
 also gives a classification of features for context-aware 
applications which comprises presentation of information and 
services to a user automatic execution of a service and tagging of 
context to information for later retrieval 
figure layers of a context-aware system 
context computing is based on two major issues namely 
identifying relevant context identity location time activity and 
using obtained context automatic execution presentation 
tagging in order to do this there are a few layers between see 
figure first the obtained low-level context information has to 
be transformed aggregated and interpreted context 
transformation and represented in an abstract context world 
model context representation either centralized or 
decentralized finally the stored context information is used to 
trigger certain context events context triggering 
 group interaction in context 
after these abstract and formal definitions about what context and 
context computing is we will now focus on the main goal of this 
work namely how the interaction of mobile group members can 
be supported by using context information 
in we have identified organizational systems to be crucial for 
supporting mobile groups see figure first there has to be an 
information and knowledge management system which is 
capable of supporting a team with its information processing- and 
knowledge gathering needs the next part is the awareness 
system which is dedicated to the perceptualisation of the effects 
of team activity it does this by communicating work context 
agenda and workspace information to the users the interaction 
systems provide support for the communication among team 
members either synchronous or asynchronous and for the shared 
access to artefacts such as documents mobility systems deploy 
mechanisms to enable any-place access to team memory as well 
as the capturing and delivery of awareness information from and 
to any places finally yet importantly the organisational 
innovation system integrates aspects of the team itself like roles 
leadership and shared facilities 
with respect to these five aspects of team support we focus on 
interaction and partly cover mobility- and awareness-support 
group interaction includes all means that enable group members 
to communicate freely with all the other members at this point 
the question how context information can be used for supporting 
group interaction comes up we believe that information about 
the current situation of a person provides a surplus value to 
existing group interaction systems context information facilitates 
group interaction by allowing each member to be aware of the 
availability status or the current location of each other group 
member which again makes it possible to form groups 
dynamically to place virtual post-its in the real world or to 
determine which people are around 
figure support for mobile groups 
most of today s context-aware applications use location and time 
only and location is referred to as a crucial type of context 
information we also see the importance of location 
information in mobile and ubiquitous environments wherefore a 
main focus of our work is on the utilization of location 
information and information about users in spatial proximity 
nevertheless we believe that location as the only used type of 
context information is not sufficient to support group interaction 
wherefore we also take advantage of the other three primary 
types namely identity time and activity this provides a 
comprehensive description of a user s current situation and thus 
enabling numerous means for supporting group interaction which 
are described in detail in chapter 
when we look at the types of context information stated above 
we can see that all of them are single user-centred taking into 
account only the context of the user itself we believe that for the 
support of group interaction the status of the group itself has also 
be taken into account therefore we have added a fifth 
contextdimension group-context which comprises more than the sum of 
the individual member s contexts group context includes any 
information about the situation of a whole group for example 
how many members a group currently has or if a certain group 
meets right now 
 context middleware 
the group interaction support system giss uses the 
softwareframework introduced in which serves as a middleware for 
developing context-sensitive applications this so-called context 
framework is based on a distributed communication architecture 
and it supports different kinds of transport protocols and message 
coding mechanisms 
 
a main feature of the framework is the abstraction of context 
information retrieval via various sensors and its delivery to a level 
where no difference appears for the application designer 
between these different kinds of context retrieval mechanisms the 
information retrieval is hidden from the application developer 
this is achieved by so-called entities which describe 
objectse g a human user - that are important for a certain context 
scenario 
entities express their functionality by the use of so-called 
attributes which can be loaded into the entity these attributes 
are complex pieces of software which are implemented as java 
classes typical attributes are encapsulations of sensors but they 
can also be used to implement context services for example to 
notify other entities about location changes of users 
each entity can contain a collection of such attributes where an 
entity itself is an attribute the initial set of attributes an entity 
contains can change dynamically at runtime if an entity loads or 
unloads attributes from the local storage or over the network in 
order to load and deploy new attributes an entity has to reference 
a class loader and a transport and lookup layer which manages 
the lookup mechanism for discovering other entities and the 
transport xml configuration files specify which initial set of 
entities should be loaded and which attributes these entities own 
the communication between entities and attributes is based on 
context events each attribute is able to trigger events which are 
addressed to other attributes and entities respectively 
independently on which physical computer they are running 
among other things and event contains the name of the event and 
a list of parameters delivering information about the event itself 
related with this event-based architecture is the use of eca 
 event-condition-action -rules for defining the behaviour of the 
context system therefore every entity has a rule-interpreter 
which catches triggered events checks conditions associated with 
them and causes certain actions these rules are referenced by the 
entity s xml configuration a rule itself is even able to trigger 
the insertion of new rules or the unloading of existing rules at 
runtime in order to change the behaviour of the context system 
dynamically 
to sum up the context framework provides a flexible distributed 
architecture for hiding low-level sensor data from high-level 
applications and it hides external communication details from the 
application developer furthermore it is able to adapt its 
behaviour dynamically by loading attributes entities or 
ecarules at runtime 
 architecture overview 
as giss uses the context framework described in chapter as 
middleware every user is represented by an entity as well as the 
central server which is responsible for context transformation 
context representation and context triggering cf figure 
a main part of our work is about the automated acquisition of 
position information and its sensor-independent provision at 
application level we do not only sense the current location of 
users but also determine spatial proximities between them 
developing the architecture we focused on keeping the client as 
simple as possible and reducing the communication between 
client and server to a minimum 
each client may have various location and or proximity sensors 
attached which are encapsulated by respective context 
framework-attributes sensor encapsulation these attributes 
are responsible for integrating native sensor-implementations into 
the context framework and sending sensor-dependent position 
information to the server we consider it very important to 
support different types of sensors even at the same time in order 
to improve location accuracy on the one hand while providing a 
pervasive location-sensing environment with seamless transition 
between different location sensing techniques on the other hand 
all location- and proximity-sensors supported are represented by 
server-side context-attributes which correspond to the client-side 
sensor encapsulation-attributes and abstract the sensor-dependent 
position information received from all users via the wireless 
network sensor abstraction this requires a context repository 
where the mapping of diverse physical positions to standardized 
locations is stored 
the standardized location- and proximity-information of each 
user is then passed to the so-called sensor fusion-attributes 
one for symbolic locations and a second one for spatial 
proximities their job is to merge location- and 
proximityinformation of clients respectively which is described in detail in 
chapter every time the symbolic location of a user or the 
spatial proximity between two users changes the sensor 
fusion-attributes notify the giss core-attribute which 
controls the application 
because of the abstraction of sensor-dependent position 
information the system can easily be extended by additional 
sensors just by implementing the typically two attributes for 
encapsulating sensors some sensors may not need a client-side 
part abstracting physical positions and observing the interface to 
giss core 
figure architecture of the group interaction support 
system giss 
the giss core-attribute is the central coordinator of the 
application as it shows to the user it not only serves as an 
interface to the location-sensing subsystem but also collects 
further context information in other dimensions time identity or 
activity 
 
every time a change in the context of one or more users is 
detected giss core evaluates the effect of these changes on 
the user on the groups he belongs to and on the other members of 
these groups whenever necessary events are thrown to the 
affected clients to trigger context-aware activities like changing 
the presentation of awareness information or the execution of 
services 
the client-side part of the application is kept as simple as 
possible furthermore modular design was not only an issue on 
the sensor side but also when designing the user interface 
architecture thus the complete user interface can be easily 
exchanged if all of the defined events are taken into account and 
understood by the new interface-attribute 
the currently implemented user interface is split up in two parts 
which are also represented by two attributes the central attribute 
on client-side is the so-called instant messenger encapsulation 
which on the one hand interacts with the server through events 
and on the other hand serves as a proxy for the external 
application the user interface is built on 
as external application we use an existing open source instant 
messenger - the icq 
-compliant simple instant messenger 
 sim 
 we have chosen and instant messenger as front-end 
because it provides a well-known interface for most users and 
facilitates a seamless integration of group interaction support thus 
increasing acceptance and ease of use as the basic functionality 
of the instant messenger - to serve as a client in an instant 
messenger network - remains fully functional our application is 
able to use the features already provided by the messenger for 
example the contexts activity and identity are derived from the 
messenger network as it is described later 
the instant messenger encapsulation is also responsible for 
supporting group communication through the interface of the 
messenger it provides means of synchronous and asynchronous 
communication as well as a context-aware reminder system and 
tools for managing groups and the own availability status 
the second part of the user interface is a visualisation of the 
user s locations which is implemented in the attribute viewer 
the current implementation provides a two-dimensional map of 
the campus but it can easily be replaced by other visualisations a 
three-dimensional vrml-model for example furthermore this 
visualisation is used to show the artefacts for asynchronous 
communication based on a floor plan-view of the geographical 
area the user currently resides in it gives a quick overview of 
which people are nearby their state and provides means to 
interact with them 
in the following chapters and we describe the location 
sensing-backend and the application front-end for supporting 
group interaction in more detail 
 location sensing 
in the following chapter we will introduce a location model 
which is used for representing locations afterwards we will 
describe the integration of location- and proximity-sensors in 
 
http www icq com 
 
http sim-icq sourceforge net 
more detail finally we will have a closer look on the fusion of 
location- and proximity-information acquired by various sensors 
 location model 
a location model i e a context representation for the 
contextinformation location is needed to represent the locations of users 
in order to be able to facilitate location-related queries like given 
a location return a list of all the objects there or given an 
object return its current location in general there are two 
approaches symbolic models which represent location as 
abstract symbols and a geometric model which represent 
location as coordinates 
we have chosen a symbolic location model which refers to 
locations as abstract symbols like room p or physics 
building because we do not require geometric location data 
instead abstract symbols are more convenient for human 
interaction at application level furthermore we use a symbolic 
location containment hierarchy similar to the one introduced in 
 which consists of top-level regions which contain buildings 
which contain floors and the floors again contain rooms we also 
distinguish four types namely region e g a whole campus 
section e g a building or an outdoor section level e g a certain 
floor in a building and area e g a certain room we introduce a 
fifth type of location which we refer to as semantic these 
socalled semantic locations can appear at any level in the hierarchy 
and they can be nested but they do not necessarily have a 
geographic representation examples for such semantic locations 
are tagged objects within a room e g a desk and a printer on this 
desk or the name of a department which contains certain rooms 
figure symbolic location containment hierarchy 
the hierarchy of symbolic locations as well as the type of each 
position is stored in the context repository 
 sensors 
our architecture supports two different kinds of sensors location 
sensors which acquire location information and proximity 
sensors which detect spatial proximities between users 
as described above each sensor has a server- and in most cases a 
corresponding client-side-implementation too while the 
clientattributes sensor abstraction are responsible for acquiring 
low-level sensor-data and transmitting it to the server the 
corresponding sensor encapsulation-attributes transform them 
into a uniform and sensor-independent format namely symbolic 
locations and ids of users in spatial proximity respectively 
 
afterwards the respective attribute sensor fusion is being 
triggered with this sensor-independent information of a certain 
user detected by a particular sensor such notifications are 
performed every time the sensor acquired new information 
accordingly sensor abstraction-attributes are responsible to 
detect when a certain sensor is no longer available on the client 
side e g if it has been unplugged by the user or when position 
respectively proximity could not be determined any longer e g 
rfid reader cannot detect tags and notify the corresponding 
sensor fusion about this 
 location sensors 
in order to sense physical positions the sensor 
encapsulationattributes asynchronously transmit sensor-dependent position 
information to the server the corresponding location sensor 
abstraction-attributes collect these physical positions delivered 
by the sensors of all users and perform a repository-lookup in 
order to get the associated symbolic location this requires certain 
tables for each sensor which map physical positions to symbolic 
locations one physical position may have multiple symbolic 
locations at different accuracy-levels in the location hierarchy 
assigned to for example if a sensor covers several rooms if such 
a mapping could be found an event is thrown in order to notify 
the attribute location sensor fusion about the symbolic 
locations a certain sensor of a particular user determined 
we have prototypically implemented three kinds of location 
sensors which are based on wlan ieee bluetooth and 
rfid radio frequency identification we have chosen these 
three completely different sensors because of their differences 
concerning accuracy coverage and administrative effort in order 
to evaluate the flexibility of our system see table 
the most accurate one is an rfid sensor which is based on an 
active rfid-reader as soon as the reader is plugged into the 
client it scans for active rfid tags in range and transmits their 
serial numbers to the server where they are mapped to symbolic 
locations we also take into account rssi radio signal strength 
information which provides position accuracy of few 
centimetres and thus enables us to determine which rfid-tag is 
nearest due to this high accuracy rfid is used for locating users 
within rooms the administration is quite simple once a new 
rfid tag is placed its serial number simply has to be assigned to 
a single symbolic location a drawback is the poor availability 
which can be traced back to the fact that rfid readers are still 
very expensive 
the second one is an wlan sensor therefore we 
integrated a purely software-based commercial wlan 
positioning system for tracking clients on the university 
campuswide wlan infrastructure the reached position accuracy is in 
the range of few meters and thus is suitable for location sensing at 
the granularity of rooms a big disadvantage is that a map of the 
whole area has to be calibrated with measuring points at a 
distance of meters each because most mobile computers are 
equipped with wlan technology and the positioning-system is a 
software-only solution nearly everyone is able to use this kind of 
sensor 
finally we have implemented a bluetooth sensor which detects 
bluetooth tags i e bluetooth-modules with known position in 
range and transmits them to the server that maps to symbolic 
locations because of the fact that we do not use signal 
strengthinformation in the current implementation the accuracy is above 
 meters and therefore a single bluetooth mac address is 
associated with several symbolic locations according to the 
physical locations such a bluetooth module covers this leads to 
the disadvantage that the range of each bluetooth-tag has to be 
determined and mapped to symbolic locations within this range 
table comparison of implemented sensors 
sensor accuracy coverage administration 
rfid cm poor easy 
wlan - m very well 
very 
timeconsuming 
bluetooth   m well time-consuming 
 proximity sensors 
any sensor that is able to detect whether two users are in spatial 
proximity is referred to as proximity sensor similar to the 
location sensors the proximity sensor abstraction-attributes 
collect physical proximity information of all users and transform 
them to mappings of user-ids 
we have implemented two types of proximity-sensors which are 
based on bluetooth on the one hand and on fused symbolic 
locations see chapter on the other hand 
the bluetooth-implementation goes along with the 
implementation of the bluetooth-based location sensor the 
already determined bluetooth mac addresses in range of a 
certain client are being compared with those of all other clients 
and each time the attribute bluetooth sensor abstraction 
detects congruence it notifies the proximity sensor fusion about 
this 
the second sensor is based on symbolic locations processed by 
location sensor fusion wherefore it does not need a client-side 
implementation each time the fused symbolic location of a 
certain user changes it checks whether he is at the same symbolic 
location like another user and again notifies the proximity sensor 
fusion about the proximity between these two users the range 
can be restricted to any level of the location containment 
hierarchy for example to room granularity 
a currently unresolved issue is the incomparable granularity of 
different proximity sensors for example the symbolic locations 
at same level in the location hierarchy mostly do not cover the 
same geographic area 
 sensor fusion 
core of the location sensing subsystem is the sensor fusion it 
merges data of various sensors while coping with differences 
concerning accuracy coverage and sample-rate according to the 
two kinds of sensors described in chapter we distinguish 
between fusion of location sensors on the one hand and fusion of 
proximity sensors on the other hand 
the fusion of symbolic locations as well as the fusion of spatial 
proximities operates on standardized information cf figure 
this has the advantage that additional position- and 
proximitysensors can be added easily or the fusion algorithms can be 
replaced by ones that are more sophisticated 
 
fusion is performed for each user separately and takes into 
account the measurements at a single point in time only i e no 
history information is used for determining the current location of 
a certain user the algorithm collects all events thrown by the 
sensor abstraction-attributes performs fusion and triggers the 
giss core-attribute if the symbolic location of a certain user or 
the spatial proximity between users changed 
an important feature is the persistent storage of location- and 
proximity-history in a database in order to allow future retrieval 
this enables applications to visualize the movement of users for 
example 
 location sensor fusion 
goal of the fusion of location information is to improve precision 
and accuracy by merging the set of symbolic locations supplied 
by various location sensors in order to reduce the number of 
these locations to a minimum ideally to a single symbolic 
location per user this is quite difficult because different sensors 
may differ in accuracy and sample rate as well 
the location sensor fusion-attribute is triggered by events 
which are thrown by the location sensor 
abstractionattributes these events contain information about the identity of 
the user concerned his current location and the sensor by which 
the location has been determined 
if the attribute location sensor fusion receives such an event 
it checks if the amount of symbolic locations of the user 
concerned has changed compared with the last event if this is 
the case it notifies the giss core-attribute about all symbolic 
locations this user is currently associated with 
however this information is not very useful on its own if a 
certain user is associated with several locations as described in 
chapter a single location sensor may deliver multiple 
symbolic locations moreover a certain user may have several 
location sensors which supply symbolic locations differing in 
accuracy i e different levels in the location containment 
hierarchy to cope with this challenge we implemented a fusion 
algorithm in order to reduce the number of symbolic locations to a 
minimum ideally to a single location 
in a first step each symbolic location is associated with its 
number of occurrences a symbolic location may occur several 
times if it is referred to by more than one sensor or if a single 
sensor detects multiple tags which again refer to several 
locations furthermore this number is added to the previously 
calculated number of occurrences of each symbolic location 
which is a child-location of the considered one in the location 
containment hierarchy for example if - in figure - room 
occurs two times and desk occurs a single time the value of 
room is added to the value of desk whereby desk finally 
gets the value in a final step only those symbolic locations are 
left which are assigned with the highest number of occurrences 
a further reduction can be achieved by assigning priorities to 
sensors based on accuracy and confidence and cumulating these 
priorities for each symbolic location instead of just counting the 
number of occurrences 
if the remaining fused locations have changed i e if they differ 
from the fused locations the considered user is currently 
associated with they are provided with the current timestamp 
written to the database and the giss-attribute is notified about 
where the user is probably located 
finally the most accurate common location in the location 
hierarchy is calculated i e the least upper bound of these 
symbolic locations in order to get a single symbolic location if it 
changes the giss core-attribute is triggered again 
 proximity sensor fusion 
proximity sensor fusion is much simpler than the fusion of 
symbolic locations the corresponding proximity sensor 
fusionattribute is triggered by events which are thrown by the 
proximity sensor abstraction-attributes these special events 
contain information about the identity of the two users concerned 
if they are currently in spatial proximity or if proximity no longer 
persists and by which proximity-sensor this has been detected 
if the sensor fusion-attribute is notified by a certain proximity 
sensor abstraction-attribute about an existing spatial proximity 
it first checks if these two users are already known to be in 
proximity detected either by another user or by another 
proximity-sensor of the user which caused the event if not this 
change in proximity is written to the context repository with 
current timestamp similarly if the attribute proximity fusion 
is notified about an ended proximity it checks if the users are still 
known to be in proximity and writes this change to the repository 
if not 
finally if spatial proximity between the two users actually 
changed an event is thrown to notify the giss core-attribute 
about this 
 contextsensitive interaction 
 overview 
in most of today s systems supporting interaction in groups the 
provided means lack any awareness of the user s current context 
thus being unable to adapt to his needs 
in our approach we use context information to enhance 
interaction and provide further services which offer new 
possibilities to the user furthermore we believe that interaction 
in groups also has to take into account the current context of the 
group itself and not only the context of individual group 
members for this reason we also retrieve information about the 
group s current context derived from the contexts of the group 
members together with some sort of meta-information see 
chapter 
the sources of context used for our application correspond with 
the four primary context types given in chapter - identity i 
location l time t and activity a as stated before we also 
take into account the context of the group the user is interaction 
with so that we could add a fifth type of context 
informationgroup awareness g - to the classification using this context 
information we can trigger context-aware activities in all of the 
three categories described in chapter - presentation of 
information p automatic execution of services a and tagging 
of context to information for later retrieval t 
table gives an overview of activities we have already 
implemented they are described comprehensively in chapter 
the table also shows which types of context information are used 
for each activity and the category the activity could be classified 
in 
 
table classification of implemented context-aware 
activities 
service l t i a g p a t 
location visualisation x x x 
group building support x x x x 
support for synchronous 
communication 
x x x x 
support for asynchronous 
communication 
x x x x x x x 
availability management x x x 
task management support x x x x 
meeting support x x x x x x 
reasons for implementing these very features are to take 
advantage of all four types of context information in order to 
support group interaction by utilizing a comprehensive knowledge 
about the situation a single user or a whole group is in 
a critical issue for the user acceptance of such a system is the 
usability of its interface we have evaluated several ways of 
presenting context-aware means of interaction to the user until 
we came to the solution we use right now although we think that 
the user interface that has been implemented now offers the best 
trade-off between seamless integration of features and ease of use 
it would be no problem to extend the architecture with other user 
interfaces even on different platforms 
the chosen solution is based on an existing instant messenger 
which offers several possibilities to integrate our system see 
chapter the biggest advantage of this approach is that the 
user is confronted with a graphical user interface he is already 
used to in most cases furthermore our system uses an instant 
messenger account as an identifier so that the user does not have 
to register a further account anywhere else for example the user 
can use his already existing icq 
-account 
 instant messenger integration 
our system is based upon an existing instant messenger the 
socalled simple instant messenger sim 
 the implementation of 
this messenger is carried out as a project at sourceforge 
 
sim supports multiple messenger protocols such as aim 
 icq 
and msn 
 it also supports connections to multiple accounts at 
the same time furthermore full support for sms-notification 
 where provided from the used protocol is given 
sim is based on a plug-in concept all protocols as well as parts 
of the user-interface are implemented as plug-ins its architecture 
is also used to extend the application s abilities to communicate 
with external applications for this purpose a remote control 
plug-in is provided by which sim can be controlled from 
external applications via socket connection this remote control 
interface is extensively used by giss for retrieving the contact 
list setting the user s availability-state or sending messages the 
 
http sourceforge net 
 
http www aim com 
 
http messenger msn com 
functionality of the plug-in was extended in several ways for 
example to accept messages for an account as if they would have 
been sent via the messenger network 
the messenger more exactly the contact list i e a list of profiles 
of all people registered with the instant messenger which is 
visualized by listing their names as it can be seen in figure is 
also used to display locations of other members of the groups a 
user belongs to this provides location awareness without taking 
too much space or requesting the user s full attention a more 
comprehensive description of these features is given in chapter 
 
 sources of context information 
while the location-context of a user is obtained from our location 
sensing subsystem described in chapter we consider further 
types of context than location relevant for the support of group 
interaction too 
local time as a very important context dimension can be easily 
retrieved from the real time clock of the user s system besides 
location and time we also use context information of user s 
activity and identity where we exploit the functionality provided 
by the underlying instant messenger system identity or more 
exactly the mapping of ids to names as well as additional 
information from the user s profile can be distilled out of the 
contents of the user s contact list 
information about the activity or a certain user is only available in 
a very restricted area namely the activity at the computer itself 
other activities like making a phone call or something similar 
cannot be recognized with the current implementation of the 
activity sensor the only context-information used is the instant 
messenger s availability state thus only providing a very coarse 
classification of the user s activity online offline away busy 
etc although this may not seem to be very much information it 
is surely relevant and can be used to improve or even enable 
several services 
having collected the context information from all available users 
it is now possible to distil some information about the context of a 
certain group information about the context of a group includes 
how many members the group currently has if the group meets 
right now which members are participating at a meeting how 
many members have read which of the available posts from other 
team members and so on 
therefore some additional information like a list of members for 
each group is needed these lists can be assembled manually by 
users joining and leaving groups or retrieved automatically the 
context of a group is secondary context and is aggregated from 
the available contexts of the group members every time the 
context of a single group member changes the context of the 
whole group is changing and has to be recalculated 
with knowledge about a user s context and the context of the 
groups he belongs to we can provide several context-aware 
services to the user which enhance his interaction abilities a 
brief description of these services is given in chapter 
 
 group interaction support 
 visualisation of location information 
an important feature is the visualisation of location information 
thus allowing users to be aware of the location of other users and 
members of groups he joined respectively 
as already described in chapter we use two different forms of 
visualisation the maybe more important one is to display 
location information in the contact list of the instant messenger 
right beside the name thus being always visible while not 
drawing the user s attention on it compared with a 
twodimensional view for example which requires a own window for 
displaying a map of the environment 
due to the restricted space in the contact list it has been 
necessary to implement some sort of level-of-detail concept as 
we use a hierarchical location model we are able to determine the 
most accurate common location of two users in the contact list 
the current symbolic location one level below the previously 
calculated common location is then displayed if for example 
user a currently resides in room p at the first floor of a 
building and user b which has to be displayed in the contact list 
of user a is in room p at the third floor the most accurate 
common location of these two users is the building they are in 
for that reason the floor i e one level beyond the common 
location namely the building of user b is displayed in the 
contact list of user a if both people reside on the same floor or 
even in the same room the room would be taken 
figure shows a screenshot of the simple instant messenger 
 
where the current location of those people whose location is 
known by giss is displayed in brackets right beside their name 
on top of the image the heightened integrated giss-toolbar is 
shown which currently contains the following implemented 
functionality from left to right asynchronous communication 
for groups see chapter context-aware reminders see 
chapter two-dimensional visualisation of 
locationinformation forming and managing groups see chapter 
context-aware availability-management see chapter and 
finally a button for terminating giss 
figure giss integration in simple instant messenger 
as displaying just this short form of location may not be enough 
for the user because he may want to see the most accurate 
position available a fully qualified position is shown if a name 
in the contact-list is clicked e g in the form of 
desk room  department   stfloor building  campus 
the second possible form of visualisation is a graphical one we 
have evaluated a three-dimensional view which was based on a 
vrml model of the respective area cf figure due to lacks in 
navigational and usability issues we decided to use a 
twodimensional view of the floor it is referred to as level in the 
location hierarchy cf figure other levels of granularity like 
section e g building and region e g campus are also provided 
in this floor-plan-based view the current locations are shown in 
the manner of icq 
contacts which are placed at the currently 
sensed location of the respective person the availability-status of 
a user for example away if he is not on the computer right now 
or busy if he does not want to be disturbed is visualized by 
colour-coding the icq 
-flower left beside the name furthermore 
the floor-plan-view shows so-called the virtual post-its which are 
virtual counterparts of real-life post-its and serve as our means of 
asynchronous communication more about virtual post-its can be 
found in chapter 
figure d-view of the floor vrml 
figure shows the two-dimensional map of a certain floor where 
several users are currently located visualized by their name and 
the flower left beside the location of the client on which the 
map is displayed is visualized by a green circle down to the 
right two virtual post-its can be seen 
figure d view of the floor 
another feature of the d-view is the visualisation of 
locationhistory of users as we store the complete history of a user s 
locations together with a timestamp we are able to provide 
information about the locations he has been back in time when 
the mouse is moved over the name of a certain user in the 
 dview footprints of a user placed at the locations he has been 
are faded out the stronger the older the location information is 
 
 forming and managing groups 
to support interaction in groups it is first necessary to form 
groups as groups can have different purposes we distinguish two 
types of groups 
so-called static groups are groups which are built up manually 
by people joining and leaving them static groups can be further 
divided into two subtypes in open static groups everybody can 
join and leave anytime useful for example to form a group of 
lecture attendees of some sort of interest group closed static 
groups have an owner who decides which persons are allowed to 
join although everybody could leave again at any time closed 
groups enable users for example to create a group of their friends 
thus being able to communicate with them easily 
in contrast to that we also support the creation of dynamic 
groups they are formed among persons who are at the same 
location at the same time the creation of dynamic groups is only 
performed at locations where it makes sense to form groups for 
example in lecture halls or meeting rooms but not on corridors or 
outdoor it would also be not very meaningful to form a group 
only of the people residing in the left front sector of a hall 
instead the complete hall should be considered for these 
reasons all the defined locations in the hierarchy are tagged 
whether they allow the formation of groups or not dynamic 
groups are also not only formed granularity of rooms but also on 
higher levels in the hierarchy for example with the people 
currently residing in the area of a department 
as the members of dynamic groups constantly change it is 
possible to create an open static group out of them 
 synchronous communication for groups 
the most important form of synchronous communication on 
computers today is instant messaging some people even see 
instant messaging to be the real killer application on the internet 
this has also motivated the decision to build giss upon an 
instant messaging system 
in today s messenger systems peer-to-peer-communication is 
extensively supported however when it comes to 
communication in groups the support is rather poor most of the 
time often only sending a message to multiple recipients is 
supported lacking means to take into account the current state of 
the recipients furthermore groups can only be formed of 
members in one s contact list thus being not able to send 
messages to a group where not all of its members are known 
 which may be the case in settings where the participants of a 
lecture form a group 
our approach does not have the mentioned restrictions we 
introduce group-entries in the user s contact list enable him or 
his to send messages to this group easily without knowing who 
exactly is currently a member of this group furthermore group 
messages are only delivered to persons who are currently not 
busy thus preventing a disturbance by a message which is 
possibly unimportant for the user 
these features cannot be carried out in the messenger network 
itself so whenever a message to a group account is sent we 
intercept it and route it through our system to all the recipients 
which are available at a certain time communication via a group 
account is also stored centrally enabling people to query missed 
messages or simply viewing the message history 
 asynchronous communication for groups 
asynchronous communication in groups is not a new idea the 
goal of this approach is not to reinvent the wheel as email is 
maybe the most widely used form of asynchronous 
communication on computers and is broadly accepted and 
standardized in out work we aim at the combination of 
asynchronous communication with location awareness 
for this reason we introduce the concept of so-called virtual 
postits cp which are messages that are bound to physical 
locations these virtual post-its could be either visible for all 
users that are passing by or they can be restricted to be visible for 
certain groups of people only moreover a virtual post-it can also 
have an expiry date after which it is dropped and not displayed 
anymore virtual post-its can also be commented by others thus 
providing some from of forum-like interaction where each post-it 
forms a thread 
virtual post-its are displayed automatically whenever a user 
 available passes by the first time afterwards post-its can be 
accessed via the d-viewer where all visible post-its are shown 
all readers of a post-it are logged and displayed when viewing it 
providing some sort of awareness about the group members 
activities in the past 
 context-aware availability management 
instant messengers in general provide some kind of availability 
information about a user although this information can be only 
defined in a very coarse granularity we have decided to use these 
means of gathering activity context because the introduction of 
an additional one would strongly decrease the usability of the 
system 
to support the user managing his availability we provide an 
interface that lets the user define rules to adapt his availability to 
the current context these rules follow the form on event e if 
condition c then action a which is directly supported by the 
eca-rules of the context framework described in chapter 
the testing of conditions is periodically triggered by throwing 
events whenever the context of a user changes the condition 
itself is defined by the user who can demand the change of his 
availability status as the action in the rule as a condition the user 
can define his location a certain time also triggering daily every 
week or every month or any logical combination of these criteria 
 context-aware reminders 
reminders are used to give the user the opportunity of 
defining tasks and being reminded of those when certain criteria 
are fulfilled thus a reminder can be seen as a post-it to oneself 
which is only visible in certain cases reminders can be bound to 
a certain place or time but also to spatial proximity of users or 
groups these criteria can be combined with boolean operators 
thus providing a powerful means to remind the user of tasks that 
he wants to carry out when a certain context occurs 
a reminder will only pop up the first time the actual context 
meets the defined criterion on showing up the reminder the user 
has the chance to resubmit it to be reminded again for example 
five minutes later or the next time a certain user is in spatial 
proximity 
 
 context-aware recognition and notification of 
group meetings 
with the available context information we try to recognize 
meetings of a group the determination of the criteria when the 
system recognizes a group having a meeting is part of the 
ongoing work in a first approach we use the location- and 
activity-context of the group members to determine a meeting 
whenever more than of the members of a group are 
available at a location where a meeting is considered to make 
sense e g not on a corridor a meeting minutes post-it is created 
at this location and all absent group members are notified of the 
meeting and the location it takes place 
during the meeting the comment-feature of virtual post-its 
provides a means to take notes for all of the participants when 
members are joining or leaving the meeting this is automatically 
added as a note to the list of comments 
like the recognition of the beginning of a meeting the 
recognition of its end is still part of ongoing work if the end of 
the meeting is recognized all group members get the complete list 
of comments as a meeting protocol at the end of the meeting 
 conclusions 
this paper discussed the potentials of support for group 
interaction by using context information first we introduced the 
notions of context and context computing and motivated their 
value for supporting group interaction 
an architecture is presented to support context-aware group 
interaction in mobile distributed environments it is built upon a 
flexible and extensible framework thus enabling an easy adoption 
to available context sources e g by adding additional sensors as 
well as the required form of representation 
we have prototypically developed a set of services which 
enhance group interaction by taking into account the current 
context of the users as well as the context of groups itself 
important features are dynamic formation of groups visualization 
of location on a two-dimensional map as well as unobtrusively 
integrated in an instant-messenger asynchronous communication 
by virtual post-its which are bound to certain locations and a 
context-aware availability-management which adapts the 
availability-status of a user to his current situation 
to provide location information we have implemented a 
subsystem for automated acquisition of location- and 
proximityinformation provided by various sensors which provides a 
technology-independent presentation of locations and spatial 
proximities between users and merges this information using 
sensor-independent fusion algorithms a history of locations as 
well as of spatial proximities is stored in a database thus enabling 
context history-based services 
 references 
 beer w christian v ferscha a mehrmann l 
modeling context-aware behavior by interpreted eca 
rules in proceedings of the international conference on 
parallel and distributed computing europar 
 klagenfurt austria august - springer verlag 
lncs - 
 brown p j bovey j d chen x context-aware 
applications from the laboratory to the marketplace 
ieee personal communications - 
 chen h kotz d a survey of context-aware mobile 
computing research technical report tr - 
computer science department dartmouth college 
hanover new hampshire november 
 dey a providing architectural support for building 
context-aware applications ph d thesis department of 
computer science georgia institute of technology 
atlanta november 
 svetlana domnitcheva location modeling state of the art 
and challenges in proceedings of the workshop on 
location modeling for ubiquitous computing atlanta 
georgia united states september - 
 ferscha a workspace awareness in mobile virtual teams 
in proceedings of the ieee th 
international workshop on 
enabling technologies infrastructure for collaborative 
enterprises wetice gaithersburg maryland march 
 - ieee computer society press - 
 ferscha a coordination in pervasive computing 
environments in proceedings of the twelfth international 
ieee workshop on enabling technologies infrastructure 
for collaborative enterprises wetice- june - 
 ieee computer society press - 
 leonhard u supporting location awareness in open 
distributed systems ph d thesis department of 
computing imperial college london may 
 ryan n pascoe j morse d enhanced reality 
fieldwork the context-aware archaeological assistant 
gaffney v van leusen m exxon s eds computer 
applications in archaeology 
 schilit b n theimer m disseminating active map 
information to mobile hosts ieee network 
 - 
 schilit b n a system architecture for context-aware 
mobile computing ph d thesis columbia university 
department of computer science may 
 wang b bodily j gupta s k s supporting persistent 
social groups in ubiquitous computing environments 
using context-aware ephemeral group service in 
proceedings of the second ieee international conference 
on pervasive computing and communications 
 percom march - ieee computer society 
press - 
 pascoe j the stick-e note architecture extending the 
interface beyond the user proceedings of the nd 
international conference of intelligent user interfaces 
 iui orlando usa - 
 dey a abowd g cybreminder a context-aware system 
for supporting re-minders proceedings of the nd 
international symposium on handheld and ubiquitous 
computing huc bristol uk - 
 
