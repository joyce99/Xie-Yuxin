an evaluation of availability latency in carrier-based 
vehicular ad-hoc networks 
shahram 
ghandeharizadeh 
dept of computer science 
univ of southern california 
los angeles ca usa 
shahram usc edu 
shyam kapadia 
dept of computer science 
univ of southern california 
los angeles ca usa 
kapadia usc edu 
bhaskar krishnamachari 
dept of computer science 
dept of electrical engineering 
univ of southern california 
los angeles ca usa 
bkrishna usc edu 
abstract 
on-demand delivery of audio and video clips in peer-to-peer 
vehicular ad-hoc networks is an emerging area of research our target 
environment uses data carriers termed zebroids where a mobile 
device carries a data item on behalf of a server to a client thereby 
minimizing its availability latency in this study we quantify the 
variation in availability latency with zebroids as a function of a rich 
set of parameters such as car density storage per device repository 
size and replacement policies employed by zebroids using 
analysis and extensive simulations we gain novel insights into the 
design of carrier-based systems significant improvements in latency 
can be obtained with zebroids at the cost of a minimal overhead 
these improvements occur even in scenarios with lower accuracy 
in the predictions of the car routes two particularly surprising 
findings are a naive random replacement policy employed by 
the zebroids shows competitive performance and latency 
improvements obtained with a simplified instantiation of zebroids are 
found to be robust to changes in the popularity distribution of the 
data items 
categories and subject descriptors c distributed systems 
client server 
general terms algorithms performance design 
experimentation 
 introduction 
technological advances in areas of storage and wireless 
communications have now made it feasible to envision on-demand delivery 
of data items for e g video and audio clips in vehicular 
peer-topeer networks in prior work ghandeharizadeh et al 
introduce the concept of vehicles equipped with a 
car-to-car-peer-topeer device termed automata for in-vehicle entertainment the 
notable features of an automata include a mass storage device 
offering hundreds of gigabytes gb of storage a fast processor and 
several types of networking cards even with today s gb disk 
drives a repository of diverse entertainment content may exceed 
the storage capacity of a single automata such repositories 
constitute the focus of this study to exchange data we assume each 
automata is configured with two types of networking cards a 
low-bandwidth networking card with a long radio-range in the 
order of miles that enables an automata device to communicate with 
a nearby cellular or wimax station a high-bandwidth 
networking card with a limited radio-range in the order of hundreds of feet 
the high bandwidth connection supports data rates in the 
order of tens to hundreds of megabits per second and represents the 
ad-hoc peer to peer network between the vehicles this is 
labelled as the data plane and is employed to exchange data items 
between devices the low-bandwidth connection serves as the 
control plane enabling automata devices to exchange meta-data with 
one or more centralized servers this connection offers bandwidths 
in the order of tens to hundreds of kilobits per second the 
centralized servers termed dispatchers compute schedules of data 
delivery along the data plane using the provided meta-data these 
schedules are transmitted to the participating vehicles using the 
control plane the technical feasibility of such a two-tier 
architecture is presented in with preliminary results to demonstrate the 
bandwidth of the control plane is sufficient for exchange of control 
information needed for realizing such an application 
in a typical scenario an automata device presents a passenger 
with a list of data items 
 showing both the name of each data item 
and its availability latency the latter denoted as δ is defined as 
the earliest time at which the client encounters a copy of its 
requested data item a data item is available immediately when it 
resides in the local storage of the automata device serving the 
request due to storage constraints an automata may not store the 
entire repository in this case availability latency is the time from 
when the user issues a request until when the automata encounters 
another car containing the referenced data item the terms car and 
automata are used interchangeably in this study 
the availability latency for an item is a function of the current 
location of the client its destination and travel path the mobility 
model of the automata equipped vehicles the number of replicas 
constructed for the different data items and the placement of data 
item replicas across the vehicles a method to improve the 
availability latency is to employ data carriers which transport a replica 
of the requested data item from a server car containing it to a client 
that requested it these data carriers are termed  zebroids 
selection of zebroids is facilitated by the two-tiered architecture 
the control plane enables centralized information gathering at a 
dispatcher present at a base-station 
some examples of control 
in 
without loss of generality the term data item might be either 
traditional media such as text or continuous media such as an audio or 
video clip 
 
there may be dispatchers deployed at a subset of the base-stations 
for fault-tolerance and robustness dispatchers between 
basestations may communicate via the wired infrastructure 
 
formation are currently active requests travel path of the clients and 
their destinations and paths of the other cars for each client 
request the dispatcher may choose a set of z carriers that collaborate 
to transfer a data item from a server to a client z-relay zebroids 
here z is the number of zebroids such that ≤ z n where 
n is the total number of cars when z there are no carriers 
requiring a server to deliver the data item directly to the client 
otherwise the chosen relay team of z zebroids hand over the data item 
transitively to one another to arrive at the client thereby reducing 
availability latency see section for details to increase 
robustness the dispatcher may employ multiple relay teams of z-carriers 
for every request this may be useful in scenarios where the 
dispatcher has lower prediction accuracy in the information about the 
routes of the cars finally storage constraints may require a zebroid 
to evict existing data items from its local storage to accommodate 
the client requested item 
in this study we quantify the following main factors that affect 
availability latency in the presence of zebroids i data item 
repository size ii car density iii storage capacity per car iv client 
trip duration v replacement scheme employed by the zebroids 
and vi accuracy of the car route predictions for a significant 
subset of these factors we address some key questions pertaining to 
use of zebroids both via analysis and extensive simulations 
our main findings are as follows a naive random replacement 
policy employed by the zebroids shows competitive performance 
in terms of availability latency with such a policy substantial 
improvements in latency can be obtained with zebroids at a minimal 
replacement overhead in more practical scenarios where the 
dispatcher has inaccurate information about the car routes zebroids 
continue to provide latency improvements a surprising result is 
that changes in popularity of the data items do not impact the 
latency gains obtained with a simple instantiation of z-relay zebroids 
called one-instantaneous zebroids see section this study 
suggests a number of interesting directions to be pursued to gain 
better understanding of design of carrier-based systems that 
improve availability latency 
related work replication in mobile ad-hoc networks has been 
a widely studied topic however none of these 
studies employ zebroids as data carriers to reduce the latency of the 
client s requests several novel and important studies such as 
zebranet daknet data mules message ferries 
and seek and focus have analyzed factors impacting 
intermittently connected networks consisting of data carriers similar in 
spirit to zebroids factors considered by each study are dictated by 
their assumed environment and target application a novel 
characteristic of our study is the impact on availability latency for a 
given database repository of items a detailed description of 
related works can be obtained in 
the rest of this paper is organized as follows section 
provides an overview of the terminology along with the factors that 
impact availability latency in the presence of zebroids section 
describes how the zebroids may be employed section provides 
details of the analysis methodology employed to capture the 
performance with zebroids section describes the details of the 
simulation environment used for evaluation section enlists the key 
questions examined in this study and answers them via analysis 
and simulations finally section presents brief conclusions and 
future research directions 
 overview and terminology 
table summarizes the notation of the parameters used in the 
paper below we introduce some terminology used in the paper 
assume a network of n automata-equipped cars each with 
storage capacity of α bytes the total storage capacity of the 
system is st n ·α there are t data items in the database each with 
database parameters 
t number of data items 
si size of data item i 
fi frequency of access to data item i 
replication parameters 
ri normalized frequency of access to data item i 
ri number of replicas for data item i 
n characterizes a particular replication scheme 
δi average availability latency of data item i 
δagg aggregate availability latency δagg t 
j δj · fj 
automata system parameters 
g number of cells in the map d-torus 
n number of automata devices in the system 
α storage capacity per automata 
γ trip duration of the client automata 
st total storage capacity of the automata system st n · α 
table terms and their definitions 
size si the frequency of access to data item i is denoted as fi 
with t 
j fj let the trip duration of the client automata 
under consideration be γ 
we now define the normalized frequency of access to the data 
item i denoted by ri as 
ri 
 fi n 
t 
j fj n 
 ≤ n ≤ ∞ 
the exponent n characterizes a particular replication technique 
a square-root replication scheme is realized when n 
this serves as the base-line for comparison with the case when 
zebroids are deployed ri is normalized to a value between and 
 the number of replicas for data item i denoted as ri is ri 
min n max ri·n·α 
si 
 this captures the case when at least 
one copy of every data item must be present in the ad-hoc network 
at all times in cases where a data item may be lost from the ad-hoc 
network this equation becomes ri min n max ri·n·α 
si 
 
in this case a request for the lost data item may need to be satisfied 
by fetching the item from a remote server 
the availability latency for a data item i denoted as δi is defined 
as the earliest time at which a client automata will find the first 
replica of the item accessible to it if this condition is not satisfied 
then we set δi to γ this indicates that data item i was not available 
to the client during its journey note that since there is at least one 
replica in the system for every data item i by setting γ to a large 
value we ensure that the client s request for any data item i will be 
satisfied however in most practical circumstances γ may not be 
so large as to find every data item 
we are interested in the availability latency observed across all 
data items hence we augment the average availability latency 
for every data item i with its fi to obtain the following weighted 
availability latency δagg metric δagg t 
i δi · fi 
next we present our solution approach describing how zebroids 
are selected 
 solution approach 
 zebroids 
when a client references a data item missing from its local 
storage the dispatcher identifies all cars with a copy of the data item 
as servers next the dispatcher obtains the future routes of all cars 
for a finite time duration equivalent to the maximum time the client 
is willing to wait for its request to be serviced using this 
information the dispatcher schedules the quickest delivery path from any 
of the servers to the client using any other cars as intermediate 
carriers hence it determines the optimal set of forwarding decisions 
 
that will enable the data item to be delivered to the client in the 
minimum amount of time note that the latency along the quickest 
delivery path that employs a relay team of z zebroids is similar to 
that obtained with epidemic routing under the assumptions of 
infinite storage and no interference 
a simple instantiation of z-relay zebroids occurs when z 
and the client s request triggers a transfer of a copy of the requested 
data item from a server to a zebroid in its vicinity such a 
zebroid is termed one-instantaneous zebroid in some cases the 
dispatcher might have inaccurate information about the routes of 
the cars hence a zebroid scheduled on the basis of this inaccurate 
information may not rendezvous with its target client to minimize 
the likelihood of such scenarios the dispatcher may schedule 
multiple zebroids this may incur additional overhead due to redundant 
resource utilization to obtain the same latency improvements 
the time required to transfer a data item from a server to a 
zebroid depends on its size and the available link bandwidth with 
small data items it is reasonable to assume that this transfer time is 
small especially in the presence of the high bandwidth data plane 
large data items may be divided into smaller chunks enabling the 
dispatcher to schedule one or more zebroids to deliver each chunk 
to a client in a timely manner this remains a future research 
direction 
initially number of replicas for each data item replicas might be 
computed using equation this scheme computes the number 
of data item replicas as a function of their popularity it is static 
because number of replicas in the system do not change and no 
replacements are performed hence this is referred to as the 
 nozebroids environment we quantify the performance of the various 
replacement policies with reference to this base-line that does not 
employ zebroids 
one may assume a cold start phase where initially only one or 
few copies of every data item exist in the system many storage 
slots of the cars may be unoccupied when the cars encounter one 
another they construct new replicas of some selected data items to 
occupy the empty slots the selection procedure may be to choose 
the data items uniformly at random new replicas are created as 
long as a car has a certain threshold of its storage unoccupied 
eventually majority of the storage capacity of a car will be 
exhausted 
 carrier-based replacement policies 
the replacement policies considered in this paper are reactive 
since a replacement occurs only in response to a request issued for a 
certain data item when the local storage of a zebroid is completely 
occupied it needs to replace one of its existing items to carry the 
client requested data item for this purpose the zebroid must 
select an appropriate candidate for eviction this decision process 
is analogous to that encountered in operating system paging where 
the goal is to maximize the cache hit ratio to prevent disk access 
delay the carrier-based replacement policies employed in our 
study are least recently used lru least frequently used 
 lfu and random where a eviction candidate is chosen 
uniformly at random we have considered local and global variants 
of the lru lfu policies which determine whether local or global 
knowledge of contents of the cars known at the dispatcher is used 
for the eviction decision at a zebroid see for more details 
the replacement policies incur the following overheads first 
the complexity associated with the implementation of a policy 
second the bandwidth used to transfer a copy of a data item from a 
server to the zebroid third the average number of replacements 
incurred by the zebroids note that in the no-zebroids case neither 
overhead is incurred 
the metrics considered in this study are aggregate availability 
latency δagg percentage improvement in δagg with zebroids as 
compared to the no-zebroids case and average number of replacements 
incurred per client request which is an indicator of the overhead 
incurred by zebroids 
note that the dispatchers with the help of the control plane may 
ensure that no data item is lost from the system in other words 
at least one replica of every data item is maintained in the ad-hoc 
network at all times in such cases even though a car may meet a 
requesting client earlier than other servers if its local storage 
contains data items with only a single copy in the system then such a 
car is not chosen as a zebroid 
 analysis methodology 
here we present the analytical evaluation methodology and some 
approximations as closed-form equations that capture the 
improvements in availability latency that can be obtained with both 
oneinstantaneous and z-relay zebroids first we present some 
preliminaries of our analysis methodology 
 let n be the number of cars in the network performing a d 
random walk on a 
√ 
g× 
√ 
g torus an additional car serves 
as a client yielding a total of n cars such a mobility 
model has been used widely in the literature chiefly 
because it is amenable to analysis and provides a baseline 
against which performance of other mobility models can be 
compared moreover this class of markovian mobility 
models has been used to model the movements of vehicles 
 
 we assume that all cars start from the stationary distribution 
and perform independent random walks although for sparse 
density scenarios the independence assumption does hold it 
is no longer valid when n approaches g 
 let the size of data item repository of interest be t also 
data item i has ri replicas this implies ri cars identified as 
servers have a copy of this data item when the client requests 
item i 
all analysis results presented in this section are obtained 
assuming that the client is willing to wait as long as it takes for its request 
to be satisfied unbounded trip duration γ ∞ with the random 
walk mobility model on a d-torus there is a guarantee that as 
long as there is at least one replica of the requested data item in the 
network the client will eventually encounter this replica 
extensions to the analysis that also consider finite trip durations can 
be obtained in 
consider a scenario where no zebroids are employed in this 
case the expected availability latency for the data item is the 
expected meeting time of the random walk undertaken by the client 
with any of the random walks performed by the servers aldous et 
al show that the the meeting time of two random walks in such 
a setting can be modelled as an exponential distribution with the 
mean c c · g · log g where the constant c for g ≥ 
the meeting time or equivalently the availability latency δi for 
the client requesting data item i is the time till it encounters any of 
these ri replicas for the first time this is also an exponential 
distribution with the following expected value note that this formulation 
is valid only for sparse cases when g ri δi cglogg 
ri 
the aggregate availability latency without employing zebroids is 
then this expression averaged over all data items weighted by their 
frequency of access 
δagg no − zeb 
t 
i 
fi · c · g · log g 
ri 
 
t 
i 
fi · c 
ri 
 
 
 one-instantaneous zebroids 
recall that with one-instantaneous zebroids for a given request 
a new replica is created on a car in the vicinity of the server 
provided this car meets the client earlier than any of the ri servers 
moreover this replica is spawned at the time step when the client 
issues the request let nc 
i be the expected total number of nodes 
that are in the same cell as any of the ri servers then we have 
nc 
i n − ri · − − 
 
g 
 ri 
 
in the analytical model we assume that nc 
i new replicas are 
created so that the total number of replicas is increased to ri nc 
i 
the availability latency is reduced since the client is more likely to 
meet a replica earlier the aggregated expected availability latency 
in the case of one-instantaneous zebroids is then given by 
δagg zeb 
t 
i 
fi · c · g · log g 
ri nc 
i 
 
t 
i 
fi · c 
ri nc 
i 
 
note that in obtaining this expression for ease of analysis we 
have assumed that the new replicas start from random locations 
in the torus not necessarily from the same cell as the original ri 
servers it thus treats all the nc 
i carriers independently just like 
the ri original servers as we shall show below by comparison 
with simulations this approximation provides an upper-bound on 
the improvements that can be obtained because it results in a lower 
expected latency at the client 
it should be noted that the procedure listed above will yield a 
similar latency to that employed by a dispatcher employing 
oneinstantaneous zebroids see section since the dispatcher is 
aware of all future car movements it would only transfer the 
requested data item on a single zebroid if it determines that the 
zebroid will meet the client earlier than any other server this selected 
zebroid is included in the nc 
i new replicas 
 z-relay zebroids 
to calculate the expected availability latency with z-relay 
zebroids we use a coloring problem analog similar to an approach 
used by spyropoulos et al details of the procedure to obtain 
a closed-form expression are given in the aggregate 
availability latency δagg with z-relay zebroids is given by 
δagg zeb 
t 
i 
 fi · 
c 
n 
· 
 
n − ri 
· 
 n · log 
n 
ri 
− log n − ri 
 simulation methodology 
the simulation environment considered in this study comprises 
of vehicles such as cars that carry a fraction of the data item 
repository a prediction accuracy parameter inherently provides a certain 
probabilistic guarantee on the confidence of the car route 
predictions known at the dispatcher a value of implies that the 
exact routes of all cars are known at all times a value for this 
parameter indicates that the routes predicted for the cars will match 
the actual ones with probability note that this probability is 
spread across the car routes for the entire trip duration we now 
provide the preliminaries of the simulation study and then describe 
the parameter settings used in our experiments 
 similar to the analysis methodology the map used is a d 
torus a markov mobility model representing a unbiased d 
random walk on the surface of the torus describes the 
movement of the cars across this torus 
 each grid cell is a unique state of this markov chain in each 
time slot every car makes a transition from a cell to any of 
its neighboring cells the transition is a function of the 
current location of the car and a probability transition matrix 
q qij where qij is the probability of transition from state 
i to state j only automata equipped cars within the same 
cell may communicate with each other 
 the parameters γ δ have been discretized and expressed in 
terms of the number of time slots 
 an automata device does not maintain more than one replica 
of a data item this is because additional replicas occupy 
storage without providing benefits 
 either one-instantaneous or z-relay zebroids may be employed 
per client request for latency improvement 
 unless otherwise mentioned the prediction accuracy 
parameter is assumed to be this is because this study 
aims to quantify the effect of a large number of parameters 
individually on availability latency 
here we set the size of every data item si to be α represents 
the number of storage slots per automata each storage slot stores 
one data item γ represents the duration of the client s journey in 
terms of the number of time slots hence the possible values of 
availability latency are between and γ δ is defined as the number 
of time slots after which a client automata device will encounter a 
replica of the data item for the first time if a replica for the data 
item requested was encountered by the client in the first cell then 
we set δ if δ γ then we set δ γ indicating that no copy 
of the requested data item was encountered by the client during its 
entire journey in all our simulations for illustration we consider a 
 × d-torus with γ set to our experiments indicate that the 
trends in the results scale to maps of larger size 
we simulated a skewed distribution of access to the t data items 
that obeys zipf s law with a mean of this distribution is 
shown to correspond to sale of movie theater tickets in the united 
states we employ a replication scheme that allocates replicas 
for a data item as a function of the square-root of the frequency of 
access of that item the square-root replication scheme is shown 
to have competitive latency performance over a large parameter 
space the data item replicas are distributed uniformly across 
the automata devices this serves as the base-line no-zebroids 
case the square-root scheme also provides the initial replica 
distribution when zebroids are employed note that the replacements 
performed by the zebroids will cause changes to the data item replica 
distribution requests generated as per the zipf distribution are 
issued one at a time the client car that issues the request is chosen 
in a round-robin manner after a maximum period of γ the latency 
encountered by this request is recorded 
in all the simulation results each point is an average of 
requests moreover the confidence intervals determined for 
the results are quite tight for the metrics of latency and 
replacement overhead hence we only present them for the metric that 
captures the percentage improvement in latency with respect to the 
no-zebroids case 
 results 
in this section we describe our evaluation results where the 
following key questions are addressed with a wide choice of 
replacement schemes available for a zebroid what is their effect on 
availability latency a more central question is do zebroids provide 
 
 
 
 
 
 
 
number of cars 
aggregate availability latency δ 
agg 
 
lru global 
lfu global 
lru local 
lfu local 
random 
figure figure shows the availability latency when 
employing one-instantaneous zebroids as a function of n α values 
when the total storage in the system is kept fixed st 
significant improvements in availability latency what is the 
associated overhead incurred in employing these zebroids what 
happens to these improvements in scenarios where a dispatcher may 
have imperfect information about the car routes what inherent 
trade-offs exist between car density and storage per car with 
regards to their combined as well as individual effect on availability 
latency in the presence of zebroids we present both simple 
analysis and detailed simulations to provide answers to these questions 
as well as gain insights into design of carrier-based systems 
 how does a replacement scheme employed 
by a zebroid impact availability latency 
for illustration we present  scale-up experiments where 
oneinstantaneous zebroids are employed see figure by scale-up 
we mean that α and n are changed proportionally to keep the total 
system storage st constant here t and st we 
choose the following values of n α 
 the figure indicates that a random replacement scheme 
shows competitive performance this is because of several reasons 
recall that the initial replica distribution is set as per the 
squareroot replication scheme the random replacement scheme does not 
alter this distribution since it makes replacements blind to the 
popularity of a data item however the replacements cause dynamic 
data re-organization so as to better serve the currently active 
request moreover the mobility pattern of the cars is random hence 
the locations from which the requests are issued by clients are also 
random and not known a priori at the dispatcher these findings 
are significant because a random replacement policy can be 
implemented in a simple decentralized manner 
the lru-global and lfu-global schemes provide a latency 
performance that is worse than random this is because these 
policies rapidly develop a preference for the more popular data items 
thereby creating a larger number of replicas for them during 
eviction the more popular data items are almost never selected as a 
replacement candidate consequently there are fewer replicas for 
the less popular items hence the initial distribution of the data 
item replicas changes from square-root to that resembling linear 
replication the higher number of replicas for the popular data 
items provide marginal additional benefits while the lower number 
of replicas for the other data items hurts the latency performance of 
these global policies the lfu-local and lru-local schemes have 
similar performance to random since they do not have enough history 
of local data item requests we speculate that the performance of 
these local policies will approach that of their global variants for a 
large enough history of data item requests on account of the 
competitive performance shown by a random policy for the remainder 
of the paper we present the performance of zebroids that employ a 
random replacement policy 
 do zebroids provide significant 
improvements in availability latency 
we find that in many scenarios employing zebroids provides 
substantial improvements in availability latency 
 analysis 
we first consider the case of one-instantaneous zebroids 
figure a shows the variation in δagg as a function of n for t 
and α with a × torus using equation both the x and y 
axes are drawn to a log-scale figure b show the improvement 
in δagg obtained with one-instantaneous zebroids in this case only 
the x-axis is drawn to a log-scale for illustration we assume that 
the t data items are requested uniformly 
initially when the network is sparse the analytical approximation 
for improvements in latency with zebroids obtained from 
equations and closely matches the simulation results however as 
n increases the sparseness assumption for which the analysis is 
valid namely n g is no longer true hence the two curves 
rapidly diverge the point at which the two curves move away from 
each other corresponds to a value of δagg ≤ moreover as 
mentioned earlier the analysis provides an upper bound on the latency 
improvements as it treats the newly created replicas given by nc 
i 
independently however these nc 
i replicas start from the same cell 
as one of the server replicas ri finally the analysis captures a 
oneshot scenario where given an initial data item replica distribution 
the availability latency is computed the new replicas created do 
not affect future requests from the client 
on account of space limitations here we summarize the 
observations in the case when z-relay zebroids are employed the 
interested reader can obtain further details in similar observations 
like the one-instantaneous zebroid case apply since the simulation 
and analysis curves again start diverging when the analysis 
assumptions are no longer valid however the key observation here is that 
the latency improvement with z-relay zebroids is significantly 
better than the one-instantaneous zebroids case especially for lower 
storage scenarios this is because in sparse scenarios the 
transitive hand-offs between the zebroids creates higher number of 
replicas for the requested data item yielding lower availability latency 
moreover it is also seen that the simulation validation curve for the 
improvements in δagg with z-relay zebroids approaches that of the 
one-instantaneous zebroid case for higher storage higher n 
values this is because one-instantaneous zebroids are a special case 
of z-relay zebroids 
 simulation 
we conduct simulations to examine the entire storage spectrum 
obtained by changing car density n or storage per car α to also 
capture scenarios where the sparseness assumptions for which the 
analysis is valid do not hold we separate the effect of n and α 
by capturing the variation of n while keeping α constant case 
 and vice-versa case both with z-relay and one-instantaneous 
zebroids here we set the repository size as t figure 
captures case mentioned above similar trends are observed with 
case a complete description of those results are available in 
with figure b keeping α constant initially increasing car 
density has higher latency benefits because increasing n introduces 
more zebroids in the system as n is further increased ω reduces 
because the total storage in the system goes up consequently the 
number of replicas per data item goes up thereby increasing the 
 
number of servers hence the replacement policy cannot find a 
zebroid as often to transport the requested data item to the client 
earlier than any of the servers on the other hand the increased 
number of servers benefits the no-zebroids case in bringing δagg 
down the net effect results in reduction in ω for larger values of 
n 
 
 
 
 
 
 
 
− 
 
 
 
 
 
 
number of cars 
no−zebroidsanal 
no−zebroids 
sim 
one−instantaneous 
anal 
one−instantaneoussim 
aggregate availability latency δagg 
 
 a δagg 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
number of cars 
 improvement in δagg 
wrt no−zebroids ω 
analytical upper−bound 
simulation 
 b ω 
figure figure shows the latency performance with 
oneinstantaneous zebroids via simulations along with the 
analytical approximation for a × torus with t 
the trends mentioned above are similar to that obtained from the 
analysis however somewhat counter-intuitively with relatively 
higher system storage z-relay zebroids provide slightly lower 
improvements in latency as compared to one-instantaneous zebroids 
we speculate that this is due to the different data item replica 
distributions enforced by them note that replacements performed by 
the zebroids cause fluctuations in these replica distributions which 
may effect future client requests we are currently exploring 
suitable choices of parameters that can capture these changing replica 
distributions 
 what is the overhead incurred with 
improvements in latency with zebroids 
we find that the improvements in latency with zebroids are 
obtained at a minimal replacement overhead per client request 
 analysis 
with one-instantaneous zebroids for each client request a 
maximum of one zebroid is employed for latency improvement hence 
the replacement overhead per client request can amount to a 
maximum of one recall that to calculate the latency with one-instantaneous 
 
 
 
 
 
 
 
 
number of cars 
aggregate availability latency δagg 
 
no−zebroids 
one−instantaneous 
z−relays 
 a 
 
 
 
 
 
 
 
 
number of cars 
 improvement in δagg 
wrt no−zebroids ω 
one−instantaneous 
z−relays 
 b 
figure figure depicts the latency performance with both 
one-instantaneous and z-relay zebroids as a function of the car 
density when α and t 
zebroids nc 
i new replicas are created in the same cell as the servers 
now a replacement is only incurred if one of these nc 
i newly 
created replicas meets the client earlier than any of the ri servers 
let xri and xnc 
i 
respectively be random variables that capture 
the minimum time till any of the ri and nc 
i replicas meet the client 
since xri and xnc 
i 
are assumed to be independent by the property 
of exponentially distributed random variables we have 
overhead request · p xnc 
i 
 xri · p xri ≤ xnc 
i 
 
 
overhead request 
ri 
c 
ri 
c 
 
nc 
i 
c 
 
ri 
ri nc 
i 
 
recall that the number of replicas for data item i ri is a function 
of the total storage in the system i e ri k·n ·α where k satisfies 
the constraint ≤ ri ≤ n using this along with equation we 
get 
overhead request − 
g 
g n · − k · α 
 
now if we keep the total system storage n · α constant since 
g and t are also constant increasing n increases the replacement 
overhead however if n ·α is constant then increasing n causes α 
 
 
 
 
 
 
 
 
 
 
 
 
 
number of cars 
one−instantaneous 
zebroids 
average number of replacements per request 
 n α 
 n α 
 n α 
 n α 
figure figure captures replacement overhead when 
employing one-instantaneous zebroids as a function of n α 
values when the total storage in the system is kept fixed st 
 
to go down this implies that a higher replacement overhead is 
incurred for higher n and lower α values moreover when ri n 
this means that every car has a replica of data item i hence no 
zebroids are employed when this item is requested yielding an 
overhead request for this item as zero next we present 
simulation results that validate our analysis hypothesis for the overhead 
associated with deployment of one-instantaneous zebroids 
 simulation 
figure shows the replacement overhead with one-instantaneous 
zebroids when n α are varied while keeping the total system 
storage constant the trends shown by the simulation are in agreement 
with those predicted by the analysis above however the total 
system storage can be changed either by varying car density n or 
storage per car α on account of similar trends here we present 
the case when α is kept constant and n is varied figure we 
refer the reader to for the case when α is varied and n is held 
constant 
we present an intuitive argument for the behavior of the 
perrequest replacement overhead curves when the storage is extremely 
scarce so that only one replica per data item exists in the automata 
network the number of replacements performed by the zebroids is 
zero since any replacement will cause a data item to be lost from 
the system the dispatcher ensures that no data item is lost from 
the system at the other end of the spectrum if storage becomes 
so abundant that α t then the entire data item repository can 
be replicated on every car the number of replacements is again 
zero since each request can be satisfied locally a similar scenario 
occurs if n is increased to such a large value that another car with 
the requested data item is always available in the vicinity of the 
client however there is a storage spectrum in the middle where 
replacements by the scheduled zebroids result in improvements in 
δagg see figure 
moreover we observe that for sparse storage scenarios the higher 
improvements with z-relay zebroids are obtained at the cost of a 
higher replacement overhead when compared to the one-instantaneous 
zebroids case this is because in the former case each of these z 
zebroids selected along the lowest latency path to the client needs 
to perform a replacement however the replacement overhead is 
still less than indicating that on an average less than one 
replacement per client request is needed even when z-relay zebroids are 
employed 
 
 
 
 
 
 
 
 
 
 
 
 
number of cars 
z−relays 
one−instantaneous 
average number of replacements per request 
figure figure shows the replacement overhead with 
zebroids for the cases when n is varied keeping α 
 
 
 
 
 
 
 
 
 
 
prediction percentage 
no−zebroids n 
one−instantaneous n 
z−relays n 
no−zebroids n 
one−instantaneous n z−relays n 
aggregate availability latency δagg 
 
figure figure shows δagg for different car densities as a 
function of the prediction accuracy metric with α and t 
 
 what happens to the availability latency 
with zebroids in scenarios with 
inaccuracies in the car route predictions 
we find that zebroids continue to provide improvements in 
availability latency even with lower accuracy in the car route 
predictions we use a single parameter p to quantify the accuracy of the 
car route predictions 
 analysis 
since p represents the probability that a car route predicted by the 
dispatcher matches the actual one hence the latency with zebroids 
can be approximated by 
δerr 
agg p · δagg zeb − p · δagg no − zeb 
δerr 
agg p · δagg zeb − p · 
c 
ri 
 
expressions for δagg zeb can be obtained from equations 
 one-instantaneous or z-relay zebroids 
 simulation 
figure shows the variation in δagg as a function of this route 
prediction accuracy metric we observe a smooth reduction in the 
 
improvement in δagg as the prediction accuracy metric reduces for 
zebroids that are scheduled but fail to rendezvous with the client 
due to the prediction error we tag any such replacements made by 
the zebroids as failed it is seen that failed replacements gradually 
increase as the prediction accuracy reduces 
 under what conditions are the 
improvements in availability latency with zebroids 
maximized 
surprisingly we find that the improvements in latency obtained 
with one-instantaneous zebroids are independent of the input 
distribution of the popularity of the data items 
 analysis 
the fractional difference labelled ω in the latency between the 
no-zebroids and one-instantaneous zebroids is obtained from 
equations and as 
ω 
t 
i 
fi·c 
ri 
− t 
i 
fi·c 
ri n−ri · − − 
g ri 
 
t 
i 
fi·c 
ri 
 
here c c·g·log g this captures the fractional improvement 
in the availability latency obtained by employing one-instantaneous 
zebroids let α making the total storage in the system st 
n assuming the initial replica distribution is as per the 
squareroot replication scheme we have ri 
√ 
fi·n 
t 
j 
√ 
fj 
 hence we get 
fi 
k 
·r 
i 
n where k t 
j fj using this along with the 
approximation − x n 
 − n · x for small x we simplify the 
above equation to get ω − 
t 
i 
ri 
 
n−ri 
g 
t 
i ri 
in order to determine when the gains with one-instantaneous 
zebroids are maximized we can frame an optimization problem as 
follows maximize ω subject to t 
i ri st 
theorem with a square-root replication scheme 
improvements obtained with one-instantaneous zebroids are independent 
of the input popularity distribution of the data items see for 
proof 
 simulation 
we perform simulations with two different frequency 
distribution of data items uniform and zipfian with mean 
similar latency improvements with one-instantaneous zebroids are 
obtained in both cases this result has important implications in 
cases with biased popularity toward certain data items the 
aggregate improvements in latency across all data item requests still 
remain the same even in scenarios where the frequency of access 
to the data items changes dynamically zebroids will continue to 
provide similar latency improvements 
 conclusions and 
future research directions 
in this study we examined the improvements in latency that can 
be obtained in the presence of carriers that deliver a data item from 
a server to a client we quantified the variation in availability 
latency as a function of a rich set of parameters such as car density 
storage per car title database size and replacement policies 
employed by zebroids 
below we summarize some key future research directions we 
intend to pursue to better reflect reality we would like to validate the 
observations obtained from this study with some real world 
simulation traces of vehicular movements for example using 
corsim this will also serve as a validation for the utility of the 
markov mobility model used in this study we are currently 
analyzing the performance of zebroids on a real world data set 
comprising of an ad-hoc network of buses moving around a small 
neighborhood in amherst zebroids may also be used for delivery 
of data items that carry delay sensitive information with a certain 
expiry extensions to zebroids that satisfy such application 
requirements presents an interesting future research direction 
 acknowledgments 
this research was supported in part by an annenberg fellowship and nsf 
grants numbered cns- nets noss cns- career 
and iis- 
 references 
 federal highway administration corridor simulation version 
http www ops fhwa dot gov trafficanalysistools cors im htm 
 d aldous and j fill reversible markov chains and random walks 
on graphs under preparation 
 a bar-noy i kessler and m sidi mobile users to update or not 
to update in ieee infocom 
 j burgess b gallagher d jensen and b levine maxprop 
routing for vehicle-based disruption-tolerant networking in ieee 
infocom april 
 e cohen and s shenker replication strategies in unstructured 
peer-to-peer networks in sigcomm 
 a dan d dias r mukherjee d sitaram and r tewari buffering 
and caching in large-scale video servers in compcon 
 s ghandeharizadeh s kapadia and b krishnamachari pavan a 
policy framework for content availabilty in vehicular ad-hoc 
networks in vanet new york ny usa acm press 
 s ghandeharizadeh s kapadia and b krishnamachari 
comparison of replication strategies for content availability in 
c p networks in mdm may 
 s ghandeharizadeh s kapadia and b krishnamachari an 
evaluation of availability latency in carrier-based vehicular ad-hoc 
networks technical report department of computer science 
university of southern california ceng- - 
 s ghandeharizadeh and b krishnamachari c p a peer-to-peer 
network for on-demand automobile information services in globe 
ieee 
 t hara effective replica allocation in ad-hoc networks for 
improving data accessibility in ieee infocom 
 h hayashi t hara and s nishio a replica allocation method 
adapting to topology changes in ad-hoc networks in dexa 
 p juang h oki y wang m martonosi l peh and d rubenstein 
energy-efficient computing for wildlife tracking design tradeoffs 
and early experiences with zebranet sigarch comput archit 
news 
 a pentland r fletcher and a hasson daknet rethinking 
connectivity in developing nations computer - 
 f sailhan and v issarny cooperative caching in ad-hoc networks 
in mdm 
 r shah s roy s jain and w brunette data mules modeling and 
analysis of a three-tier architecture for sparse sensor networks 
elsevier ad-hoc networks journal september 
 t spyropoulos k psounis and c raghavendra single-copy 
routing in intermittently connected mobile networks in secon 
april 
 a tanenbaum modern operating systems nd edition chapter 
section prentice hall 
 a vahdat and d becker epidemic routing for partially-connected 
ad-hoc networks technical report department of computer science 
duke university 
 w zhao m ammar and e zegura a message ferrying approach 
for data delivery in sparse mobile ad-hoc networks in mobihoc 
pages - new york ny usa acm press 
 m zonoozi and p dassanayake user mobility modeling and 
characterization of mobility pattern ieee journal on selected 
areas in communications - september 
 
