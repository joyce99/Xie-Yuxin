a multi-agent system for building dynamic ontologies 
kévin ottens 
 
irit université paul sabatier 
 route de narbonne 
f- toulouse 
ottens irit fr 
marie-pierre gleizes 
irit université paul sabatier 
 route de narbonne 
f- toulouse 
gleizes irit fr 
pierre glize 
irit université paul sabatier 
 route de narbonne 
f- toulouse 
glize irit fr 
abstract 
ontologies building from text is still a time-consuming task which 
justifies the growth of ontology learning our system named 
dynamo is designed along this domain but following an original 
approach based on an adaptive multi-agent architecture in this paper 
we present a distributed hierarchical clustering algorithm core of 
our approach it is evaluated and compared to a more conventional 
centralized algorithm we also present how it has been improved 
using a multi-criteria approach with those results in mind we 
discuss the limits of our system and add as perspectives the 
modifications required to reach a complete ontology building solution 
categories and subject descriptors 
i artificial intelligence distributed artificial 
intelligencemultiagent systems 
general terms 
algorithms experimentation 
 introduction 
nowadays it is well established that ontologies are needed for 
semantic web knowledge management b b for knowledge 
management ontologies are used to annotate documents and to 
enhance the information retrieval but building an ontology manually 
is a slow tedious costly complex and time consuming process 
currently a real challenge lies in building them automatically or 
semi-automatically and keeping them up to date it would mean 
creating dynamic ontologies and it justifies the emergence of 
ontology learning techniques 
our research focuses on dynamo an acronym of dynamic 
ontologies a tool based on an adaptive multi-agent system to 
construct and maintain an ontology from a domain specific set of texts 
our aim is not to build an exhaustive general hierarchical ontology 
but a domain specific one we propose a semi-automated tool since 
an external resource is required the ontologist an ontologist is 
a kind of cognitive engineer or analyst who is using information 
from texts and expert interviews to design ontologies 
in the multi-agent field ontologies generally enable agents to 
understand each other they re sometimes used to ease the 
ontology building process in particular for collaborative contexts 
but they rarely represent the ontology itself most works 
interested in the construction of ontologies propose the refinement of 
ontologies this process consists in using an existing ontology and 
building a new one from it this approach is different from our 
approach because dynamo starts from scratch researchers working 
on the construction of ontologies from texts claim that the work to 
be automated requires external resources such as a dictionary 
or web access in our work we propose an interaction between 
the ontologist and the system our external resource lies both in the 
texts and the ontologist 
this paper first presents in section the big picture of the 
dynamo system in particular the motives that led to its creation and 
its general architecture then in section we discuss the 
distributed clustering algorithm used in dynamo and compare it to 
a more classic centralized approach section is dedicated to some 
enhancement of the agents behavior that got designed by taking 
into account criteria ignored by clustering and finally in section 
 we discuss the limitations of our approach and explain how it 
will be addressed in further work 
 dynamo overview 
 ontology as a multi-agent system 
dynamo aims at reducing the need for manual actions in 
processing the text analysis results and at suggesting a concept 
network kick-off in order to build ontologies more efficiently the 
chosen approach is completely original to our knowledge and uses 
an adaptive multi-agent system this choice comes from the 
qualities offered by multi-agent system they can ease the interactive 
design of a system in our case a conceptual network they 
allow its incremental building by progressively taking into account 
new data coming from text analysis and user interaction and last 
but not least they can be easily distributed across a computer 
network 
dynamo takes a syntactical and terminological analysis of texts 
as input it uses several criteria based on statistics computed from 
the linguistic contexts of terms to create and position the concepts 
as output dynamo provides to the analyst a hierarchical 
organization of concepts the multi-agent system itself that can be 
validated refined of modified until he she obtains a satisfying state of 
 
 - - - - rps c ifaamas 
the semantic network 
an ontology can be seen as a stable map constituted of 
conceptual entities represented here by agents linked by labelled 
relations thus our approach considers an ontology as a type of 
equilibrium between its concept-agents where their forces are 
defined by their potential relationships the ontology modification 
is a perturbation of the previous equilibrium by the appearance or 
disappearance of agents or relationships in this way a dynamic 
ontology is a self-organizing process occurring when new texts are 
included into the corpus or when the ontologist interacts with it 
to support the needed flexibility of such a system we use a 
selforganizing multi-agent system based on a cooperative approach 
we followed the adelfe method proposed to drive the design 
of this kind of multi-agent system it justifies how we designed 
some of the rules used by our agents in order to maximize the 
cooperation degree within dynamo s multi-agent system 
 proposed architecture 
in this section we present our system architecture it addresses 
the needs of knowledge engineering in the context of dynamic 
ontology management and maintenance when the ontology is linked 
to a document collection 
the dynamo system consists of three parts cf figure 
 a term network obtained thanks to a term extraction tool 
used to preprocess the textual corpus 
 a multi-agent system which uses the term network to make a 
hierarchical clustering in order to obtain a taxonomy of 
concepts 
 an interface allowing the ontologist to visualize and control 
the clustering process 
 
ontologist 
interface 
system 
concept agent term 
term network 
terms 
extraction 
tool 
figure system architecture 
the term extractor we use is syntex a software that has 
efficiently been used for ontology building tasks we mainly 
selected it because of its robustness and the great amount of 
information extracted in particular it creates a head-expansion network 
which has already proven to be interesting for a clustering system 
 in such a network each term is linked to its head term 
and 
 
i e the maximum sub-phrase located as head of the term 
its expansion term 
 and also to all the terms for which it is a head 
or an expansion term for example knowledge engineering from 
text has knowledge engineering as head term and text as 
expansion term moreover knowledge engineering is composed of 
 knowledge as head term and engineering as expansion term 
with dynamo the term network obtained as the output of the 
extractor is stored in a database for each term pair we assume that it 
is possible to compute a similarity value in order to make a 
clustering because of the nature of the data we are only focusing 
on similarity computation between objects described thanks to 
binary variables that means that each item is described by the 
presence or absence of a characteristic set in the case of terms 
we are generally dealing with their usage contexts with syntex 
those contexts are identified by terms and characterized by some 
syntactic relations 
the dynamo multi-agent system implements the distributed 
clustering algorithm described in detail in section and the rules 
described in section it is designed to be both the system 
producing the resulting structure and the structure itself it means that 
each agent represent a class in the taxonomy then the system 
output is the organization obtained from the interaction between 
agents while taking into account feedback coming from the 
ontologist when he she modifies the taxonomy given his needs or 
expertise 
 distributed clustering 
this section presents the distributed clustering algorithm used in 
dynamo for the sake of understanding and because of its 
evaluation in section we recall the basic centralized algorithm used 
for a hierarchical ascending clustering in a non metric space when 
a symmetrical similarity measure is available which is the 
case of the measures used in our system 
algorithm centralized hierarchical ascending clustering 
algorithm 
data list l of items to organize as a hierarchy 
result root r of the hierarchy 
while length l do 
max ← 
a ← nil 
b ← nil 
for i ← to length l do 
i ← l i 
for j ← i to length l do 
j ← l j 
sim ← similarity i j 
if sim max then 
max ← sim 
a ← i 
b ← j 
end 
end 
end 
remove a l 
remove b l 
append a b l 
end 
r ← l 
in algorithm for each clustering step the pair of the most 
similar elements is determined those two elements are grouped in a 
cluster and the resulting class is appended to the list of remaining 
elements this algorithm stops when the list has only one element 
left 
 
i e the maximum sub-phrase located as tail of the term 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
the hierarchy resulting from algorithm is always a binary tree 
because of the way grouping is done moreover grouping the most 
similar elements is equivalent to moving them away from the least 
similar ones our distributed algorithm is designed relying on those 
two facts it is executed concurrently in each of the agents of the 
system 
note that in the following of this paper we used for both 
algorithms an anderberg similarity with α and an average 
link clustering strategy those choices have an impact on the 
resulting tree but they impact neither the global execution of the 
algorithm nor its complexity 
we now present the distributed algorithm used in our system it 
is bootstrapped in the following way 
 a top agent having no parent is created it will be the root of 
the resulting taxonomy 
 an agent is created for each term to be positioned in the 
taxonomy they all have top as parent 
once this basic structure is set the algorithm runs until it reaches 
equilibrium and then provides the resulting taxonomy 
ak− ak ana a 
p 
 
a 
figure distributed classification step 
the process first step figure is triggered when an agent here 
ak has more than one brother since we want to obtain a binary 
tree then it sends a message to its parent p indicating its most 
dissimilar brother here a then p receives the same kind of 
message from each of its children in the following this kind of 
message will be called a vote 
ak− ak ana a 
p 
p 
 
p 
p 
figure distributed clustering step 
next when p has got messages from all its children it starts the 
second step figure thanks to the received messages indicating 
the preferences of its children p can determine three sub-groups 
among its children 
 the child which got the most votes by its brothers that is 
the child being the most dissimilar from the greatest number 
of its brothers in case of a draw one of the winners is chosen 
randomly here a 
 the children that allowed the election of the first group that 
is the agents which chose their brother of the first group as 
being the most dissimilar one here ak to an 
 the remaining children here a to ak− 
then p creates a new agent p having p as parent and asks 
agents from the second group here agents ak to an to make it 
their new parent 
ak− ak ana a 
p 
p 
 
figure distributed clustering step 
finally step figure is trivial the children rejected by p 
 here agent a to an take its message into account and choose p 
as their new parent the hierarchy just created a new intermediate 
level 
note that this algorithm generally converges since the number of 
brothers of an agent drops when an agent has only one remaining 
brother its activity stops although it keeps processing messages 
coming from its children however in a few cases we can reach 
a circular conflict in the voting procedure when for example a 
votes against b b against c and c against a with the current 
system no decision can be taken the current procedure should be 
improved to address this probably using a ranked voting method 
 quantitative evaluation 
now we evaluate the properties of our distributed algorithm it 
requires to begin with a quantitative evaluation based on its 
complexity while comparing it with the algorithm from the previous 
section 
its theoretical complexity is calculated for the worst case by 
considering the similarity computation operation as elementary for 
the distributed algorithm the worst case means that for each run 
only a two-item group can be created under those conditions for a 
given dataset of n items we can determine the amount of similarity 
computations 
for algorithm we note l length l then the most enclosed 
 for loop is run l − i times and its body has the only similarity 
computation so its cost is l−i the second for loop is ran l times 
for i ranging from to l then its cost is 
pl 
i l − i which can 
be simplified in l× l− 
 
 finally for each run of the while loop 
l is decreased from n to which gives us t n as the amount of 
similarity computations for algorithm 
t n 
nx 
l 
l × l − 
 
 
for the distributed algorithm at a given step each one of the l 
agents evaluates the similarity with its l − brothers so each steps 
has a l × l − cost then groups are created and another vote 
occurs with l decreased by one since we assume worst case only 
groups of size or l − are built since l is equal to n on first run 
we obtain tdist n as the amount of similarity computations for the 
distributed algorithm 
tdist n 
nx 
l 
l × l − 
both algorithms then have an o n 
 complexity but in the 
worst case the distributed algorithm does twice the number of 
el the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
ementary operations done by the centralized algorithm this gap 
comes from the local decision making in each agent because of 
this the similarity computations are done twice for each agent pair 
we could conceive that an agent sends its computation result to its 
peer but it would simply move the problem by generating more 
communication in the system 
 
 
 
 
 
 
 
 
 
 
 
amountofcomparisons 
amount of input terms 
 distributed algorithm on average with min and max 
 logarithmic polynomial 
 centralized algorithm 
figure experimental results 
in a second step the average complexity of the algorithm has 
been determined by experiments the multi-agent system has been 
executed with randomly generated input data sets ranging from ten 
to one hundred terms the given value is the average of 
comparisons made for one hundred of runs without any user interaction 
it results in the plots of figure the algorithm is then more 
efficient on average than the centralized algorithm and its average 
complexity is below the worst case it can be explained by the low 
probability that a data set forces the system to create only minimal 
groups two items or maximal n − elements for each step of 
reasoning curve number represents the logarithmic polynomial 
minimizing the error with curve number the highest degree term 
of this polynomial is in n 
log n then our distributed algorithm 
has a o n 
log n complexity on average finally let s note the 
reduced variation of the average performances with the maximum 
and the minimum in the worst case for terms the variation is 
of for an average of around which shows 
the good stability of the system 
 qualitative evaluation 
although the quantitative results are interesting the real 
advantage of this approach comes from more qualitative characteristics 
that we will present in this section all are advantages obtained 
thanks to the use of an adaptive multi-agent system 
the main advantage to the use of a multi-agent system for a 
clustering task is to introduce dynamic in such a system the ontologist 
can make modifications and the hierarchy adapts depending on the 
request it is particularly interesting in a knowledge engineering 
context indeed the hierarchy created by the system is meant to be 
modified by the ontologist since it is the result of a statistic 
computation during the necessary look at the texts to examine the 
usage contexts of terms the ontologist will be able to interpret 
the real content and to revise the system proposal it is extremely 
difficult to realize this with a centralized black-box approach in 
most cases one has to find which reasoning step generated the error 
and to manually modify the resulting class unfortunately in this 
case all the reasoning steps that occurred after the creation of the 
modified class are lost and must be recalculated by taking the 
modification into account that is why a system like asium tries to 
soften the problem with a system-user collaboration by showing to 
the ontologist the created classes after each step of reasoning but 
the ontologist can make a mistake and become aware of it too late 
figure concept agent tree after autonomous stabilization of 
the system 
in order to illustrate our claims we present an example thanks to 
a few screenshots from the working prototype tested on a medical 
related corpus by using test data and letting the system work by 
itself we obtain the hierarchy from figure after stabilization it is 
clear that the concept described by the term lésion lesion is 
misplaced it happens that the similarity computations place it closer to 
 femme woman and chirurgien surgeon than to infection 
 gastro-entérite gastro-enteritis and hépatite hepatitis this 
wrong position for lesion is explained by the fact that without 
ontologist input the reasoning is only done on statistics criteria 
figure concept agent tree after ontologist modification 
then the ontologist replaces the concept in the right branch by 
affecting conceptagent as its new parent the name 
 conceptagent x is automatically given to a concept agent that is not 
described by a term the system reacts by itself and refines the 
clustering hierarchy to obtain a binary tree by creating 
 conceptagent the new stable state if the one of figure 
this system-user coupling is necessary to build an ontology but 
no particular adjustment to the distributed algorithm principle is 
needed since each agent does an autonomous local processing and 
communicates with its neighborhood by messages 
moreover this algorithm can de facto be distributed on a 
computer network the communication between agents is then done by 
sending messages and each one keeps its decision autonomy then 
a system modification to make it run networked would not require 
to adjust the algorithm on the contrary it would only require to 
rework the communication layer and the agent creation process since 
in our current implementation those are not networked 
 multi-criteria hierarchy 
in the previous sections we assumed that similarity can be 
computed for any term pair but as soon as one uses real data this 
property is not verified anymore some terms do not have any 
similarity value with any extracted term moreover for leaf nodes it is 
sometimes interesting to use other means to position them in the 
hierarchy for this low level structuring ontologists generally base 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
their choices on simple heuristics using this observation we built 
a new set of rules which are not based on similarity to support low 
level structuring 
 adding head coverage rules 
in this case agents can act with a very local point of view simply 
by looking at the parent child relation each agent can try to 
determine if its parent is adequate it is possible to guess this because 
each concept agent is described by a set of terms and thanks to the 
 head-expansion term network 
in the following tx will be the set of terms describing concept 
agent x and head tx the set of all the terms that are head of at 
least one element of tx thanks to those two notations we can 
describe the parent adequacy function a p c between a parent p 
and a child c 
a p c 
 tp ∩ head tc 
 tp ∪ head tc 
 
then the best parent for c is the p agent that maximizes a p c 
an agent unsatisfied by its parent can then try to find a better one 
by evaluating adequacy with candidates we designed a 
complementary algorithm to drive this search 
when an agent c is unsatisfied by its parent p it evaluates 
a bi c with all its brothers noted bi the one maximizing a bi c 
is then chosen as the new parent 
figure concept agent tree after autonomous stabilization of 
the system without head coverage rule 
we now illustrate this rule behavior with an example figure 
shows the state of the system after stabilization on test data we 
can notice that hépatite viral viral hepatitis is still linked to the 
taxonomy root it is caused by the fact that there is no similarity 
value between the viral hepatitis term and any of the term of the 
other concept agents 
figure concept agent tree after activation of the head 
coverage rule 
after activating the head coverage rule and letting the system 
stabilize again we obtain figure we can see that viral hepatitis 
slipped through the branch leading to hepatitis and chose it as its 
new parent it is a sensible default choice since viral hepatitis is 
a more specific term than hepatitis 
this rule tends to push agents described by a set of term to 
become leafs of the concept tree it addresses our concern to improve 
the low level structuring of our taxonomy but obviously our agents 
lack a way to backtrack in case of modifications in the taxonomy 
which would make them be located in the wrong branch that is 
one of the point where our system still has to be improved by adding 
another set of rules 
 on using several criteria 
in the previous sections and examples we only used one 
algorithm at a time the distributed clustering algorithm tends to 
introduce new layers in the taxonomy while the head coverage 
algorithm tends to push some of the agents toward the leafs of the 
taxonomy it obviously raises the question on how to deal with 
multiple criteria in our taxonomy building and how agents 
determine their priorities at a given time 
the solution we chose came from the search for minimizing non 
cooperation within the system in accordance with the adelfe 
method each agent computes three non cooperation degrees and 
chooses its current priority depending on which degree is the 
highest for a given agent a having a parent p a set of brothers bi 
and which received a set of messages mk having the priority pk 
the three non cooperation degrees are 
 μh a − a p a is the head coverage non 
cooperation degree determined by the head coverage of the parent 
 μb a max − similarity a bi is the 
 brotherhood non cooperation degree determined by the worst brother 
of a regarding similarities 
 μm a max pk is the message non cooperation 
degree determined by the most urgent message received 
then the non cooperation degree μ a of agent a is 
μ a max μh a μb a μm a 
then we have three cases determining which kind of action a will 
choose 
 if μ a μh a then a will use the head coverage 
algorithm we detailed in the previous subsection 
 if μ a μb a then a will use the distributed clustering 
algorithm see section 
 if μ a μm a then a will process mk immediately in 
order to help its sender 
those three cases summarize the current activities of our agents 
they have to find the best parent for them μ a μh a 
improve the structuring through clustering μ a μb a and 
process other agent messages μ a μm a in order to help them 
fulfill their own goals 
 experimental complexity revisited 
we evaluated the experimental complexity of the whole 
multiagent system when all the rules are activated in this case the 
metric used is the number of messages exchanged in the system once 
again the system has been executed with input data sets ranging 
from ten to one hundred terms the given value is the average of 
message amount sent in the system as a whole for one hundred runs 
without user interaction it results in the plots of figure 
curve number represents the average of the value obtained 
curve number represents the average of the value obtained when 
only the distributed clustering algorithm is activated not the full 
rule set curve number represents the polynomial minimizing the 
error with curve number the highest degree term of this 
polynomial is in n 
 then our multi-agent system has a o n 
 complexity 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 
 
 
 
 
 
 
amountofmessages 
amount of input terms 
 dynamo all rules on average with min and max 
 distributed clustering only on average 
 cubic polynomial 
figure experimental results 
on average moreover let s note the very small variation of the 
average performances with the maximum and the minimum in the 
worst case for terms the variation is of for an average 
of around which proves the excellent stability of 
the system 
finally the extra head coverage rules are a real improvement on 
the distributed algorithm alone they introduce more constraints 
and stability point is reached with less interactions and decision 
making by the agents it means that less messages are exchanged 
in the system while obtaining a tree of higher quality for the 
ontologist 
 discussion perspectives 
 current limitation of our approach 
the most important limitation of our current algorithm is that 
the result depends on the order the data gets added when the 
system works by itself on a fixed data set given during initialization 
the final result is equivalent to what we could obtain with a 
centralized algorithm on the contrary adding a new item after a first 
stabilization has an impact on the final result 
figure concept agent tree after autonomous stabilization 
of the system 
to illustrate our claims we present another example of the 
working system by using test data and letting the system work by itself 
we obtain the hierarchy of figure after stabilization 
figure concept agent tree after taking in account 
 hepatitis 
then the ontologist interacts with the system and adds a new 
concept described by the term hepatitis and linked to the root 
the system reacts and stabilizes we then obtain figure as a 
result hepatitis is located in the right branch but we have not 
obtained the same organization as the figure of the previous 
example we need to improve our distributed algorithm to allow a 
concept to move along a branch we are currently working on the 
required rules but the comparison with centralized algorithm will 
become very difficult in particular since they will take into account 
criteria ignored by the centralized algorithm 
 pruning for ontologies building 
in section we presented the distributed clustering algorithm 
used in the dynamo system since this work was first based on this 
algorithm it introduced a clear bias toward binary trees as a result 
but we have to keep in mind that we are trying to obtain taxonomies 
which are more refined and concise although the head coverage 
rule is an improvement because it is based on how the ontologists 
generally work it only addresses low level structuring but not the 
intermediate levels of the tree 
by looking at figure it is clear that some pruning could be 
done in the taxonomy in particular since lésion moved 
 conceptagent could be removed it is not needed anymore 
moreover the branch starting with conceptagent clearly respects the 
constraint to make a binary tree but it would be more useful to the 
user in a more compact and meaningful form in this case 
 conceptagent and conceptagent could probably be merged 
currently our system has the necessary rules to create 
intermediate levels in the taxonomy or to have concepts shifting towards 
the leaf as we pointed it is not enough so new rules are needed to 
allow removing nodes from the tree or move them toward the root 
most of the work needed to develop those rules consists in finding 
the relevant statistic information that will support the ontologist 
 conclusion 
after being presented as a promising solution ensuring model 
quality and their terminological richness ontology building from 
textual corpus analysis is difficult and costly it requires analyst 
supervising and taking in account the ontology aim using 
natural languages processing tools ease the knowledge localization in 
texts through language uses that said those tools produce a huge 
amount of lexical or grammatical data which is not trivial to 
examine in order to define conceptual elements our contribution lies in 
this step of the modeling process from texts before any attempts to 
normalize or formalize the result 
we proposed an approach based on an adaptive multi-agent 
system to provide the ontologist with a first taxonomic structure of 
concepts our system makes use of a terminological network 
resulting from an analysis made by syntex the current state of our 
software allows to produce simple structures to propose them to 
the ontologist and to make them evolve depending on the 
modifications he made performances of the system are interesting and 
some aspects are even comparable to their centralized counterpart 
its strengths are mostly qualitative since it allows more subtle user 
interactions and a progressive adaptation to new linguistic based 
information 
from the point of view of ontology building this work is a first 
step showing the relevance of our approach it must continue both 
to ensure a better robustness during classification and to obtain 
richer structures semantic wise than simple trees from this 
improvements we are mostly focusing on the pruning to obtain better 
taxonomies we re currently working on the criterion to trigger 
the complementary actions of the structure changes applied by our 
clustering algorithm in other words this algorithm introduces 
inthe sixth intl joint conf on autonomous agents and multi-agent systems aamas 
termediate levels and we need to be able to remove them if 
necessary in order to reach a dynamic equilibrium 
also from the multi-agent engineering point of view their use 
in a dynamic ontology context has shown its relevance this 
dynamic ontologies can be seen as complex problem solving in such 
a case self-organization through cooperation has been an efficient 
solution and more generally it s likely to be interesting for other 
design related tasks even if we re focusing only on knowledge 
engineering in this paper of course our system still requires more 
evaluation and validation work to accurately determine the 
advantages and flaws of this approach we re planning to work on such 
benchmarking in the near future 
 references 
 h assadi construction of a regional ontology from text and 
its use within a documentary system proceedings of the 
international conference on formal ontology and 
information systems - fois pages - 
 n aussenac-gilles and d sörgel text analysis for ontology 
and terminology engineering journal of applied ontology 
 
 j bao and v honavar collaborative ontology building with 
wiki nt proceedings of the workshop on evaluation of 
ontology-based tools eon 
 c bernon v camps m -p gleizes and g picard 
agent-oriented methodologies chapter engineering 
self-adaptive multi-agent systems the adelfe 
methodology pages - idea group publishing 
 c brewster f ciravegna and y wilks background and 
foreground knowledge in dynamic ontology construction 
semantic web workshop sigir august 
 d faure and c nedellec a corpus-based conceptual 
clustering method for verb frames and ontology acquisition 
lrec workshop on adapting lexical and corpus resources to 
sublanguages and applications 
 f gandon ontology engineering a survey and a return on 
experience inria 
 j -p georgé g picard m -p gleizes and p glize living 
design for open computational systems th ieee 
international workshops on enabling technologies 
infrastructure for collaborative enterprises pages - 
june 
 m -p gleizes v camps and p glize a theory of emergent 
computation based on cooperative self-organization for 
adaptive artificial systems fourth european congress of 
systems science september 
 j heflin and j hendler dynamic ontologies on the web 
american association for artificial intelligence conference 
 
 s le moigno j charlet d bourigault and m -c jaulent 
terminology extraction from text to build an ontology in 
surgical intensive care proceedings of the amia 
annual symposium 
 k lister l sterling and k taveter reconciling 
ontological differences by assistant agents aamas 
may 
 a maedche ontology learning for the semantic web 
kluwer academic publisher 
 a maedche and s staab mining ontologies from text 
ekaw pages - 
 c d manning and h schütze foundations of statistical 
natural language processing the mit press cambridge 
massachusetts 
 h v d parunak r rohwer t c belding and 
s brueckner dynamic decentralized any-time hierarchical 
clustering th annual international acm sigir 
conference on research development on information 
retrieval august 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
