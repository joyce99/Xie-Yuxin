remote access to large spatial databases 
egemen tanin 
frantiˇsek brabec 
hanan samet 
computer science department 
center for automation research 
institute for advanced computer studies 
university of maryland college park md 
 egemen brabec hjs  umiacs umd edu 
www cs umd edu  egemen  brabec  hjs 
abstract 
enterprises in the public and private sectors have been 
making their large spatial data archives available over the 
internet however interactive work with such large volumes 
of online spatial data is a challenging task we propose 
two efficient approaches to remote access to large spatial 
data first we introduce a client-server architecture where 
the work is distributed between the server and the 
individual clients for spatial query evaluation data visualization 
and data management we enable the minimization of the 
requirements for system resources on the client side while 
maximizing system responsiveness as well as the number of 
connections one server can handle concurrently second for 
prolonged periods of access to large online data we 
introduce appoint an approach for peer-to-peer oﬄoading 
the internet this is a centralized peer-to-peer approach 
that helps internet users transfer large volumes of online 
data efficiently in appoint active clients of the 
clientserver architecture act on the server s behalf and 
communicate with each other to decrease network latency improve 
service bandwidth and resolve server congestions 
categories and subject descriptors 
c computer-communication networks 
distributed systems-client server distributed applications 
distributed databases h database management 
database applications-spatial databases and gis 
general terms 
performance management 
 introduction 
in recent years enterprises in the public and private 
sectors have provided access to large volumes of spatial data 
over the internet interactive work with such large volumes 
of online spatial data is a challenging task we have been 
developing an interactive browser for accessing spatial online 
databases the sand spatial and non-spatial data 
internet browser users of this browser can interactively and 
visually manipulate spatial data remotely unfortunately 
interactive remote access to spatial data slows to a crawl 
without proper data access mechanisms we developed two 
separate methods for improving the system performance 
together form a dynamic network infrastructure that is highly 
scalable and provides a satisfactory user experience for 
interactions with large volumes of online spatial data 
the core functionality responsible for the actual database 
operations is performed by the server-based sand system 
sand is a spatial database system developed at the 
university of maryland the client-side sand internet 
browser provides a graphical user interface to the facilities 
of sand over the internet users specify queries by 
choosing the desired selection conditions from a variety of menus 
and dialog boxes 
sand internet browser is java-based which makes it 
deployable across many platforms in addition since java has 
often been installed on target computers beforehand our 
clients can be deployed on these systems with little or no 
need for any additional software installation or 
customization the system can start being utilized immediately 
without any prior setup which can be extremely beneficial in 
time-sensitive usage scenarios such as emergencies 
there are two ways to deploy sand first any standard 
web browser can be used to retrieve and run the client piece 
 sand internet browser as a java application or an applet 
this way users across various platforms can continuously 
access large spatial data on a remote location with little or 
 
no need for any preceding software installation the second 
option is to use a stand-alone sand internet browser along 
with a locally-installed internet-enabled database 
management system server piece in this case the sand internet 
browser can still be utilized to view data from remote 
locations however frequently accessed data can be downloaded 
to the local database on demand and subsequently accessed 
locally power users can also upload large volumes of spatial 
data back to the remote server using this enhanced client 
we focused our efforts in two directions we first aimed at 
developing a client-server architecture with efficient caching 
methods to balance local resources on one side and the 
significant latency of the network connection on the other the 
low bandwidth of this connection is the primary concern in 
both cases the outcome of this research primarily addresses 
the issues of our first type of usage i e as a remote browser 
application or an applet for our browser and other similar 
applications the second direction aims at helping users 
that wish to manipulate large volumes of online data for 
prolonged periods we have developed a centralized 
peerto-peer approach to provide the users with the ability to 
transfer large volumes of data i e whole data sets to the 
local database more efficiently by better utilizing the 
distributed network resources among active clients of a 
clientserver architecture we call this architecture 
appointapproach for peer-to-peer oﬄoading the internet the 
results of this research addresses primarily the issues of the 
second type of usage for our sand internet browser i e 
as a stand-alone application 
the rest of this paper is organized as follows section 
describes our client-server approach in more detail section 
focuses on appoint our peer-to-peer approach section 
discusses our work in relation to existing work section 
outlines a sample sand internet browser scenario for both 
of our remote access approaches section contains 
concluding remarks as well as future research directions 
 the client-server approach 
traditionally geographic information systems gis 
such as arcinfo from esri and many spatial databases 
are designed to be stand-alone products the spatial 
database is kept on the same computer or local area network 
from where it is visualized and queried this architecture 
allows for instantaneous transfer of large amounts of data 
between the spatial database and the visualization module 
so that it is perfectly reasonable to use large-bandwidth 
protocols for communication between them there are however 
many applications where a more distributed approach is 
desirable in these cases the database is maintained in one 
location while users need to work with it from possibly distant 
sites over the network e g the internet these connections 
can be far slower and less reliable than local area networks 
and thus it is desirable to limit the data flow between the 
database server and the visualization unit client in order 
to get a timely response from the system 
our client-server approach figure allows the actual 
database engine to be run in a central location maintained 
by spatial database experts while end users acquire a 
javabased client component that provides them with a gateway 
into the sand spatial database engine 
our client is more than a simple image viewer instead it 
operates on vector data allowing the client to execute many 
operations such as zooming or locational queries locally in 
figure sand internet browser - client-server 
architecture 
essence a simple spatial database engine is run on the client 
this database keeps a copy of a subset of the whole database 
whose full version is maintained on the server this is a 
concept similar to  caching in our case the client acts as 
a lightweight server in that given data it evaluates queries 
and provides the visualization module with objects to be 
displayed it initiates communication with the server only 
in cases where it does not have enough data stored locally 
since the locally run database is only updated when 
additional or newer data is needed our architecture allows the 
system to minimize the network traffic between the client 
and the server when executing the most common user-side 
operations such as zooming and panning in fact as long 
as the user explores one region at a time i e he or she is 
not panning all over the database no additional data needs 
to be retrieved after the initial population of the client-side 
database this makes the system much more responsive 
than the web mapping services due to the complexity of 
evaluating arbitrary queries i e more complex queries than 
window queries that are needed for database visualization 
we do not perform user-specified queries on the client all 
user queries are still evaluated on the server side and the 
results are downloaded onto the client for display however 
assuming that the queries are selective enough i e there are 
far fewer elements returned from the query than the number 
of elements in the database the response delay is usually 
within reasonable limits 
 client-server communication 
as mentioned above the sand internet browser is a 
client piece of the remotely accessible spatial database server 
built around the sand kernel in order to communicate 
with the server whose application programming interface 
 api is a tcl-based scripting language a servlet specifically 
designed to interface the sand internet browser with the 
sand kernel is required on the server side this servlet 
listens on a given port of the server for incoming requests from 
the client it translates these requests into the sand-tcl 
language next it transmits these sand-tcl commands or 
scripts to the sand kernel after results are provided by 
the kernel the servlet fetches and processes them and then 
sends those results back to the originating client 
once the java servlet is launched it waits for a client to 
initiate a connection it handles both requests for the actual 
client java code needed when the client is run as an applet 
and the sand traffic when the client piece is launched 
it connects back to the sand servlet the communication 
is driven by the client piece the server only responds to 
the client s queries the client initiates a transaction by 
 
sending a query the java servlet parses the query and 
creates a corresponding sand-tcl expression or script in 
the sand kernel s native format it is then sent to the 
kernel for evaluation or execution the kernel s response 
naturally depends on the query and can be a boolean value 
a number or a string representing a value e g a default 
color or a whole tuple e g in response to a nearest tuple 
query if a script was sent to the kernel e g requesting 
all the tuples matching some criteria then an arbitrary 
amount of data can be returned by the sand server in this 
case the data is first compressed before it is sent over the 
network to the client the data stream gets decompressed 
at the client before the results are parsed 
notice that if another spatial database was to be used 
instead of the sand kernel then only a simple 
modification to the servlet would need to be made in order for the 
sand internet browser to function properly in 
particular the queries sent by the client would need to be recoded 
into another query language which is native to this different 
spatial database the format of the protocol used for 
communication between the servlet and the client is unaffected 
 the peer-to-peer approach 
many users may want to work on a complete spatial data 
set for a prolonged period of time in this case making an 
initial investment of downloading the whole data set may be 
needed to guarantee a satisfactory session unfortunately 
spatial data tends to be large a few download requests 
to a large data set from a set of idle clients waiting to be 
served can slow the server to a crawl this is due to the fact 
that the common client-server approach to transferring data 
between the two ends of a connection assumes a designated 
role for each one of the ends i e some clients and a server 
we built appoint as a centralized peer-to-peer system 
to demonstrate our approach for improving the common 
client-server systems a server still exists there is a 
central source for the data and a decision mechanism for the 
service the environment still functions as a client-server 
environment under many circumstances yet unlike many 
common client-server environments appoint maintains 
more information about the clients this includes 
inventories of what each client downloads their availabilities etc 
when the client-server service starts to perform poorly or 
a request for a data item comes from a client with a poor 
connection to the server appoint can start appointing 
appropriate active clients of the system to serve on behalf 
of the server i e clients who have already volunteered their 
services and can take on the role of peers hence moving 
from a client-server scheme to a peer-to-peer scheme the 
directory service for the active clients is still performed by 
the server but the server no longer serves all of the requests 
in this scheme clients are used mainly for the purpose of 
sharing their networking resources rather than introducing 
new content and hence they help oﬄoad the server and scale 
up the service the existence of a server is simpler in terms 
of management of dynamic peers in comparison to pure 
peerto-peer approaches where a flood of messages to discover 
who is still active in the system should be used by each peer 
that needs to make a decision the server is also the main 
source of data and under regular circumstances it may not 
forward the service 
data is assumed to be formed of files a single file forms 
the atomic means of communication appoint optimizes 
requests with respect to these atomic requests frequently 
accessed data sets are replicated as a byproduct of having 
been requested by a large number of users this opens up 
the potential for bypassing the server in future downloads for 
the data by other users as there are now many new points of 
access to it bypassing the server is useful when the server s 
bandwidth is limited existence of a server assures that 
unpopular data is also available at all times the service 
depends on the availability of the server the server is now 
more resilient to congestion as the service is more scalable 
backups and other maintenance activities are already 
being performed on the server and hence no extra 
administrative effort is needed for the dynamic peers if a peer goes 
down no extra precautions are taken in fact appoint 
does not require any additional resources from an already 
existing client-server environment but instead expands its 
capability the peers simply get on to or get off from a table 
on the server 
uploading data is achieved in a similar manner as 
downloading data for uploads the active clients can again be 
utilized users can upload their data to a set of peers other 
than the server if the server is busy or resides in a distant 
location eventually the data is propagated to the server 
all of the operations are performed in a transparent 
fashion to the clients upon initial connection to the server 
they can be queried as to whether or not they want to share 
their idle networking time and disk space the rest of the 
operations follow transparently after the initial contact 
appoint works on the application layer but not on lower 
layers this achieves platform independence and easy 
deployment of the system appoint is not a replacement but 
an addition to the current client-server architectures we 
developed a library of function calls that when placed in a 
client-server architecture starts the service we are 
developing advanced peer selection schemes that incorporate the 
location of active clients bandwidth among active clients 
data-size to be transferred load on active clients and 
availability of active clients to form a complete means of selecting 
the best clients that can become efficient alternatives to the 
server 
with appoint we are defining a very simple api that 
could be used within an existing client-server system easily 
instead of denial of service or a slow connection this api 
can be utilized to forward the service appropriately the 
api for the server side is 
start serverportno 
makefileavailable file location boolean 
callback receivedfile file location 
callback errorreceivingfile file location error 
stop 
similarly the api for the client side is 
start clientportno serverportno serveraddress 
makefileavailable file location boolean 
receivefile file location 
sendfile file location 
stop 
the server after starting the appoint service can make 
all of the data files available to the clients by using the 
makefileavailable method this will enable appoint 
to treat the server as one of the peers 
the two callback methods of the server are invoked when 
a file is received from a client or when an error is 
encountered while receiving a file from a client appoint 
guar 
figure the localization operation in appoint 
antees that at least one of the callbacks will be called so 
that the user who may not be online anymore can always 
be notified i e via email clients localizing large data 
files can make these files available to the public by using the 
makefileavailable method on the client side 
for example in our sand internet browser we have the 
localization of spatial data as a function that can be chosen 
from our menus this functionality enables users to 
download data sets completely to their local disks before starting 
their queries or analysis in our implementation we have 
calls to the appoint service both on the client and the 
server sides as mentioned above hence when a localization 
request comes to the sand internet browser the browser 
leaves the decisions to optimally find and localize a data set 
to the appoint service our server also makes its data 
files available over appoint the mechanism for the 
localization operation is shown with more details from the 
appoint protocols in figure the upload operation is 
performed in a similar fashion 
 related work 
there has been a substantial amount of research on 
remote access to spatial data one specific approach has 
been adopted by numerous web-based mapping services 
 mapquest mapsonus etc the goal in this 
approach is to enable remote users typically only equipped 
with standard web browsers to access the company s 
spatial database server and retrieve information in the form of 
pictorial maps from them the solution presented by most 
of these vendors is based on performing all the calculations 
on the server side and transferring only bitmaps that 
represent results of user queries and commands although the 
advantage of this solution is the minimization of both 
hardware and software resources on the client site the resulting 
product has severe limitations in terms of available 
functionality and response time each user action results in a new 
bitmap being transferred to the client 
work described in examines a client-server 
architecture for viewing large images that operates over a 
lowbandwidth network connection it presents a technique 
based on wavelet transformations that allows the 
minimization of the amount of data needed to be transferred over 
the network between the server and the client in this case 
while the server holds the full representation of the large 
image only a limited amount of data needs to be transferred 
to the client to enable it to display a currently requested 
view into the image on the client side the image is 
reconstructed into a pyramid representation to speed up zooming 
and panning operations both the client and the server keep 
a common mask that indicates what parts of the image are 
available on the client and what needs to be requested this 
also allows dropping unnecessary parts of the image from the 
main memory on the server 
other related work has been reported in where a 
client-server architecture is described that is designed to 
provide end users with access to a server it is assumed that 
this data server manages vast databases that are impractical 
to be stored on individual clients this work blends raster 
data management stored in pyramids with vector data 
stored in quadtrees 
for our peer-to-peer transfer approach appoint 
napster is the forefather where a directory service is centralized 
on a server and users exchange music files that they have 
stored on their local disks our application domain where 
the data is already freely available to the public forms a 
prime candidate for such a peer-to-peer approach gnutella 
is a pure decentralized peer-to-peer file exchange system 
unfortunately it suffers from scalability issues i e floods of 
messages between peers in order to map connectivity in the 
system are required other systems followed these popular 
systems each addressing a different flavor of sharing over 
the internet many peer-to-peer storage systems have also 
recently emerged past eternity service cfs 
and oceanstore are some peer-to-peer storage systems 
some of these systems have focused on anonymity while 
others have focused on persistence of storage also other 
approaches like seti home made other resources such 
as idle cpus work together over the internet to solve large 
scale computational problems our goal is different than 
these approaches with appoint we want to improve 
existing client-server systems in terms of performance by using 
idle networking resources among active clients hence other 
issues like anonymity decentralization and persistence of 
storage were less important in our decisions confirming 
the authenticity of the indirectly delivered data sets is not 
yet addressed with appoint we want to expand our 
research in the future to address this issue 
from our perspective although appoint employs some 
of the techniques used in peer-to-peer systems it is also 
closely related to current web caching architectures 
squirrel forms the middle ground it creates a pure 
peer-topeer collaborative web cache among the web browser caches 
of the machines in a local-area network except for this 
recent peer-to-peer approach web caching is mostly a 
wellstudied topic in the realm of server proxy level caching 
 collaborative web caching systems the most 
relevant of these for our research focus on creating 
either a hierarchical hash-based central directory-based or 
multicast-based caching schemes we do not compete with 
these approaches in fact appoint can work in 
tandem with collaborative web caching if they are deployed 
together we try to address the situation where a request 
arrives at a server meaning all the caches report a miss 
hence the point where the server is reached can be used to 
take a central decision but then the actual service request 
can be forwarded to a set of active clients i e the 
down 
load and upload operations cache misses are especially 
common in the type of large data-based services on which 
we are working most of the web caching schemes that are 
in use today employ a replacement policy that gives a 
priority to replacing the largest sized items over smaller-sized 
ones hence these policies would lead to the immediate 
replacement of our relatively large data files even though they 
may be used frequently in addition in our case the user 
community that accesses a certain data file may also be very 
dispersed from a network point of view and thus cannot take 
advantage of any of the caching schemes finally none of 
the web caching methods address the symmetric issue of 
large data uploads 
 a sample application 
fedstats is an online source that enables ordinary 
citizens access to official statistics of numerous federal agencies 
without knowing in advance which agency produced them 
we are using a fedstats data set as a testbed for our work 
our goal is to provide more power to the users of fedstats 
by utilizing the sand internet browser as an example 
we looked at two data files corresponding to 
environmental protection agency epa -regulated facilities that have 
chlorine and arsenic respectively for each file we had the 
following information available epa-id name street city 
state zip code latitude longitude followed by flags to 
indicate if that facility is in the following epa programs 
hazardous waste wastewater discharge air emissions 
abandoned toxic waste dump and active toxic release 
we put this data into a sand relation where the spatial 
attribute  location corresponds to the latitude and 
longitude some queries that can be handled with our system on 
this data include 
 find all epa-regulated facilities that have arsenic and 
participate in the air emissions program and 
 a lie in georgia to illinois alphabetically 
 b lie within arkansas or miles within its border 
 c lie within miles of the border of arkansas i e 
both sides of the border 
 for each epa-regulated facility that has arsenic find 
all epa-regulated facilities that have chlorine and 
 a that are closer to it than to any other 
eparegulated facility that has arsenic 
 b that participate in the air emissions program 
and are closer to it than to any other 
eparegulated facility which has arsenic in order to 
avoid reporting a particular facility more than 
once we use our  group by epa-id mechanism 
figure illustrates the output of an example query that 
finds all arsenic sites within a given distance of the border of 
arkansas the sites are obtained in an incremental manner 
with respect to a given point this ordering is shown by 
using different color shades 
with this example data it is possible to work with the 
sand internet browser online as an applet connecting to 
a remote server or after localizing the data and then 
opening it locally in the first case for each action taken the 
client-server architecture will decide what to ask for from 
the server in the latter case the browser will use the 
peerto-peer appoint architecture for first localizing the data 
 concluding remarks 
an overview of our efforts in providing remote access to 
large spatial data has been given we have outlined our 
approaches and introduced their individual elements our 
client-server approach improves the system performance by 
using efficient caching methods when a remote server is 
accessed from thin-clients appoint forms an alternative 
approach that improves performance under an existing 
clientserver system by using idle client resources when individual 
users want work on a data set for longer periods of time 
using their client computers 
for the future we envision development of new efficient 
algorithms that will support large online data transfers within 
our peer-to-peer approach using multiple peers 
simultaneously we assume that a peer client can become 
unavailable at any anytime and hence provisions need to be in place 
to handle such a situation to address this we will augment 
our methods to include efficient dynamic updates upon 
completion of this step of our work we also plan to run 
comprehensive performance studies on our methods 
another issue is how to access data from different sources 
in different formats in order to access multiple data sources 
in real time it is desirable to look for a mechanism that 
would support data exchange by design the xml 
protocol has emerged to become virtually a standard for 
describing and communicating arbitrary data gml is 
an xml variant that is becoming increasingly popular for 
exchange of geographical data we are currently working 
on making sand xml-compatible so that the user can 
instantly retrieve spatial data provided by various agencies in 
the gml format via their web services and then explore 
query or process this data further within the sand 
framework this will turn the sand system into a universal tool 
for accessing any spatial data set as it will be deployable on 
most platforms work efficiently given large amounts of data 
be able to tap any gml-enabled data source and provide 
an easy to use graphical user interface this will also 
convert the sand system from a research-oriented prototype 
into a product that could be used by end users for 
accessing viewing and analyzing their data efficiently and with 
minimum effort 
 references 
 fedstats the gateway to statistics from over u s 
federal agencies http www fedstats gov 
 arcinfo scalable system of software for geographic 
data creation management integration analysis and 
dissemination http www esri com software 
arcgis arcinfo index html 
 extensible markup language xml 
http www w org xml 
 geography markup language gml 
http opengis net gml - gml html 
 mapquest consumer-focused interactive mapping site 
on the web http www mapquest com 
 mapsonus suite of online geographic services 
http www mapsonus com 
 r anderson the eternity service in proceedings of 
the pragocrypt pages - prague czech 
republic september 
 l breslau p cao l fan g phillips and 
s shenker web caching and zipf-like distributions 
 
figure sample output from the sand internet browser - large dark dots indicate the result of a query 
that looks for all arsenic sites within a given distance from arkansas different color shades are used to 
indicate ranking order by the distance from a given point 
evidence and implications in proceedings of the ieee 
infocom pages - new york ny march 
 
 e chang c yap and t yen realtime visualization 
of large images over a thinwire in r yagel and 
h hagen editors proceedings ieee visualization 
 late breaking hot topics pages - phoenix 
az october 
 f dabek m f kaashoek d karger r morris and 
i stoica wide-area cooperative storage with cfs in 
proceedings of the acm sosp pages - 
banff al october 
 a dingle and t partl web cache coherence 
computer networks and isdn systems 
 - - may 
 c esperan¸ca and h samet experience with 
sand tcl a scripting tool for spatial databases 
journal of visual languages and computing 
 - april 
 s iyer a rowstron and p druschel squirrel a 
decentralized peer-to-peer web cache rice 
university microsoft research submitted for 
publication 
 d karger a sherman a berkheimer b bogstad 
r dhanidina k iwamoto b kim l matkins and 
y yerushalmi web caching with consistent hashing 
computer networks - - may 
 j kubiatowicz d bindel y chen s czerwinski 
p eaton d geels r gummadi s rhea 
h weatherspoon w weimer c wells and b zhao 
oceanstore an architecture for global-scale persistent 
store in proceedings of the acm asplos pages 
 - cambridge ma november 
 m potmesil maps alive viewing geospatial 
information on the www computer networks and 
isdn systems - - september 
also hyper proceedings of the th international world 
wide web conference santa clara ca april 
 m rabinovich j chase and s gadde not all hits 
are created equal cooperative proxy caching over a 
wide-area network computer networks and isdn 
systems - - november 
 a rowstron and p druschel storage management 
and caching in past a large-scale persistent 
peer-to-peer storage utility in proceedings of the acm 
sosp pages - banff al october 
 h samet applications of spatial data structures 
computer graphics image processing and gis 
addison-wesley reading ma 
 h samet the design and analysis of spatial data 
structures addison-wesley reading ma 
 seti home http setiathome ssl berkeley edu 
 
 l j williams pyramidal parametrics computer 
graphics - july also proceedings of 
the siggraph conference detroit july 
 
