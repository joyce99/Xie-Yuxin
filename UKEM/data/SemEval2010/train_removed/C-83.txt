concept and architecture of a pervasive document editing 
and managing system 
stefania leone thomas b hodel harald gall 
university of zurich switzerland university of zurich switzerland university of zurich switzerland 
department of informatics department of informatics department of informatics 
leone ifi unizh ch hodel ifi unizh ch gall ifi unizh ch 
abstract 
collaborative document processing has been addressed by many 
approaches so far most of which focus on document versioning 
and collaborative editing we address this issue from a different 
angle and describe the concept and architecture of a pervasive 
document editing and managing system it exploits database 
techniques and real-time updating for sophisticated collaboration 
scenarios on multiple devices each user is always served with 
upto-date documents and can organize his work based on document 
meta data for this we present our conceptual architecture for 
such a system and discuss it with an example 
categories and subject descriptors 
c distributed systems computer-communication 
networks computer system organization distributed systems 
distributed applications 
general terms 
management measurement documentation economics human 
factors 
 introduction 
text documents are a valuable resource for virtually any enterprise 
and organization documents like papers reports and general 
business documentations contain a large part of today s business 
knowledge documents are mostly stored in a hierarchical folder 
structure on file servers and it is difficult to organize them in regard 
to classification versioning etc although it is of utmost importance 
that users can find retrieve and edit up-to-date versions of 
documents whenever they want and in a user-friendly way 
 problem description 
with most of the commonly used word-processing applications 
documents can be manipulated by only one user at a time tools for 
pervasive collaborative document editing and management are 
rarely deployed in today s world despite the fact that people strive 
for location- and time- independence the importance of pervasive 
collaborative work i e collaborative document editing and 
management is totally neglected documents could therefore be 
seen as a vulnerable source in today s world which demands for an 
appropriate solution the need to store retrieve and edit these 
documents collaboratively anytime everywhere and with almost 
every suitable device and with guaranteed mechanisms for security 
consistency availability and access control is obvious 
in addition word processing systems ignore the fact that the history 
of a text document contains crucial information for its management 
such meta data includes creation date creator authors version 
location-based information such as time and place when where a 
user reads edits a document and so on such meta data can be 
gathered during the documents creation process and can be used 
versatilely especially in the field of pervasive document 
management meta data is of crucial importance since it offers 
totally new ways of organizing and classifying documents on the 
one hand the user s actual situation influences the user s objectives 
meta data could be used to give the user the best possible view on 
the documents dependent of his actual information on the other 
hand as soon as the user starts to work i e reads or edits a 
document new meta data can be gathered in order to make the 
system more adaptable and in a sense to the users situation and to 
offer future users a better view on the documents 
as far as we know no system exists that satisfies the 
aforementioned requirements a very good overview about 
realtime communication and collaboration system is described in 
we therefore strive for a pervasive document editing and 
management system which enables pervasive and collaborative 
document editing and management users should be able to read and 
edit documents whenever wherever with whomever and with 
whatever device 
in this paper we present collaborative database-based real-time 
word processing which provides pervasive document editing and 
management functionality it enables the user to work on 
documents collaboratively and offers sophisticated document 
management facility the user is always served with up-to-date 
documents and can organize and manage documents on the base of 
meta data additionally document data is treated as  first class 
citizen of the database as demanded in 
 underlying concepts 
the concept of our pervasive document editing and management 
system requires an appropriate architectural foundation our 
concept and implementation are based on the tendax 
collaborative database-based document editing and management 
system which enables pervasive document editing and managing 
tendax is a text native database extension it enables the 
storage of text in databases in a native form so that editing text is 
finally represented as real-time transactions under the term  text 
editing we understand the following writing and deleting text 
 characters copying pasting text defining text layout 
structure inserting notes setting access rights defining business 
processes inserting tables pictures and so on i e all the actions 
regularly carried out by word processing users with  real-time 
transaction we mean that editing text e g writing a 
character word invokes one or several database transactions so that 
everything which is typed appears within the editor as soon as these 
objects are stored persistently instead of creating files and storing 
them in a file system the content and all of the meta data belonging 
to the documents is stored in a special way in the database which 
enables very fast real-time transactions for all editing tasks 
the database schema and the above-mentioned transactions are 
created in such a way that everything can be done within a 
multiuser environment as is usual done by database technology as a 
consequence many of the achievements with respect to data 
organization and querying recovery integrity and security 
enforcement multi-user operation distribution management 
uniform tool access etc are now by means of this approach also 
available for word processing 
 approach 
our pervasive editing and management system is based on the 
above-mentioned database-based tendax approach where 
document data is stored natively in the database and supports 
pervasive collaborative text editing and document management 
we define the pervasive document editing and management system 
as a system where documents can easily be accessed and 
manipulated everywhere within the network anytime 
 independently of the number of users working on the same 
document and with any device desktop notebook pda mobile 
phone etc 
db 
rtsc 
rtsc 
rtsc 
rtsc 
as 
as 
db 
db 
as 
as 
db 
a 
b 
c 
d 
e 
f 
g 
figure tendax application architecture 
in contrast to documents stored locally on the hard drive or on a file 
server our system automatically serves the user with the up-to-date 
version of a document and changes done on the document are stored 
persistently in the database and immediately propagated to all 
clients who are working on the same document additionally meta 
data gathered during the whole document creation process enables 
sophisticated document management with the text sql api as 
abstract interface this approach can be used by any tool and for any 
device 
the system is built on the following components see figure an 
editor in java implements the presentation layer a-g in figure 
the aim of this layer is the integration in a well-known 
wordprocessing application such as openoffice 
the business logic layer represents the interface between the 
database and the word-processing application it consists of the 
following three components the application server marked as as 
 - in figure enables text editing within the database 
environment and takes care of awareness security document 
management etc all within a collaborative real-time and multi-user 
environment the real-time server component marked as rtsc 
 in figure is responsible for the propagation of information i e 
updates between all of the connected editors 
the storage engine data layer primarily stores the content of 
documents as well as all related meta data within the database 
databases can be distributed in a peer-to-peer network db - in 
figure 
in the following we will briefly present the database schema the 
editor and the real-time server component as well as the concept of 
dynamic folders which enables sophisticated document 
management on the basis of meta data 
 application architecture 
a database-based real-time collaborative editor allows the same 
document to be opened and edited simultaneously on the same 
computer or over a network of several computers and mobile 
devices all concurrency issues as well as message propagation are 
solved within this approach while multiple instances of the same 
document are being opened each insert or delete action is a 
database transaction and as such is immediately stored persistently 
in the database and propagated to all clients working on the same 
document 
 database schema 
as it was mentioned earlier that text is stored in a native way each 
character of a text document is stored as a single object in the 
database when storing text in such a native form the 
performance of the employed database system is of crucial 
importance the concept and performance issues of such a text 
database are described in collaborative layouting in 
dynamic collaborative business processes within documents in 
the text editing creation time meta data model in and the relation 
to xml databases in 
figure depicts the core database schema by connecting a client to 
the database a session instance is created one important attribute 
of the session is the documentsession this attribute refers to 
documentsession instances which administrates all opened 
documents for each opened document a documentsession 
instance is created the documentsession is important for the 
realtime server component which in case of a 
 
is beforeis after 
char 
 id 
has 
textelement 
 id 
starts 
with 
is used 
by 
internalfile 
 id 
is in includes 
created 
at 
has 
inserted 
by 
inserted 
is active 
ir 
ir 
charactervalue 
 unicode 
has 
list 
 id 
starts 
starts 
with 
ends ends with 
filesize 
has 
user 
 id 
last read by 
last written by 
created 
at 
created by 
style 
dtd 
 id 
is used 
by 
uses 
uses 
is used 
by 
authors 
arehas 
description 
password 
picture 
usercolors 
userlistsecurity 
has 
has 
has 
has 
has 
has 
filenode 
 id 
references isreferencedby 
is dynamic dynstructure 
nodedetails 
has 
has is nodetype 
is parent 
of 
has 
parent 
has 
role 
 id 
created 
at 
created 
created 
by 
name 
has 
description 
is user 
name 
has 
has 
main role 
filenodeaccessmatrix 
 id 
has 
is 
accessmatrix 
read option 
grand option 
write option 
contains 
has 
access 
times 
opened   times with   by 
contains ispartof 
ir 
ir 
is andincludes 
lineage 
 id 
references 
is after 
is before 
copypaste 
 id 
references 
is in 
is copy 
of 
is a copy 
from 
hascopypaste 
 id 
is activelength has 
str stream 
has 
inserted by inserted 
regularchar 
startchar endchar 
file 
externalfile 
is from 
url 
type 
 extension 
is of 
title 
has 
documentsession 
 id 
is opened 
by 
has 
opened 
has 
opened 
session 
 id 
isconnectedwith 
launched by 
versionnumber 
uses 
has 
read option 
grand option 
write option 
ends with 
is used 
by 
is in has 
is unique 
dtd stream 
has 
has 
name 
column 
 id 
has set on 
on off 
isvisible for 
false 
languageprofile 
 id 
has 
contains 
name 
profile 
marking 
 id 
has 
parent 
internal 
is copy 
from 
hasrank 
is onposition 
starts 
with 
ends with 
is logical style 
is itemized 
is italic 
is enumerated 
is underline 
is 
is part of 
alignment 
size has 
font has 
hascolor 
is bold 
has 
uses 
elementname 
stylesheetname 
isused 
by 
process 
 id 
is running by os 
is web session 
mainroles 
roles has 
has 
timestamp 
 date time 
created 
at 
timestamp 
 date time 
timestamp 
 date time 
timestamp 
 date time 
timestamp 
 date time created 
at 
type 
has 
port 
ip 
has 
has 
messagepropagator 
 id 
picture 
 stream 
name 
picture 
 id 
has 
contains 
layoutblock workflowblocklogicalblock 
contains 
blockdatatype 
has 
property 
blockdata is of 
workflowinstance 
 id 
isin 
taskinstance 
 id 
has 
parent 
timestamp 
 date time 
timestamp 
 date time 
timestamp 
 date time 
timestamp 
 date time 
last modified at 
completed at 
started at 
created 
at 
is on 
has 
name 
created by 
has 
attached 
comment 
typeis of 
timestamp 
 date time 
timestamp 
 date time 
timestamp 
 date time 
created 
at 
started at 
 last modified at 
is 
category 
editors 
has 
status 
has 
timestamp 
 date time 
 status last modified 
timestamp 
 date time 
is due at 
duetype 
has 
timezone 
has 
notes 
has 
securitylevel 
hasset 
timestamp 
 date time 
 is completed at 
isfollowedby 
task 
 code 
description 
has 
indent 
references 
hasbeenopenedat by 
timestamp 
redohistory 
is before 
is after 
references 
hascharcounter 
is inhas 
has 
offset 
actionid 
 code 
timestamp 
 date time 
invoked 
at 
invoked 
by 
version 
 id 
isbuild 
from 
has 
created 
byarchived 
has 
comment 
timestamp 
 date time 
 createdat 
undohistory 
 id 
starts 
ends 
has 
name 
created 
by 
name 
has 
is before 
is after 
 references 
charcounter 
has 
is in 
created 
at 
timestamp 
is active 
created 
by 
is used 
by 
offset 
has 
created 
at 
timestamp 
index 
 id 
lastmodifiedby 
lexicon 
 id 
isof 
frequency 
is 
occurring 
is stop word 
term 
is 
is in 
ends with 
starts 
with 
 original starts with 
wordnumber 
sentencenumber 
paragraphnumber 
citatons 
has 
is in 
is 
is in 
istemporary 
is in 
has 
structure 
has 
elementpath 
createdat 
timestamp 
 describes 
spiderbuild 
 id 
is updated 
is deleted 
timestamp 
 date time 
 lastupdatedat 
has validated structure 
 neededtoindex 
time 
 ms 
indexupdate 
nextupdatein 
hasindexed 
isrunningbyos 
lastupdate 
enabled 
timestamp 
time 
 s 
documents 
stopcharacter 
description 
character 
value 
 ascii 
is sentence stop 
is paragraph stop 
name 
has 
is 
is 
optionssettings 
show information show warningsshow exceptions 
do lineage recording 
do internal lineage recording 
ask for unknown source 
show intra document 
lineage information 
are set 
for 
x 
x 
x 
virtualborder 
 id 
isonhas 
 
 
ir 
ir 
usermode 
 code 
usermode 
 code 
figure tendax database schema object role modeling diagram 
change on a document done by a client is responsible for sending 
update information to all the clients working on the same 
document the documentid in the class documentsession points 
to a filenode instance and corresponds to the id of the opened 
document instances of the class filenode either represent a 
folder node or a document node the folder node corresponds to a 
folder of a file system and the document node to that of a file 
instances of the class char represent the characters of a 
document the value of a character is stored in the attribute 
charactervalue the sequence is defined by the attributes after 
and before of the class char particular instances of char mark 
the beginning and the end of a document the methods 
insertchars and removechars are used to add and delete 
characters 
 editor 
as seen above each document is natively stored in the database 
our editor does not have a replica of one part of the native text 
database in the sense of database replicas instead it has a so-called 
image as its replica even if several authors edit the same text at the 
same time they work on one unique document at all times the 
system guarantees this unique view 
editing a document involves a number of steps first getting the 
required information out of the image secondly invoking the 
corresponding methods within the database thirdly changing the 
image and fourthly informing all other clients about the changes 
 real-time server component 
the real-time server component is responsible for the real-time 
propagation of any changes on a document done within an editor to 
all the editors who are working or have opened the same document 
when an editor connects to the application server which in turn 
connects to the database the database also establishes a connection 
to the real-time server component if there isn t already a 
connection the database system informs the real-time server 
component about each new editor session session which the 
realtime server component administrates in his sessionmanager then 
the editor as well connects to the real-time server component the 
real-time server component adds the editor socket to the client s 
data structure in the sessionmanager and is then ready to 
communicate 
each time a change on a document from an editor is persistently 
stored in the database the database sends a message to the real-time 
server component which in turns sends the changes to all the 
 
editors working on the same document therefore a special 
communication protocol is used the update protocol 
update protocol 
the real-time server component uses the update protocol to 
communicate with the database and the editors messages are sent 
from the database to the real-time server component which sends 
the messages to the affected editors the update protocol consists of 
different message types messages consist of two packages 
package one contains information for the real-time server 
component whereas package two is passed to the editors and 
contains the update information as depicted in figure 
 rtsc parameter   parameter editor data 
protocol between database system and 
real-time server component 
protocol between real -time server 
component and editors 
figure update protocol 
in the following two message types are presented 
 u sessionid sessionid editor data 
u update message sessionid id of the client session 
with this message type the real-time server component sends the 
editor data package to all editors specified in the sessionid list 
 ud fileid editor data 
ud update document message fileid id of the file 
with this message type the real-time server component sends the 
editor data to all editors who have opened the document with the 
indicated file-id 
class model 
figure depicts the class model as well as the environment of the 
real-time server component the environment consists mainly of the 
editor and the database but any other client application that could 
make use of the real-time server component can connect 
connectionlistener this class is responsible for the connection to 
the clients i e to the database and the editors depending on the 
connection type database or editor the connection is passed to an 
editorworker instance or databasemessageworker instance 
respectively 
editorworker this class manages the connections of type  editor 
the connection a socket and its input and output stream is stored 
in the sessionmanager 
sessionmanager this class is similar to an  in-memory database 
all editor session information e g the editor sockets which editor 
has opened which document etc are stored within this data 
structure 
databasemessageworker this class is responsible for the 
connections of type  database at run-time only one connection 
exists for each database update messages from the database are 
sent to the databasemessageworker and with the help of 
additional information from the sessionmanager sent to the 
corresponding clients 
serviceclass this class offers a set of methods for reading writing 
and logging messages 
tdb mp editor tdb mp database 
tdb mp mgmt 
editorworker 
databasemessageworker 
sessionmanager 
messagehandler 
connectionlistener 
serviceclass 
messagequeue 
tdb mp listener tdb mp service 
junit tests 
 
 
 
 
 
 
 
 
 
 
editors datenbanksystem 
 
 
 
 
 
 
 
tcp ip 
figure real-time server component class diagram 
 dynamic folders 
as mentioned above every editing action invoked by a user is 
immediately transferred to the database at the same time more 
information about the current transaction is gathered 
as all information is stored in the database one character can hold a 
multitude of information which can later be used for the retrieval of 
documents meta data is collected at character level from document 
structure layout workflow template semantics security 
workflow and notes on the level of a document section and on the 
level of the whole document 
all of the above-mentioned meta data is crucial information for 
creating content and knowledge out of word processing documents 
this meta data can be used to create an alternative storage system 
for documents in any case it is not an easy task to change users 
familiarity to the well known hierarchical file system this is also 
the main reason why we do not completely disregard the classical 
file system but rather enhance it folders which correspond to the 
classical hierarchical file system will be called static folders 
folders where the documents are organized according to meta data 
will be called dynamic folders as all information is stored in the 
database the file system too is based on the database 
the dynamic folders build up sub-trees which are guided by the 
meta data selected by the user thus the first step in using a 
dynamic folder is the definition of how it should be built for each 
level of a dynamic folder exactly one meta data item is used to the 
following example illustrates the steps which have to be taken in 
order to define a dynamic folder and the meta data which should be 
used 
as a first step the meta data which will be used for the dynamic 
folder must be chosen see table the sequence of the meta data 
influences the structure of the folder furthermore for each meta 
data used restrictions and granularity must be defined by the user 
if no restrictions are defined all accessible documents are listed 
the granularity therefore influences the number of sub-folders 
which will be created for the partitioning of the documents 
 
as the user enters the tree structure of the dynamic folder he can 
navigate through the branches to arrive at the document s he is 
looking for the directory names indicate which meta data 
determines the content of the sub-folder in question at each level 
the documents which have so far been found to match the meta 
data can be inspected 
table defining dynamic folders example 
level meta data restrictions granularity 
 creator only show documents 
which have been created 
by the users leone or 
hodel or gall 
one folder per 
creator 
 current 
location 
only show documents 
which where read at my 
current location 
one folder per 
task status 
 authors only show documents 
where at least was 
written by user  leone 
each one 
folder 
ad-hoc changes of granularity and restrictions are possible in order 
to maximize search comfort for the user it is possible to predefine 
dynamic folders for frequent use e g a location-based folder as 
well as to create and modify dynamic folders on an ad-hoc basis 
furthermore the content of such dynamic folders can change from 
one second to another depending on the changes made by other 
users at that moment 
 validation 
the proposed architecture is validated on the example of a character 
insertion insert operations are the mostly used operations in a 
 collaborative editing system the character insertion is based on 
the tendax insert algorithm which is formally described in the 
following the algorithm is simplified for this purpose 
 insert characters algorithm 
the symbol c stands for the object character p stands for the 
previous character n stands for the next character of a character 
object c and the symbol l stands for a list of character objects 
c character 
p previous character 
n next character 
l list of characters 
the symbol c stands for the first character in the list l ci stands 
for a character in the list l at the position i whereas i is a value 
between and the length of the list l and cn stands for the last 
character in the list l 
c first character in list l 
ci character at position i in list l 
cn last character in list l 
the symbol β stands for the special character that marks the 
beginning of a document and ε stands for the special character 
that marks the end of a document 
β beginning of document 
ε end of document 
the function startta starts a transaction 
startta start transaction 
the function committa commits a transaction that was started 
committa commit transaction 
the function checkwriteaccess checks if the write access for a 
document session s is granted 
checkwriteaccess s check if write access for document session 
s is granted 
the function lock acquires an exclusive lock for a character c and 
returns for a success and for no success 
lock c acquire the lock for character c 
success return no success return 
the function releaselocks releases all locks that a transaction has 
acquired so far 
releaselocks release all locks 
the function getprevious returns the previous character and 
getnext returns the next character of a character c 
getprevious c return previous character of character c 
getnext c return next character of character c 
the function linkbefore links a preceding character p with a 
succeeding character x and the function linkafter links a 
succeeding character n with a preceding character y 
linkbefore p x link character p to character x 
linkafter n y link character n to character y 
the function updatestring links a character p with the first 
character c of a character list l and a character n with the last 
character cn of a character list l 
updatestring l p n linkbefore p cl ∧ linkafter n cn 
the function insertchar inserts a character c in the table char 
with the fields after set to a character p and before set to a 
character n 
insertchar c p n linkafter c p ∧ linkbefore c n ∧ 
linkbefore p c ∧ linkafter n c 
the function checkpreceding determines the previous character s 
charactervalue of a character c and if the previous character s 
status is active 
checkpreceding c return status and charactervalue of the 
previous character 
the function checksucceeding determines the next character s 
charactervalue of a character c and if the next character s status is 
active 
 
checksucceeding c return status and charactervalue of the 
next character 
the function checkcharvalue determines the charactervalue of a 
character c 
checkcharvalue c return charactervalue of character c 
the function sendupdate sends an update message 
 updatemessage from the database to the real-time server 
component 
sendupdate updatemessage 
the function read is used in the real-time server component to 
read the updatemessage 
read updateinformationmessage 
the function allocateditors checks on the base of the 
updatemessage and the sessionmanager which editors have to 
be informed 
allocateeditors updateinformationmessage sessionmanager 
returns the affected editors 
the function sendmessage editordata sends the editor part of 
the updatemessage to the editors 
sendmessage editordata 
in tendax the insert algorithm is implemented in the class 
method insertchars of the class char which is depicted in figure 
 the relevant parameters for the definitions beneath are 
introduced in the following list 
- nextcharacteroid oid of the character situated next to the 
string to be inserted 
- previouscharacteroid oid of the character situated 
previously to the string to be inserted 
- characteroids list list of character which have to be 
inserted 
thus the insertion of characters can be defined stepwise as 
follows 
start a transaction 
startta 
select the character that is situated before the character that 
follows the string to be inserted 
getprevious nextcharacteroid prevchar prevcharoid ⇐ 
π after ϑoid nextcharacteroid char 
acquire the lock for the character that is situated in the document 
before the character that follows the string which shall be inserted 
lock prevcharid 
at this time the list characteroids contains the characters c to cn 
that shall be inserted 
characteroids c   cn 
each character of the string is inserted at the appropriate position 
by linking the preceding and the succeeding character to it 
for each character ci of characteroids 
insertchar ci p n 
whereas ci ∈ c   cn 
check if the preceding and succeeding characters are active or if it 
is the beginning or the end of the document 
checkpreceding prevcharoid isok isactive 
charactervalue ⇐ π isactive charactervalue ϑ oid 
nextcharacteroid char 
checksucceeding nextcharacteroid isok isactive 
charactervalue ⇐ π isactive charactervalue ϑ oid 
nextcharacteroid char 
update characters before and after the string to be inserted 
updatestring characteroids prevcharoid nextcharacteroid 
release all locks and commit transaction 
releaselocks 
committa 
send update information to the real-time server component 
sendupdate updatenmessage 
read update message and inform affected editors of the change 
read updatemessage 
allocate editors updatemessage sessionmanager 
sendmessage editordata 
 insert characters example 
figure gives a snapshot the system i e of its architecture four 
databases are distributed over a peer-to-peer network each 
database is connected to an application server as and each 
application server is connected to a real-time server component 
 rtsc editors are connected to one or more real-time server 
components and to the corresponding databases 
considering that editor a connected to database and and 
editor b connected to database and are working on the same 
document stored in database editor b now inserts a character 
into this document the insert operation is passed to application 
server which in turns passes it to the database where an 
insert operation is invoked the characters are inserted according 
to the algorithm discussed in the previous section after the 
insertion database sends an update message according to the 
update protocol discussed before to real-time server component 
 via as rtcs combines the received update information 
with the information in his sessionmanager and sends the editor 
data to the affected editors in this case to editor a and b where 
the changes are immediately shown 
occurring collaboration conflicts are solved and described in 
 summary 
with the approach presented in this paper and the implemented 
prototype we offer real-time collaborative editing and management 
of documents stored in a special way in a database with this 
approach we provide security consistency and availability of 
documents and consequently offer pervasive document editing and 
management pervasive document editing and management is 
enabled due to the proposed architecture with the embedded 
real 
time server component which propagates changes to a document 
immediately and consequently offers up-to-date documents 
document editing and managing is consequently enabled anywhere 
anytime and with any device 
the above-descried system is implemented in a running prototype 
the system will be tested soon in line with a student workshop next 
autumn 
references 
 abiteboul s agrawal r et al the lowell database 
research self assessment massachusetts usa 
 hodel t b businger d and dittrich k r supporting 
collaborative layouting in word processing ieee 
international conference on cooperative information 
systems coopis larnaca cyprus ieee 
 hodel t b and dittrich k r concept and prototype of a 
collaborative business process environment for document 
processing data knowledge engineering special 
issue collaborative business process technologies 
 
 hodel t b dubacher m and dittrich k r using 
database management systems for collaborative text 
editing acm european conference of 
computersupported cooperative work ecscw cew 
helsinki finland 
 hodel t b gall h and dittrich k r dynamic 
collaborative business processes within documents acm 
special interest group on design of communication 
 sigdoc memphis usa 
 hodel t b r hacmac and dittrich k r using text 
editing creation time meta data for document 
management conference on advanced information 
systems engineering caise porto portugal springer 
lecture notes 
 hodel t b specker f and dittrich k r embedded 
soap server on the operating system level for ad-hoc 
automatic real-time bidirectional communication 
information resources management association irma 
san diego usa 
 o kelly p revolution in real-time communication and 
collaboration for real this time application strategies 
in-depth research report burton group 
 
