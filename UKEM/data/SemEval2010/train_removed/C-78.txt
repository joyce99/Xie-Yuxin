an architectural framework and a middleware for 
cooperating smart components 
 
ant´onio casimiro 
u lisboa 
casim di fc ul pt 
j¨org kaiser 
u ulm 
 
kaiser informatik uniulm de 
paulo ver´ıssimo 
u lisboa 
pjv di fc ul pt 
abstract 
in a future networked physical world a myriad of smart 
sensors and actuators assess and control aspects of their 
environments and autonomously act in response to it 
examples range in telematics traffic management team robotics 
or home automation to name a few to a large extent such 
systems operate proactively and independently of direct 
human control driven by the perception of the environment and 
the ability to organize respective computations dynamically 
the challenging characteristics of these applications include 
sentience and autonomy of components issues of 
responsiveness and safety criticality geographical dispersion mobility 
and evolution a crucial design decision is the choice of 
the appropriate abstractions and interaction mechanisms 
looking to the basic building blocks of such systems we 
may find components which comprise mechanical 
components hardware and software and a network interface thus 
these components have different characteristics compared to 
pure software components they are able to spontaneously 
disseminate information in response to events observed in 
the physical environment or to events received from other 
component via the network interface larger autonomous 
components may be composed recursively from these 
building blocks 
the paper describes an architectural framework and a 
middleware supporting a component-based system and an 
integrated view on events-based communication comprising 
the real world events and the events generated in the 
system it starts by an outline of the component-based system 
construction the generic event architecture gear is 
introduced which describes the event-based interaction between 
the components via a generic event layer the generic event 
layer hides the different communication channels including 
 this work was partially supported by the ec through 
project ist- - cortex and by the fct 
through the large-scale informatic systems 
laboratory lasige and project posi chs 
 defeats 
the interactions through the environment an appropriate 
middleware is presented which reflects these needs and 
allows to specify events which have quality attributes to 
express temporal constraints this is complemented by the 
notion of event channels which are abstractions of the 
underlying network and allow to enforce quality attributes they 
are established prior to interaction to reserve the needed 
computational and network resources for highly predictable 
event dissemination 
categories and subject descriptors 
c computer-communication networks distributed 
systems-distributed applications c special-purpose 
and application-based systems real-time and 
embedded systems 
general terms 
design 
 introduction 
in recent years we have seen the continuous improvement 
of technologies that are relevant for the construction of 
distributed embedded systems including trustworthy visual 
auditory and location sensing communication and 
processing we believe that in a future networked physical 
world a new class of applications will emerge composed of 
a myriad of smart sensors and actuators to assess and 
control aspects of their environments and autonomously act in 
response to it the anticipated challenging characteristics 
of these applications include autonomy responsiveness and 
safety criticality large scale geographical dispersion 
mobility and evolution 
in order to deal with these challenges it is of 
fundamental importance to use adequate high-level models 
abstractions and interaction paradigms unfortunately when 
facing the specific characteristics of the target systems the 
shortcomings of current architectures and middleware 
interaction paradigms become apparent looking to the basic 
building blocks of such systems we may find components 
which comprise mechanical parts hardware software and 
a network interface however classical event object 
models are usually software oriented and as such when 
trans 
ported to a real-time embedded systems setting their 
harmony is cluttered by the conflict between on the one side 
send receive of software events message-based and on 
the other side input output of hardware or real-world 
events register-based in terms of interaction paradigms 
and although the use of event-based models appears to be 
a convenient solution these often lack the 
appropriate support for non-functional requirements like reliability 
timeliness or security 
this paper describes an architectural framework and a 
middleware supporting a component-based system and an 
integrated view on event-based communication comprising 
the real world events and the events generated in the system 
when choosing the appropriate interaction paradigm it 
is of fundamental importance to address the challenging 
issues of the envisaged sentient applications unlike classical 
approaches that confine the possible interactions to the 
application boundaries i e to its components we consider 
that the environment surrounding the application also plays 
a relevant role in this respect therefore the paper starts by 
clarifying several issues concerning our view of the system 
about the interactions that may take place and about the 
information flows this view is complemented by 
providing an outline of the component-based system construction 
and in particular by showing that it is possible to 
compose larger applications from basic components following 
an hierarchical composition approach 
this provides the necessary background to introduce the 
generic-events architecture gear which describes 
the event-based interaction between the components via a 
generic event layer while allowing the seamless integration 
of physical and computer information flows in fact the 
generic event layer hides the different communication 
channels including the interactions through the environment 
additionally the event layer abstraction is also adequate 
for the proper handling of the non-functional requirements 
namely reliability and timeliness which are particularly 
stringent in real-time settings the paper devotes particular 
attention to this issue by discussing the temporal aspects of 
interactions and the needs for predictability 
an appropriate middleware is presented which reflects 
these needs and allows to specify events which have quality 
attributes to express temporal constraints this is 
complemented by the notion of event channels ec which are 
abstractions of the underlying network while being abstracted 
by the event layer in fact event channels play a 
fundamental role in securing the functional and non-functional 
 e g reliability and timeliness properties of the envisaged 
applications that is in allowing the enforcement of quality 
attributes they are established prior to interaction to 
reserve the needed computational and network resources for 
highly predictable event dissemination 
the paper is organized as follows in section we 
introduce the fundamental notions and abstractions that we 
adopt in this work to describe the interactions taking place 
in the system then in section we describe the 
componentbased approach that allows composition of objects gear 
is then described in section and section focuses on 
temporal aspects of the interactions section describes the 
cosmic middleware which may be used to specify the 
interaction between sentient objects a simple example to 
highlight the ideas presented in the paper appears in 
section and section concludes the paper 
 related work 
our work considers a wired physical world in which a 
very large number of autonomous components cooperate 
it is inspired by many research efforts in very different 
areas event-based systems in general have been introduced to 
meet the requirements of applications in which entities 
spontaneously generate information and disseminate it 
 intended for large systems and requiring quite complex 
infrastructures these event systems do not consider 
stringent quality aspects like timeliness and dependability issues 
secondly they are not created to support inter-operability 
between tiny smart devices with substantial resource 
constraints 
in a real-time event system for corba has been 
introduced the events are routed via a central event server 
which provides scheduling functions to support the real-time 
requirements such a central component is not available 
in an infrastructure envisaged in our system architecture 
and the developed middleware tao the ace orb is quite 
complex and unsuitable to be directly integrated in smart 
devices 
there are efforts to implement corba for control 
networks tailored to connect sensor and actuator components 
 they are targeted for the can-bus a popular 
network developed for the automotive industry however in 
these approaches the support for timeliness or 
dependability issues does not exist or is only very limited 
a new scheme to integrate smart devices in a corba 
environment is proposed in and has lead to the proposal of 
a standard by the object management group omg 
smart transducers are organized in clusters that are 
connected to a corba system by a gateway 
the clusters form isolated subnetworks a special master 
node enforces the temporal properties in the cluster subnet 
a corba gateway allows to access sensor data and write 
actuator data by means of an interface file system ifs 
the basic structure is similar to the wan-of-cans 
structure which has been introduced in the cortex project 
islands of tight control may be realized by a control network 
and cooperate via wired or wireless networks covering a large 
number of these subnetworks however in contrast to the 
event channel model introduced in this paper all 
communication inside a cluster relies on a single technical solution of 
a synchronous communication channel secondly although 
the temporal behaviour of a single cluster is rigorously 
defined no model to specify temporal properties for 
clusterto-corba or cluster-to-cluster interactions is provided 
 information flow and 
interaction model 
in this paper we consider a component-based system model 
that incorporates previous work developed in the context of 
the ist cortex project as mentioned above a 
fundamental idea underlying the approach is that applications can 
be composed of a large number of smart components that 
are able to sense their surrounding environment and 
interact with it these components are referred to as sentient 
objects a metaphor elaborated in cortex and inspired 
on the generic concept of sentient computing introduced in 
 sentient objects accept input events from a variety of 
different sources including sensors but not constrained to 
that process them and produce output events whereby 
 
they actuate on the environment and or interact with other 
objects therefore the following kinds of interactions can 
take place in the system 
environment-to-object interactions correspond to a 
flow of information from the environment to 
application objects reporting about the state of the former 
and or notifying about events taking place therein 
object-to-object interactions correspond to a flow of 
information among sentient objects serving two 
purposes the first is related with complementing the 
assessment of each individual object about the state 
of the surrounding space the second is related to 
collaboration in which the object tries to influence other 
objects into contributing to a common goal or into 
reacting to an unexpected situation 
object-to-environment interactions correspond to a 
flow of information from an object to the environment 
with the purpose of forcing a change in the state of the 
latter 
before continuing we need to clarify a few issues with 
respect to these possible forms of interaction we consider 
that the environment can be a producer or consumer of 
information while interacting with sentient objects the 
environment is the real physical world surrounding an 
object not necessarily close to the object or limited to certain 
boundaries quite clearly the information produced by the 
environment corresponds to the physical representation of 
real-time entities of which typical examples include 
temperature distance or the state of a door on the other hand 
actuation on the environment implies the manipulation of 
these real-time entities like increasing the temperature 
 applying more heat changing the distance applying some 
movement or changing the state of the door closing or 
opening it the required transformations between system 
representations of these real-time entities and their physical 
representations is accomplished generically by sensors and 
actuators we further consider that there may exist dumb 
sensors and actuators which interact with the objects by 
disseminating or capturing raw transducer information and 
smart sensors and actuators with enhanced processing 
capabilities capable of speaking some more elaborate event 
dialect see sections and interaction with the 
environment is therefore done through sensors and actuators 
which may or may not be part of sentient objects as 
discussed in section 
state or state changes in the environment are considered 
as events captured by sensors in the environment or within 
sentient objects and further disseminated to other 
potentially interested sentient objects in the system in 
consequence it is quite natural to base the communication and 
interaction among sentient objects and with the environment 
on an event-based communication model moreover typical 
properties of event-based models such as anonymous and 
non-blocking communication are highly desirable in systems 
where sentient objects can be mobile and where interactions 
are naturally very dynamic 
a distinguishing aspect of our work from many of the 
existing approaches is that we consider that sentient objects 
may indirectly communicate with each other through the 
environment when they act on it thus the environment 
constitutes an interaction and communication channel and 
is in the control and awareness loop of the objects in other 
words when a sentient object actuates on the environment it 
will be able to observe the state changes in the environment 
by means of events captured by the sensors clearly other 
objects might as well capture the same events thus 
establishing the above-mentioned indirect communication path 
in systems that involve interactions with the environment 
it is very important to consider the possibility of 
communication through the environment it has been shown that 
the hidden channels developing through the latter e g 
feedback loops may hinder software-based algorithms ignoring 
them therefore any solution to the problem requires 
the definition of convenient abstractions and appropriate 
architectural constructs 
on the other hand in order to deal with the information 
flow through the whole computer system and environment in 
a seamless way handling software and hardware events 
uniformly it is also necessary to find adequate abstractions 
as discussed in section the generic-events architecture 
introduces the concept of generic event and an event layer 
abstraction which aim at dealing among others with these 
issues 
 sentient object composition 
in this section we analyze the most relevant issues related 
with the sentient object paradigm and the construction of 
systems composed of sentient objects 
 component-based system construction 
sentient objects can take several different forms they 
can simply be software-based components but they can also 
comprise mechanical and or hardware parts amongst which 
the very sensorial apparatus that substantiates sentience 
mixed with software components to accomplish their task 
we refine this notion by considering a sentient object as an 
encapsulating entity a component with internal logic and 
active processing elements able to receive transform and 
produce new events this interface hides the internal 
hardware software structure of the object which may be 
complex and shields the system from the low-level functional 
and temporal details of controlling a specific sensor or 
actuator 
furthermore given the inherent complexity of the 
envisaged applications the number of simultaneous input events 
and the internal size of sentient objects may become too 
large and difficult to handle therefore it should be 
possible to consider the hierarchical composition of sentient 
objects so that the application logic can be separated across as 
few or as many of these objects as necessary on the other 
hand composition of sentient objects should normally be 
constrained by the actual hardware component s structure 
preventing the possibility of arbitrarily composing sentient 
objects this is illustrated in figure where a sentient 
object is internally composed of a few other sentient 
objects each of them consuming and producing events some 
of which only internally propagated 
observing the figure and recalling our previous discussion 
about the possible interactions we identify all of them here 
an object-to-environment interaction occurs between the 
object controlling a wlan transmitter and some wlan 
receiver in the environment an environment-to-object 
interaction takes place when the object responsible for the gps 
 
g p s 
r e c e p t i o n 
w i r e l e s s 
t r a n s m i s s i o n 
d o p p l e r 
r a d a r 
p h y s i c a l f e e d b a c k 
o b j e c t s b o d y 
i n t e r n a l n e t w o r k 
figure component-aware sentient object 
composition 
signal reception uses the information transmitted by the 
satellites finally explicit object-to-object interactions occur 
internally to the container object through an internal 
communication network additionally it is interesting to 
observe that implicit communication can also occur whether 
the physical feedback develops through the environment 
internal to the container object as depicted or through the 
environment external to this object however there is a 
subtle difference between both cases while in the former the 
feedback can only be perceived by objects internal to the 
container bounding the extent to which consistency must 
be ensured such bounds do not exist in the latter in fact 
the notion of sentient object as an encapsulating entity may 
serve other purposes e g the confinement of feedback and 
of the propagation of events beyond the mere hierarchical 
composition of objects 
to give a more concrete example of such component-aware 
object composition we consider a scenario of cooperating 
robots each robot is made of several components 
corresponding for instance to axis and manipulator controllers 
together with the control software each of these controllers 
may be a sentient object on the other hand a robot itself 
is a sentient object composed of the objects materialized 
by the controllers and the environment internal to its own 
structure or body 
this means that it should be possible to define 
cooperation activities using the events produced by robot sentient 
objects without the need to know the internal structure of 
robots or the events produced by body objects or by smart 
sensors within the body from an engineering point of view 
however this also means that robot sentient object may 
have to generate new events that reflect its internal state 
which requires the definition of a gateway to make the bridge 
between the internal and external environments 
 encapsulation and scoping 
now an important question is about how to represent and 
disseminate events in a large scale networked world as we 
have seen above any event generated by a sentient object 
could in principle be visible anywhere in the system and 
thus received by any other sentient object however there 
are substantial obstacles to such universal interactions 
originating from the components heterogeneity in such a 
largescale setting 
firstly the components may have severe performance 
constraints particularly because we want to integrate smart 
sensors and actuators in such an architecture secondly the 
bandwidth of the participating networks may vary largely 
such networks may be low power low bandwidth fieldbuses 
or more powerful wireless networks as well as high speed 
backbones thirdly the networks may have widely different 
reliability and timeliness characteristics consider a 
platoon of cooperating vehicles inside a vehicle there may be 
a field-bus like can ttp a or lin with a 
comparatively low bandwidth on the other hand the 
vehicles are communicating with others in the platoon via a 
direct wireless link finally there may be multiple platoons 
of vehicles which are coordinated by an additional wireless 
network layer 
at the abstraction level of sentient objects such 
heterogeneity is reflected by the notion of body-vs-environment 
at the network level we assume the wan-of-cans 
structure to model the different networks the notion of 
body and environment is derived from the recursively 
defined component-based object model a body is similar to 
a cell membrane and represents a quality of service 
container for the sentient objects inside on the network level 
it may be associated with the components coupled by a 
certain can a can defines the dissemination quality which 
can be expected by the cooperating objects 
in the above example a vehicle may be a sentient object 
whose body is composed of the respective lower level objects 
 sensors and actuators which are connected by the internal 
network see figure correspondingly the platoon can be 
seen itself as an object composed of a collection of 
cooperating vehicles its body being the environment encapsulated by 
the platoon zone at the network level the wireless network 
represents the respective can however several platoons 
united by their cans may interact with each other and 
objects further away through some wider-range possible fixed 
networking substrate hence the concept of wan-of-cans 
the notions of body-environment and wan-of-cans are 
very useful when defining interaction properties across such 
boundaries their introduction obeyed to our belief that 
a single mechanism to provide quality measures for 
interactions is not appropriate instead a high level construct 
for interaction across boundaries is needed which allows to 
specify the quality of dissemination and exploits the 
knowledge about body and environment to assess the feasibility of 
quality constraints as we will see in the following section 
the notion of an event channel represents this construct in 
our architecture it disseminates events and allows the 
network independent specification of quality attributes these 
attributes must be mapped to the respective properties of 
the underlying network structure 
 a generic events architecture 
in order to successfully apply event-based object-oriented 
models addressing the challenges enumerated in the 
introduction of this paper it is necessary to use adequate 
architectural constructs which allow the enforcement of 
fundamental properties such as timeliness or reliability 
we propose the generic-events architecture gear 
depicted in figure which we briefly describe in what 
follows for a more detailed description please refer to 
the l-shaped structure is crucial to ensure some of the 
properties described 
environment the physical surroundings remote and close 
solid and etherial of sentient objects 
 
c o m m sc o m m sc o m m s 
t r a n s l a t i o n 
l a y e r 
t r a n s l a t i o n 
l a y e r 
b o d y 
e n v i r o n m e n t 
b o d y 
e n v i r o n m e n t 
b o d y 
e n v i r o n m e n t 
 i n c l u d i n g o p e r a t i o n a l n e t w o r k 
 o f o b j e c t o r o b j e c t c o m p o u n d 
t r a n s l a t i o n 
l a y e r 
t r a n s l a t i o n 
s e n t i e n t 
o b j e c t 
s e n t i e n t 
o b j e c t 
s e n t i e n t 
o b j e c t 
r e g u l a r n e t w o r k 
c o n s u m ep r o d u c e 
e v e n t 
l a y e r 
e v e n t 
l a y e r 
e v e n t 
l a y e r 
s e n t i e n t 
o b j e c t 
figure generic-events architecture 
body the physical embodiment of a sentient object e g 
the hardware where a mechatronic controller resides 
the physical structure of a car note that due to the 
compositional approach taken in our model part of 
what is environment to a smaller object seen 
individually becomes body for a larger containing object 
in fact the body is the internal environment of the 
object this architecture layering allows composition 
to take place seamlessly in what concerns information 
flow 
inside a body there may also be implicit knowledge 
which can be exploited to make interaction more 
efficient like the knowledge about the number of 
cooperating entities the existence of a specific 
communication network or the simple fact that all components are 
co-located and thus the respective events do not need 
to specify location in their context attributes such 
intrinsic information is not available outside a body and 
therefore more explicit information has to be carried 
by an event 
translation layer the layer responsible for physical event 
transformation from to their native form to event 
channel dialect between environment body and an event 
channel essentially one doing observation and 
actuation operations on the lower side and doing 
transactions of event descriptions on the other on the lower 
side this layer may also interact with dumb sensors or 
actuators therefore talking the language of the 
specific device these interactions are done through 
operational networks hence the antenna symbol in the 
figure 
event layer the layer responsible for event propagation 
in the whole system through several event channels 
 ec in concrete terms this layer is a kind of 
middleware that provides important event-processing services 
which are crucial for any realistic event-based system 
for example some of the services that imply the 
processing of events may include publishing subscribing 
discrimination zoning filtering fusion tracing and 
queuing 
communication layer the layer responsible for 
wrapping events as a matter of fact event descriptions 
in ec dialect into carrier event-messages to be 
transported to remote places for example a 
sensing event generated by a smart sensor is wrapped in 
an event-message and disseminated to be caught by 
whoever is concerned the same holds for an 
actuation event produced by a sentient object to be 
delivered to a remote smart actuator likewise this may 
apply to an event-message from one sentient object 
to another dumb sensors and actuators do not send 
event-messages since they are unable to understand 
the ec dialect they do not have an event layer 
neither a communication layer- they communicate if 
needed through operational networks 
regular network this is represented in the horizontal 
axis of the block diagram by the communication layer 
which encompasses the usual lan tcp ip and 
realtime protocols desirably augmented with reliable and or 
ordered broadcast and other protocols 
the gear introduces some innovative ideas in distributed 
systems architecture while serving an object model based 
on production and consumption of generic events it treats 
events produced by several sources environment body 
objects in a homogeneous way this is possible due to the use 
of a common basic dialect for talking about events and due 
to the existence of the translation layer which performs the 
necessary translation between the physical representation of 
a real-time entity and the ec compliant format crucial to 
the architecture is the event layer which uses event channels 
to propagate events through regular network infrastructures 
the event layer is realized by the cosmic middleware as 
described in section 
 information flow in gear 
the flow of information external environment and 
computational part is seamlessly supported by the l-shaped 
architecture it occurs in a number of different ways which 
demonstrates the expressiveness of the model with regard to 
the necessary forms of information encountered in real-time 
cooperative and embedded systems 
smart sensors produce events which report on the 
environment body sensors produce events which report on 
the body they are disseminated by the local event layer 
module on an event channel ec propagated through the 
regular network to any relevant remote event layer 
modules where entities showed an interest on them normally 
sentient objects attached to the respective local event layer 
modules 
sentient objects consume events they are interested in 
process them and produce other events some of these 
events are destined to other sentient objects they are 
published on an ec using the same ec dialect that serves e g 
sensor originated events however these events are 
semantically of a kind such that they are to be subscribed by 
the relevant sentient objects for example the sentient 
objects composing a robot controller system or at a higher 
level the sentient objects composing the actual robots in 
 
a cooperative application smart actuators on the other 
hand merely consume events produced by sentient objects 
whereby they accept and execute actuation commands 
alternatively to talking to other sentient objects sentient 
objects can produce events of a lower level for example 
actuation commands on the body or environment they 
publish these exactly the same way on an event channel 
through the local event layer representative now if these 
commands are of concern to local actuator units e g body 
including internal operational networks they are passed on 
to the local translation layer if they are of concern to a 
remote smart actuator they are disseminated through the 
distributed event layer to reach the former in any case 
if they are also of interest to other entities such as other 
sentient objects that wish to be informed of the actuation 
command then they are also disseminated through the ec 
to these sentient objects 
a key advantage of this architecture is that event-messages 
and physical events can be globally ordered if necessary 
since they all pass through the event layer the model also 
offers opportunities to solve a long lasting problem in 
realtime computer control and embedded systems the 
inconsistency between message passing and the feedback loop 
information flow subsystems 
 temporal aspects of the 
interactions 
any interaction needs some form of predictability if safety 
critical scenarios are considered as it is done in cortex 
temporal aspects become crucial and have to be made 
explicit the problem is how to define temporal constraints 
and how to enforce them by appropriate resource usage in a 
dynamic ad-hoc environment in an system where 
interactions are spontaneous it may be also necessary to determine 
temporal properties dynamically to do this the respective 
temporal information must be stated explicitly and available 
during run-time secondly it is not always ensured that 
temporal properties can be fulfilled in these cases 
adaptations and timing failure notification must be provided 
 in most real-time systems the notion of a deadline 
is the prevailing scheme to express and enforce timeliness 
however a deadline only weakly reflect the temporal 
characteristics of the information which is handled secondly a 
deadline often includes implicit knowledge about the system 
and the relations between activities in a rather well defined 
closed environment it is possible to make such implicit 
assumptions and map these to execution times and deadlines 
e g the engineer knows how long a vehicle position can be 
used before the vehicle movement outdates this information 
thus he maps this dependency between speed and position 
on a deadline which then assures that the position error 
can be assumed to be bounded in a open environment this 
implicit mapping is not possible any more because as an 
obvious reason the relation between speed and position and 
thus the error bound cannot easily be reverse engineered 
from a deadline therefore our event model includes 
explicit quality attributes which allow to specify the temporal 
attributes for every individual event this is of course an 
overhead compared to the use of implicit knowledge but in 
a dynamic environment such information is needed 
to illustrate the problem consider the example of the 
position of a vehicle a position is a typical example for 
time value entity thus the position is useful if we 
can determine an error bound which is related to time e g if 
we want a position error below meters to establish a safety 
property between cooperating cars moving with m sec 
the position has a validity time of seconds in a time 
value entity entity we can trade time against the precision 
of the value this is known as value over time and time over 
value once having established the time-value relation 
and captured in event attributes subscribers of this event 
can locally decide about the usefulness of an information in 
the gear architecture temporal validity is used to reason 
about safety properties in a event-based system we 
will briefly review the respective notions and see how they 
are exploited in our cosmic event middleware 
consider the timeline of generating an event representing 
some real-time entity from its occurrence to the 
notification of a certain sentient object figure the real-time 
entity is captured at the sensor interface of the system and 
has to be transformed in a form which can be treated by a 
computer during the time interval t the sensor reads the 
real-time entity and a time stamp is associated with the 
respective value the derived time value entity represents 
an observation it may be necessary to perform substantial 
local computations to derive application relevant 
information from the raw sensor data however it should be noted 
that the time stamp of the observation is associated with 
the capture time and thus independent from further signal 
processing and event generation this close relationship 
between capture time and the associated value is supported by 
smart sensors described above 
the processed sensor information is assembled in an event 
data structure after ts to be published to an event channel 
as is described later the event includes the time stamp of 
generation and the temporal validity as attributes 
the temporal validity is an application defined measure 
for the expiration of a time value as we explained in 
the example of a position above it may vary dependent on 
application parameters temporal validity is a more general 
concept than that of a deadline it is independent of a 
certain technical implementation of a system while deadlines 
may be used to schedule the respective steps in an event 
generation and dissemination a temporal validity is an 
intrinsic property of a time value entity carried in an event 
a temporal validity allows to reason about the usefulness 
of information and is beneficial even in systems in which 
timely dissemination of events cannot be enforced because 
it enables timing failure detection at the event consumer it 
is obvious that deadlines or periods can be derived from the 
temporal validity of an event to set a deadline knowledge 
of an implementation worst case execution times or 
message dissemination latencies is necessary thus in the 
timeline of figure every interval may have a deadline event 
dissemination through soft real-time channels in cosmic 
exploits the temporal validity to define dissemination 
deadlines quality attributes can be defined for instance in 
terms of validity interval omission degree pairs these 
allow to characterize the usefulness of the event for a certain 
application in a certain context because of that quality 
attributes of an event clearly depend on higher level issues 
such as the nature of the sentient object or of the smart 
sensor that produced the event for instance an event 
containing an indication of some vehicle speed must have 
different quality attributes depending on the kind of vehicle 
 
real-world 
event 
observation 
 time stamp value 
event generated 
ready to be transmitted 
event 
received 
notification 
 to 
t 
event 
producer communication network 
event 
consumer 
event channel 
push event 
 ts tm tt tn 
 t o t i m e t o o b t a i n a n o b s e r v a t i o n 
 t s t i m e t o p r o c e s s s e n s o r r e a d i n g 
 t m t i m e t o a s s e m b l e a n e v e n t m e s s a g e 
 t t t i m e t o t r a n s f e r t h e e v e n t o n t h e r e g u l a r n e t w o r k 
 t n t i m e f o r n o t i f i c a t i o n o n t h e c o n s u m e r s i t e 
figure event processing and dissemination 
from which it originated or depending on its current speed 
the same happens with the position event of the car 
example above whose validity depends on the current speed 
and on a predefined required precision however since 
quality attributes are strictly related with the semantics of the 
application or at least with some high level knowledge of 
the purpose of the system from which the validity of the 
information can be derived the definition of these quality 
attributes may be done by exploiting the information 
provided at the programming interface therefore it is 
important to understand how the system programmer can 
specify non-functional requirements at the api and how these 
requirements translate into quality attributes assigned to 
events while temporal validity is identified as an intrinsic 
event property which is exploited to decide on the 
usefulness of data at a certain point in time it is still necessary 
to provide a communication facility which can disseminate 
the event before the validity is expired 
in a wan-of-cans network structure we have to cope 
with very different network characteristics and quality of 
service properties therefore when crossing the network 
boundaries the quality of service guarantees available in a 
certain network will be lost and it will be very hard costly 
and perhaps impossible to achieve these properties in the 
next larger area of the wan-of cans structure cortex 
has a couple of abstractions to cope with this situation 
 network zones body environment which have been discussed 
above from the temporal point of view we need a high 
level abstraction like the temporal validity for the 
individual event now to express our quality requirements of the 
dissemination over the network the bound coverage pair 
introduced in relation with the tcb seems to be an 
appropriate approach it considers the inherent uncertainty 
of networks and allows to trade the quality of dissemination 
against the resources which are needed in relation with 
the event channel model discussed later the bound 
coverage pair allows to specify the quality properties of an event 
channel independently of specific technical issues given 
the typical environments in which sentient applications will 
operate where it is difficult or even impossible to provide 
timeliness or reliability guarantees we proposed an 
alternative way to handle non-functional application requirements 
in relation with the tcb approach the proposed 
approach exploits intrinsic characteristics of applications such 
as fail-safety or time-elasticity in order to secure qos 
specifications of the form bound coverage instead of 
constructing systems that rely on guaranteed bounds the idea 
is to use possibly changing bounds that are secured with a 
constant probability all over the execution this obviously 
requires an application to be able to adapt to changing 
conditions and or changing bounds or if this is not possible 
to be able to perform some safety procedures when the 
operational conditions degrade to an unbearable level the 
bounds we mentioned above refer essentially to timeliness 
bounds associated to the execution of local or distributed 
activities or combinations thereof from these bounds it is 
then possible to derive the quality attributes in particular 
validity intervals that characterize the events published in 
the event channel 
 the role of smart sensors and actuators 
smart devices encapsulate hardware software and 
mechanical components and provide information and a set of 
well specified functions and which are closely related to 
the interaction with the environment the built-in 
computational components and the network interface enable the 
implementation of a well-defined high level interface that 
does not just provide raw transducer data but a processed 
application-related set of events moreover they exhibit an 
autonomous spontaneous behaviour they differ from 
general purpose nodes because they are dedicated to a certain 
functionality which complies to their sensing and 
actuating capabilities while general purpose node may execute any 
program 
concerning the sentient object model smart sensors and 
actuators may be basic sentient objects themselves 
consuming events from the real-world environment and producing 
the respective generic events for the system s event layer or 
 
vice versa consuming a generic event and converting it to a 
real-world event by an actuation smart components 
therefore constitute the periphery i e the real-world interface of 
a more complex sentient object the model of sentient 
objects also constitutes the framework to built more complex 
virtual sensors by relating multiple primary i e sensors 
which directly sense a physical entity sensors 
smart components translate events of the environment 
to an appropriate form available at the event layer or vice 
versa transform a system event into an actuation for smart 
components we can assume that 
 smart components have dedicated resources to 
perform a specific function 
 these resources are not used for other purposes during 
normal real-time operation 
 no local temporal conflicts occur that will change the 
observable temporal behaviour 
 the functions of a component can usually only be 
changed during a configuration procedure which is not 
performed when the component is involved in critical 
operations 
 an observation of the environment as a time value 
pair can be obtained with a bounded jitter in time 
many predictability and scheduling problems arise from 
the fact that very low level timing behaviours have to be 
handled on a single processor here temporal 
encapsulation of activities is difficult because of the possible side 
effects when sharing a single processor resource consider the 
control of a simple ir-range detector which is used for 
obstacle avoidance dependent on its range and the speed of 
a vehicle it has to be polled to prevent the vehicle from 
crashing into an obstacle on a single central processor 
this critical activity has to be coordinated with many 
similar possibly less critical functions it means that a very 
fine grained schedule has to be derived based purely on the 
artifacts of the low level device control in a smart 
sensor component all this low level timing behaviour can be 
optimized and encapsulated thus we can assume temporal 
encapsulation similar to information hiding in the functional 
domain of course there is still the problem to guarantee 
that an event will be disseminated and recognized in due 
time by the respective system components but this relates 
to application related events rather than the low artifacts of 
a device timing the main responsibility to provide 
timeliness guarantees is shifted to the event layer where these 
events are disseminated smart sensors thus lead to network 
centric system model the network constitute the shared 
resource which has to be scheduled in a predictable way the 
cosmic middleware introduced in the next section is an 
approach to provide predictable event dissemination for a 
network of smart sensors and actuators 
 an event model andmiddleware 
for cooperating smart devices 
an event model and a middleware suitable for smart 
components must support timely and reliable communication 
and also must be resource efficient cosmic 
 cooperating smart devices is aimed at supporting the 
interaction between those components according to the concepts 
introduced so far based on the model of a wan-of-cans 
we assume that the components are connected to some form 
of can as a fieldbus or a special wireless sensor network 
which provides specific network properties e g a fieldbus 
developed for control applications usually includes 
mechanisms for predictable communication while other networks 
only support a best effort dissemination a gateway 
connects these cans to the next level in the network hierarchy 
the event system should allow the dynamic interaction over 
a hierarchy of such networks and comply with the overall 
cortex generic event model events are typed 
information carriers and are disseminated in a publisher subscriber 
style which is particularly suitable because it 
supports generative anonymous communication and does 
not create any artificial control dependencies between 
producers of information and the consumers this decoupling 
in space no references or names of senders or receivers are 
needed for communication and the flow decoupling no 
control transfer occurs with a data transfer are well known 
 and crucial properties to maintain autonomy of 
components and dynamic interactions 
it is obvious that not all networks can provide the same 
qos guarantees and secondly applications may have widely 
differing requirements for event dissemination 
additionally when striving for predictability resources have to be 
reserved and data structures must be set up before 
communication takes place thus these things can not predictably 
be made on the fly while disseminating an event therefore 
we introduced the notion of an event channel to cope with 
differing properties and requirements and have an object to 
which we can assign resources and reservations the 
concept of an event channel is not new however it has 
not yet been used to reflect the properties of the underlying 
heterogeneous communication networks and mechanisms as 
described by the gear architecture rather existing event 
middleware allows to specify the priorities or deadlines of 
events handled in an event server event channels allow 
to specify the communication properties on the level of the 
event system in a fine grained way an event channel is 
defined by 
event channel subject quality attributelist 
handlers 
the subject determines the types of events event which 
may be issued to the channel the quality attributes model 
the properties of the underlying communication network 
and dissemination scheme these attributes include latency 
specifications dissemination constraints and reliability 
parameters the notion of zones which represent a guaranteed 
quality of service in a subnetwork support this approach 
our goal is to handle the temporal specifications as bound 
coverage pairs orthogonal to the more technical 
questions of how to achieve a certain synchrony property of the 
dissemination infrastructure currently we support 
quality attributes of event channels in a can-bus environment 
represented by explicit synchrony classes 
the cosmic middleware maps the channel properties to 
lower level protocols of the regular network based on our 
previous work on predictable protocols for the can-bus 
cosmic defines an abstract network which provides hard 
soft and non real-time message classes 
correspondingly we distinguish three event channel classes 
according to their synchrony properties hard real-time 
channels soft real-time channels and non-real-time channels 
hard real-time channels hrtc guarantee event 
propagation within the defined time constraints in the presence 
 
of a specified number of omission faults hrtecs are 
supported by a reservation scheme which is similar to the scheme 
used in time-triggered protocols like ttp ttp a 
and ttcan however a substantial advantage over a 
tdma scheme is that due to can-bus properties 
bandwidth which was reserved but is not needed by a hrtec 
can be used by less critical traffic 
soft real-time channels srtc exploit the temporal 
validity interval of events to derive deadlines for scheduling 
the validity interval defines the point in time after which 
an event becomes temporally inconsistent therefore in a 
real-time system an event is useless after this point and may 
me discarded the transmission deadline dl is defined as 
the latest point in time when a message has to be 
transmitted and is specified in a time interval which is derived from 
the expiration time 
tevent ready dl texpiration − ∆notification 
texpiration defines the point in time when the temporal 
validity expires ∆notification is the expected end-to-end 
latency which includes the transfer time over the network and 
the time the event may be delayed by the local event 
handling in the nodes as said before event deadlines are used 
to schedule the dissemination by srtecs however 
deadlines may be missed in transient overload situations or due 
to arbitrary arrival times of events on the publisher side 
the application s exception handler is called whenever the 
event deadline expires before event transmission at this 
point in time the event is also not expected to arrive at the 
subscriber side before the validity expires therefore the 
event is removed from the sending queue on the subscriber 
side the expiration time is used to schedule the delivery of 
the event if the event cannot be delivered until its 
expiration time it is removed from the respective queues allocated 
by the cosmic middleware this prevents the 
communication system to be loaded by outdated messages 
non-real-time channels do not assume any temporal 
specification and disseminate events in a best effort manner an 
instance of an event channel is created locally whenever a 
publisher makes an announcement for publication or a 
subscriber subscribes for an event notification when a 
publisher announces publication the respective data structures 
of an event channel are created by the middleware when 
a subscriber subscribes to an event channel it may specify 
context attributes of an event which are used to filter events 
locally e g a subscriber may only be interested in events 
generated at a certain location additionally the subscriber 
specifies quality properties of the event channel a more 
detailed description of the event channels can be found in 
currently cosmic handles all event channels which 
disseminate events beyond the can network boundary as non 
real-time event channels this is mainly because we use the 
tcp ip protocol to disseminate events over wireless links 
or to the standard ethernet however there are a 
number of possible improvements which can easily be integrated 
in the event channel model the timely computing base 
 tcb can be exploited for timing failure detection and 
thus would provide awareness for event dissemination in 
environments where timely delivery of events cannot be 
enforced additionally there are wireless protocols which can 
provide timely and reliable message delivery which 
may be exploited for the respective event channel classes 
events are the information carriers which are exchanged 
between sentient objects through event channels to cope 
with the requirements of an ad-hoc environment an event 
includes the description of the context in which it has been 
generated and quality attributes defining requirements for 
dissemination this is particularly important in an open 
dynamic environment where an event may travel over 
multiple networks an event instance is specified as 
event subject context attributelist 
quality attributelist contents 
a subject defines the type of the event and is related 
to the event contents it supports anonymous 
communication and is used to route an event the subject has to 
match to the subject of the event channel through which 
the event is disseminated attributes are complementary 
to the event contents they describe individual functional 
and non-functional properties of the event the context 
attributes describe the environment in which the event has 
been generated e g a location an operational mode or a 
time of occurrence the quality attributes specify 
timeliness and dependability aspects in terms of validity 
interval omission degree pairs the validity interval defines the 
point in time after which an event becomes temporally 
inconsistent as described above the temporal validity 
can be mapped to a deadline however usually a 
deadline is an engineering artefact which is used for scheduling 
while the temporal validity is a general property of a time 
value entity in a environment where a deadline cannot 
be enforced a consumer of an event eventually must decide 
whether the event still is temporally consistent i e 
represents a valid time value entity 
 the architecture of the cosmic 
middleware 
on the architectural level cosmic distinguish three 
layers roughly depicted in figure two of them the event 
layer and the abstract network layer are implemented by the 
cosmic middleware the event layer provides the api for 
the application and realizes the abstraction of event and 
event channels 
the abstract network implements real-time message classes 
and adapts the quality requirements to the underlying real 
network an event channel handler resides in every node it 
supports the programming interface and provides the 
necessary data structures for event-based communication 
whenever an object subscribes to a channel or a publisher 
announces a channel the event channel handler is involved it 
initiates the binding of the channel s subject which is 
represented by a network independent unique identifier to an 
address of the underlying abstract network to enable 
communication the event channel handler then tightly 
cooperates with the respective handlers of the abstract network 
layer to disseminate events or receive event notifications it 
should be noted that the qos properties of the event layer 
in general depend on what the abstract network layer can 
provide thus it may not always be possible to e g support 
hard real-time event channels because the abstract network 
layer cannot provide the respective guarantees in we 
describe the protocols and services of the abstract network 
layer particularly for the can-bus 
as can be seen in figure the hard real-time hrt 
message class is supported by a dedicated handler which is 
able to provide the time triggered message dissemination 
 
 
event 
notifications 
hrt-msg 
list 
srt-msg 
queue 
nrt-msg 
queue 
hrt-msg 
calendar 
hrtc 
handler 
s nrtc 
handler 
abstract network 
layer 
can layer 
rx buffer tx buffer 
rx tx error 
interrupts 
event channel 
specs 
event layer 
send 
messages 
exception 
notification 
exceptions 
notifications 
ech 
event channel 
handler 
p u b l i s h a n n o u n c e s u b s c r i b e 
b i n d i n g 
p r o t o c o l 
c o n f i g 
p r o t o c o l 
global 
time 
service 
event 
notifications 
hrt-msg 
list 
srt-msg 
queue 
nrt-msg 
queue 
hrt-msg 
calendar 
hrtc 
handler 
s nrtc 
handler 
abstract network 
layer 
can layer 
rx buffer tx buffer 
rx tx error 
interrupts 
event channel 
specs 
event layer 
send 
messages 
exception 
notification 
exceptions 
notifications 
ech 
event channel 
handler 
p u b l i s h a n n o u n c e s u b s c r i b e 
b i n d i n g 
p r o t o c o l 
c o n f i g 
p r o t o c o l 
global 
time 
service 
figure architecture layers of cosmic 
the hrt handler maintains the hrt message list which 
contains an entry for each local hrt message to be sent 
the entry holds the parameters for the message the 
activation status and the binding information messages are 
scheduled on the bus according to the hrt message 
calendar which comprises the precise start time for each time slot 
allocated for a message soft real-time message queues order 
outgoing messages according to their transmission deadlines 
derived from the temporal validity interval if the 
transmission deadline is exceeded the event message is purged out of 
the queue the respective application is notified via the 
exception notification interface and can take actions like trying 
to publish the event again or publish it to a channel of 
another class incoming event messages are ordered according 
to their temporal validity if an event message arrive the 
respective applications are notified at the moment an 
outdated message is deleted from the queue and if the queue 
runs out of space the oldest message is discarded 
however there are other policies possible depending on event 
attributes and available memory space non real-time 
messages are fifo ordered in a fixed size circular buffer 
 status of cosmic 
the goal for developing cosmic was to provide a 
platform to seamlessly integrate smart tiny components in a 
large system therefore cosmic should run also on the 
small resource constraint devices which are built around 
 bit or even -bit micro-controllers the distributed 
cosmic middleware has been implemented and tested on 
various platforms under rt-linux we support the real-time 
channels over the can bus as described above the 
rtlinux version runs on pentium processors and is currently 
evaluated before we intent to port it to a smart sensor or 
actuator for the interoperability in a wan-of-cans 
environment we only provide non real-time channels at the 
moment this version includes a gateway between the 
canbus and a tcp ip network it allows us to use a 
standard wireless network the non real-time version of 
cosmic is available on linux rt-linux and on the 
microcontroller families c infineon and hc motorola 
both micro-controllers have an on-board can controller 
and thus do not require additional hardware components for 
the network the memory footprint of cosmic is about 
kbyte on a c and slightly more on the hc where it 
fits into the on-board flash memory without problems 
because only a few channels are required on such a smart sensor 
or actuator component the requirement of ram which is 
a scarce resource on many single chip systems to hold the 
dynamic data structures of a channel is low the cosmic 
middleware makes it very easy to include new smart sensors 
in an existing system particularly the application running 
on a smart sensor to condition and process the raw physical 
data must not be aware of any low level network specific 
details it seamlessly interacts with other components of the 
system exclusively via event channels 
the demo example briefly described in the next chapter 
is using a distributed infrastructure of tiny smart sensors 
and actuators directly cooperating via event channels over 
heterogeneous networks 
 an illustrative example 
a simple example for many important properties of the 
proposed system showing the coordination through the 
environment and events disseminated over the network is the 
demo of two cooperating robots depicted in figure 
each robot is equipped with smart distance sensors speed 
sensors acceleration sensors and one of the robots the guide 
 kurt in front figure has a tracking camera 
allowing to follow a white line the robots form a wan-of-cans 
system in which their local cans are interconnected via a 
wireless network cosmic provides the event layer 
for seamless interaction the blind robot n n is 
searching the guide randomly whenever the blind robot detects 
 by its front distance sensors an obstacle it checks whether 
this may be the guide for this purpose it dynamically 
subscribes to the event channel disseminating distance events 
from rear distance sensors of the guide s and compares 
these with the distance events from its local front sensors 
if the distance is approximately the same it infers that it 
is really behind a guide now n n also subscribes to the 
event channels of the tracking camera and the speed sensors 
 
figure cooperating robots 
to follow the guide the demo application highlights the 
following properties of the system 
 dynamic interaction of robots which is not known in 
advance in principle any two a priori unknown robots 
can cooperate all what publishers and subscribers 
have to know to dynamically interact in this 
environment is the subject of the respective event class a 
problem will be to receive only the events of the robot 
which is closest a robot identity does not help much 
to solve this problem rather the position of the event 
generation entity which is captured in the respective 
attributes can be evaluated to filter the relevant event 
out of the event stream a suitable wireless protocol 
which uses proximity to filter events has been proposed 
by meier and cahill in the cortex project 
 interaction through the environment the 
cooperation between the robots is controlled by sensing the 
distance between the robots if the guide detects that 
the distance grows it slows down respectively if the 
blind robot comes too close it reduces its speed the 
local distance sensors produce events which are 
disseminated through a low latency highly predictable event 
channel the respective reaction time can be 
calculated as function of the speed and the distance of the 
robots and define a dynamic dissemination deadline 
for events thus the interaction through the 
environment will secure the safety properties of the 
application i e the follower may not crash into the guide and 
the guide may not loose the follower additionally the 
robots have remote subscriptions to the respective 
distance events which are used to check it with the local 
sensor readings to validate that they really follow the 
guide which they detect with their local sensors 
because there may be longer latencies and omissions this 
check occasionally will not be possible the 
unavailability of the remote events will decrease the quality 
of interaction and probably and slow down the robots 
but will not affect safety properties 
 cooperative sensing the blind robot subscribes to the 
events of the line tracking camera thus it can see 
through the eye of the guide because it knows the 
distance to the guide and the speed as well it can foresee 
the necessary movements the proposed system 
provides the architectural framework for such a 
cooperation the respective sentient object controlling the 
actuation of the robot receives as input the position 
and orientation of the white line to be tracked in the 
case of the guide robot this information is directly 
delivered as a body event with a low latency and a high 
reliability over the internal network for the follower 
robot the information comes also via an event channel 
but with different quality attributes these quality 
attributes are reflected in the event channel description 
the sentient object controlling the actuation of the 
follower is aware of the increased latency and higher 
probability of omission 
 conclusion and future work 
the paper addresses problems of building large distributed 
systems interacting with the physical environment and 
being composed from a huge number of smart components 
we cannot assume that the network architecture in such a 
system is homogeneous rather multiple edge- networks 
are fused to a hierarchical heterogeneous wide area 
network they connect the tiny sensors and actuators 
perceiving the environment and providing sentience to the 
application additionally mobility and dynamic deployment of 
components require the dynamic interaction without fixed 
a priori known addressing and routing schemes the work 
presented in the paper is a contribution towards the 
seamless interaction in such an environment which should not be 
restricted by technical obstacles rather it should be 
possible to control the flow of information by explicitly specifying 
functional and temporal dissemination constraints 
the paper presented the general model of a sentient 
object to describe composition encapsulation and interaction 
in such an environment and developed the generic event 
architecture gear which integrates the interaction through 
the environment and the network while appropriate 
abstractions and interaction models can hide the functional 
heterogeneity of the networks it is impossible to hide the 
quality differences therefore one of the main concerns is 
to define temporal properties in such an open 
infrastructure the notion of an event channel has been introduced 
which allows to specify quality aspects explicitly they can 
be verified at subscription and define a boundary for event 
dissemination the cosmic middleware is a first attempt 
to put these concepts into operation cosmic allows the 
interoperability of tiny components over multiple network 
boundaries and supports the definition of different real-time 
event channel classes 
there are many open questions that emerged from our 
work one direction of future research will be the inclusion 
of real-world communication channels established between 
sensors and actuators in the temporal analysis and the 
ordering of such events in a cause-effect chain additionally 
the provision of timing failure detection for the adaptation 
of interactions will be in the focus of our research to reduce 
network traffic and only disseminate those events to the 
subscribers which they are really interested in and which have 
a chance to arrive timely the encapsulation and scoping 
schemes have to be transformed into respective multi-level 
filtering rules the event attributes which describe aspects 
of the context and temporal constraints for the 
dissemination will be exploited for this purpose finally it is intended 
to integrate the results in the cosmic middleware to 
enable experimental assessment 
 
 references 
 j bacon k moody j bates r hayton c ma 
a mcneil o seidel and m spiteri generic support 
for distributed applications ieee computer 
 - 
 l b becker m gergeleit s schemmer and e nett 
using a flexible real-time scheduling strategy in a 
distributed embedded application in proc of the th 
ieee international conference on emerging 
technologies and factory automation etfa lisbon 
portugal sept 
 n carriero and d gelernter linda in context 
communications of the acm - apr 
 a casimiro ed preliminary definition of cortex 
system architecture cortex project 
ist- - deliverable d apr 
 cortex project annex description of work 
technical report cortex project ist- - 
oct http cortex di fc ul pt 
 r cunningham and v cahill time bounded medium 
access control for ad-hoc networks in proceedings of 
the second acm international workshop on principles 
of mobile computing pomc pages - toulouse 
france oct acm press 
 p t eugster p felber r guerraoui and a -m 
kermarrec the many faces of publish subscribe 
technical report dsc id epfl lausanne 
switzerland 
 t f¨uhrer b m¨uller w dieterle f hartwich 
r hugel and m walther time triggered 
communication on can 
http www can-cia org can ttcan fuehrer pdf 
 r b gmbh can specification version technical 
report sept 
 t harrison d levine and d schmidt the design 
and performance of a real-time corba event service in 
proceedings of the conference on object oriented 
programming systems languages and applications 
 oopsla pages - atlanta georgia usa 
 acm press 
 j hightower and g borriello location systems for 
ubiquitous computing ieee computer - 
aug 
 a hopper the clifford paterson lecture 
sentient computing philosophical transactions of the 
royal society london - aug 
 j kaiser c mitidieri c brudna and c pereira 
cosmic a middleware for event-based interaction 
on can in proc ieee conference on emerging 
technologies and factory automation lisbon 
portugal sept 
 j kaiser and m mock implementing the real-time 
publisher subscriber model on the controller area 
network can in proceedings of the nd international 
symposium on object-oriented real-time distributed 
computing isorc saint-malo france may 
 k kim g jeon s hong t kim and s kim 
integrating subscription-based and connection-oriented 
communications into the embedded corba for 
the can bus in proceedings of the ieee real-time 
technology and application symposium may 
 h kopetz and g gr¨unsteidl ttp - a 
time-triggered protocol for fault-tolerant real-time 
systems technical report rr- - institut f¨ur 
technische informatik technische universit¨at wien 
treilstr a- vienna austria 
 h kopetz m holzmann and w elmenreich a 
universal smart transducer interface ttp a 
international journal of computer system science 
engineering mar 
 h kopetz and p ver´ıssimo real-time and 
dependability concepts in s j mullender editor 
distributed systems nd edition acm-press 
chapter pages - addison-wesley 
 s lankes a jabs and t bemmerl integration of a 
can-based connection-oriented communication model 
into real-time corba in workshop on parallel and 
distributed real-time systems nice france apr 
 
 local interconnect network lin specification 
package revision technical report nov 
 m livani j kaiser and w jia scheduling hard and 
soft real-time communication in the controller area 
network control engineering - 
 r meier and v cahill steam event-based 
middleware for wireless ad-hoc networks in proceedings 
of the international workshop on distributed 
event-based systems icdcs debs pages 
 - vienna austria 
 e nett and s schemmer reliable real-time 
communication in cooperative mobile applications 
ieee transactions on computers - feb 
 
 b oki m pfluegl a seigel and d skeen the 
information bus - an architecture for extensible 
distributed systems operating systems review 
 - 
 o m g omg corbaservices common object 
services specification - notification service 
specification version 
 o m g omg smart transducer interface initial 
submission june 
 p ver´ıssimo v cahill a casimiro k cheverst 
a friday and j kaiser cortex towards supporting 
autonomous and cooperating sentient entities in 
proceedings of european wireless florence italy 
feb 
 p ver´ıssimo and a casimiro the timely computing 
base model and architecture transactions on 
computers - special issue on asynchronous real-time 
systems - aug 
 p ver´ıssimo and a casimiro event-driven support of 
real-time sentient objects in proceedings of the th 
ieee international workshop on object-oriented 
real-time dependable systems guadalajara mexico 
jan 
 p ver´ıssimo and l rodrigues distributed systems for 
system architects kluwer academic publishers 
 
