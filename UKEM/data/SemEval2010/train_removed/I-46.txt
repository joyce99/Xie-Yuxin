modular interpreted systems 
wojciech jamroga 
department of informatics 
clausthal university of technology germany 
wjamroga in tu-clausthal de 
thomas ågotnes 
department of computer engineering 
bergen university college norway 
tag hib no 
abstract 
we propose a new class of representations that can be used for 
modeling and model checking temporal strategic and epistemic 
properties of agents and their teams our representations borrow the 
main ideas from interpreted systems of halpern fagin et al 
however they are also modular and compact in the way concurrent 
programs are we also mention preliminary results on model checking 
alternating-time temporal logic for this natural class of models 
categories and subject descriptors 
i artificial intelligence distributed artificial 
intelligencemultiagent systems i artificial intelligence knowledge 
representation formalisms and methods-modal logic 
general terms 
theory 
 introduction 
the logical foundations of multi-agent systems have received 
much attention in recent years logic has been used to represent 
and reason about e g knowledge time cooperation and 
strategic ability lately an increasing amount of research has 
focused on higher level representation languages for models of such 
logics motivated mainly by the need for compact representations 
and for representations that correspond more closely to the actual 
systems which are modeled multi-agent systems are open systems 
in the sense that agents interact with an environment only partially 
known in advance thus we need representations of models of 
multi-agent systems which are modular in the sense that a 
component such as an agent can be replaced removed or added without 
major changes to the representation of the whole model however 
as we argue in this paper few existing representation languages are 
both modular compact and computationally grounded on the one 
hand and allow for representing properties of both knowledge and 
strategic ability on the other 
in this paper we present a new class of representations for 
models of open multi-agent systems which are modular compact and 
come with an implicit methodology for modeling and designing 
actual systems 
the structure of the paper is as follows first in section we 
present the background of our work - that is logics that combine 
time knowledge and strategies more precisely modal logics that 
combine branching time knowledge and strategies under 
incomplete information we start with computation tree logic ctl then 
we add knowledge ctlk and then we discuss two variants of 
alternating-time temporal logic atl one for the perfect and one 
for the imperfect information case the semantics of logics like the 
ones presented in section are usually defined over explicit models 
 kripke structures that enumerate all possible global states of the 
system however enumerating these states is one of the things one 
mostly wants to avoid because there are too many of them even 
for simple systems thus we usually need representations that are 
more compact another reason for using a more specialized class of 
models is that general kripke structures do not always give enough 
help in terms of methodology both at the stage of design nor at 
implementation this calls for a semantics which is more grounded in 
the sense that the correspondence between elements of the model 
and the entities that are modeled is more immediate in section 
we present an overview of representations that have been used for 
modeling and model checking systems in which time action and 
possibly knowledge are important we mention especially 
representations used for theoretical analysis we point out that the 
compact and or grounded representations of temporal models do not 
play their role in a satisfactory way when agents strategies are 
considered finally in section we present our framework of 
modular interpreted systems mis and show where it fits in the 
picture we conclude with a somewhat surprising hypothesis that 
model checking ability under imperfect information for mis can be 
computationally cheaper than model checking perfect information 
until now almost all complexity results were distinctly in favor of 
perfect information strategies and the others were indifferent 
 logics of time knowledge and 
strategic ability 
first we present the logics ctl ctlk atl and atlir that are 
the starting point of our study 
 branching time ctl 
computation tree logic ctl includes operators for temporal 
properties of systems i e path quantifier e there is a path 
together with temporal operators f in the next state always 
from now on and u until 
every occurrence of a temporal 
operator is immediately preceded by exactly one path quantifier 
 this variant of the language is sometimes called vanilla ctl 
let π be a set of atomic propositions with a typical element p 
ctl formulae ϕ are defined as follows 
ϕ p ¬ϕ ϕ ∧ ϕ e fϕ e ϕ eϕ u ϕ 
the semantics of ctl is based on kripke models m st r π 
which include a nonempty set of states st a state transition relation 
r ⊆ st × st and a valuation of propositions π π → p st 
a path λ in m refers to a possible behavior or computation of 
system m and can be represented as an infinite sequence of states 
q q q such that qirqi for every i we denote 
the ith state in λ by λ i a q-path is a path that starts in q 
interpretation of a formula in a state q in model m is defined as follows 
m q p iff q ∈ π p 
m q ¬ϕ iff m q ϕ 
m q ϕ ∧ ψ iff m q ϕ and m q ψ 
m q e fϕ iff there is a q-path λ such that m λ ϕ 
m q e ϕ iff there is a q-path λ such that m λ i ϕ for 
every i ≥ 
m q eϕ u ψ iff there is a q-path λ and i ≥ such that 
m λ i ψ and m λ j ϕ for every ≤ j i 
 adding knowledge ctlk 
ctlk is a straightforward combination of ctl and standard 
epistemic logic let agt k be a set of agents with 
a typical element a epistemic logic uses operators for representing 
agents knowledge kaϕ is read as agent a knows that ϕ models 
of ctlk extend models of ctl with epistemic indistinguishability 
relations ∼a⊆ st × st one per agent we assume that all ∼a are 
equivalences the semantics of epistemic operators is defined as 
follows 
m q kaϕ iff m q ϕ for every q such that q ∼a q 
note that when talking about agents knowledge we 
implicitly assume that agents may have imperfect information about the 
actual current state of the world otherwise the notion of 
knowledge would be trivial this does not have influence on the way 
we model evolution of a system as a single unit but it will become 
important when particular agents and their strategies come to the 
fore 
 agents and their strategies atl 
alternating-time temporal logic atl is a logic for 
reasoning about temporal and strategic properties of open computational 
systems multi-agent systems in particular the language of atl 
consists of the following formulae 
ϕ p ¬ϕ ϕ ∧ ϕ a fϕ a ϕ a ϕ u ϕ 
where a ⊆ agt informally a ϕ says that agents a have a 
collective strategy to enforce ϕ it should be noted that the ctl path 
quantifiers a e can be expressed with ∅ agt respectively 
the semantics of atl is defined in so called concurrent game 
structures cgss a cgs is a tuple 
m agt st act d o π π 
 
additional operators a for every path and sometime in 
the future are defined in the usual way 
consisting of a set agt k of agents set st of states 
valuation of propositions π π → p st set act of atomic 
actions function d agt × st → p act indicates the actions 
available to agent a ∈ agt in state q ∈ st finally o is a 
deterministic transition function which maps a state q ∈ st and an 
action profile α αk ∈ actk 
 αi ∈ d i q to another state 
q o q α αk 
definition a memoryless strategy of agent a is a function 
sa st → act such that sa q ∈ d a q 
a collective strategy sa 
for a team a ⊆ agt specifies an individual strategy for each agent 
a ∈ a finally the outcome of strategy sa in state q is defined as 
the set of all computations that may result from executing sa from 
q on 
out q sa λ q q q q q and for every i 
there exists αi− 
 αi− 
k such that αi− 
a sa a qi− 
for each a ∈ a αi− 
a ∈ d a qi− for each a ∈ a and 
o qi− αi− 
 αi− 
k qi 
the semantics of cooperation modalities is as follows 
m q a fϕ iff there is a collective strategy sa such that 
for every λ ∈ out q sa we have m λ ϕ 
m q a ϕ iff there exists sa such that for every λ ∈ 
out q sa we have m λ i for every i ≥ 
m q a ϕ u ψ iff there exists sa such that for every λ ∈ 
out q sa there is a i ≥ for which m λ i ψ and 
m λ j ϕ for every ≤ j i 
 agents with imperfect information atlir 
as atl does not include incomplete information in its scope it 
can be seen as a logic for reasoning about agents who always have 
complete knowledge about the current state of the whole system 
atlir includes the same formulae as atl except that the 
cooperation modalities are presented with a subscript a ir indicates 
that they address agents with imperfect information and imperfect 
recall formally the recursive definition of atlir formulae is 
ϕ p ¬ϕ ϕ ∧ ϕ a ir 
fϕ a ir ϕ a irϕ u ϕ 
models of atlir concurrent epistemic game structures cegs 
can be defined as tuples m agt st act d o ∼ ∼k π π 
where agt st act d o π π is a cgs and ∼ ∼k are 
epistemic equivalence relations it is required that agents have the 
same choices in indistinguishable states q ∼a q implies d a q 
d a q atlir restricts the strategies that can be used by agents 
to uniform strategies i e functions sa st → act such that 
sa q ∈ d a q and if q ∼a q then sa q sa q a collective 
strategy is uniform if it contains only uniform individual strategies 
again the function out q sa returns the set of all paths that may 
result from agents a executing collective strategy sa from state q 
the semantics of atlir formulae can be defined as follows 
m q a ir 
fϕ iff there is a uniform collective strategy sa 
such that for every a ∈ a q such that q ∼a q and λ ∈ 
out sa q we have m λ ϕ 
 
this is a deviation from the original semantics of atl where 
strategies assign agents choices to sequences of states which 
suggests that agents can by definition recall the whole history of each 
game while the choice of one or another notion of strategy affects 
the semantics of the full atl 
 
 and most atl extensions e g for 
games with imperfect information it should be pointed out that 
both types of strategies yield equivalent semantics for pure atl 
 cf 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
m q a ir ϕ iff there exists sa such that for every a ∈ a 
q such that q ∼a q and λ ∈ out sa q we have m λ i 
for every i ≥ 
m q a irϕ u ψ iff there exist sa such that for every a ∈ a 
q such that q ∼a q and λ ∈ out sa q there is i ≥ for 
which m λ i ψ and m λ j ϕ for every ≤ j i 
that is a irϕ holds iff a have a uniform collective strategy such 
that for every path that can possibly result from execution of the 
strategy according to at least one agent from a ϕ is the case 
 models and model checking 
in this section we present and discuss various existing 
representations of systems that can be used for modeling and model 
checking we believe that the two most important points of 
reference are in this case the modeling formalism i e the logic 
and the semantics we use and the phenomenon or more 
generally the domain we are going to model to which we will often 
refer as the real world our aim is a representation which is 
reasonably close to the real world i e it is sufficiently compact and 
grounded and still not too far away from the formalism so that 
it e g easily allows for theoretical analysis of computational 
problems we begin with discussing the merits of explicit 
modelsin our case these are transition systems concurrent game structures 
and cegss presented in the previous section 
 explicit models 
obviously an advantage of explicit models is that they are very 
close to the semantics of our logics simply because they are the 
semantics on the other hand they are in many ways difficult to 
use to describe an actual system 
 exponential size temporal models usually have an 
exponential number of states with respect to any higher-level 
description e g boolean variables n-ary attributes etc also their 
size is exponential in the number of processes or agents 
if the evolution of a system results from joint synchronous 
or asynchronous actions of several active entities for 
cgss the situation is even worse here also the number of 
transitions is exponential even if we fix the number of states 
in practice this means that such representations are very 
seldom scalable 
 explicit models include no modularity states in a model 
refer to global states of the system transitions in the model 
correspond to global transitions as well i e they represent 
 in an atomic way everything that may happen in one single 
step regardless of who has done it to whom and in what 
way 
 logics like atl are often advertised as frameworks for 
modeling and reasoning about open computational systems 
ideally one would like the elements of such a system to have 
as little interdependencies as possible so that they can be 
plugged in and out without much hassle for instance when 
we want to test various designs or implementations of the 
active component in the case of a multi-agent system the 
 
another class of atl models alternating transition systems 
represent transitions in a more succinct way while we still have 
exponentially many states in an ats the number of transitions is 
simply quadratic wrt to states like for ctl models 
unfortunately ats are even less modular and harder to design than 
concurrent game structures and they cannot be easily extended to handle 
incomplete information cf 
need is perhaps even more obvious we do not only need 
to re-plug various designs of a single agent in the overall 
architecture we usually also need to change e g increase 
the number of agents acting in a given environment without 
necessarily changing the design of the whole system 
unfortunately atl models are anything but open in this sense 
theoretical complexity results for explicit models are as follows 
model checking ctl and ctlk is p-complete and can be done in 
time o ml where m is the number of transitions in the model 
and l is the length of the formula alternatively it can be done 
in time o n 
l where n is the number of states model checking 
atl is p-complete wrt m l and δp 
 -complete wrt n k l k being 
the number of agents model checking atlir is δp 
 
 complete wrt m l and δp 
 -complete wrt n k l 
 compressed representations 
explicit representation of all states and transitions is inefficient 
in many ways an alternative is to represent the state transition 
space in a symbolic way 
such models offer some hope for feasible model checking 
properties of open multi-agent systems although it is well known that 
they are compact only in a fraction of all cases 
for us however 
they are insufficient for another reason they are merely optimized 
representations of explicit models thus they are neither more 
open nor better grounded they were meant to optimize 
implementation rather than facilitate design or modeling methodology 
 interpreted systems 
interpreted systems are held by many as a prime example 
of computationally grounded models of distributed systems an 
interpreted system can be defined as a tuple is st stk stenv r π 
st stk are local state spaces of agents k and stenv is the 
set of states of the environment the set of global states is defined 
as st st × × stk × stenv r ⊆ st × st is a transition relation 
and π π → p st while the transition relation encapsulates 
the possible evolution of the system over time the epistemic 
dimension is defined by the local components of each global state 
q qk qenv ∼i q qk qenv iff qi qi 
it is easy to see that such a representation is modular and 
compact as far as we are concerned with states moreover it gives a 
natural grounded approach to knowledge and suggests an 
intuitive methodology for modeling epistemic states unfortunately 
the way transitions are represented in interpreted systems is neither 
compact nor modular nor grounded the temporal aspect of the 
system is given by a joint transition function exactly like in 
explicit models this is not without a reason if we separate activities 
of the agents too much we cannot model interaction in the 
framework any more and interaction is the most interesting thing here 
but the bottom line is that the temporal dimension of an interpreted 
system has exponential representation and it is almost as difficult 
to plug components in and out of an interpreted system as for an 
ordinary ctl or atl model since the local activity of an agent is 
completely merged with his interaction with the rest of the system 
 concurrent programs 
the idea of concurrent programs has been long known in the 
literature on distributed systems here we use the formulation 
from a concurrent program p is composed of k 
concurrent processes each described by a labeled transition system pi 
sti acti ri πi πi where sti is the set of local states of process 
 
representation r of an explicit model m is compact if the size of 
r is logarithmic with respect to the size of m 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
i acti is the set of local actions ri ⊆ sti ×acti ×sti is a transition 
relation and πi πi are the set of local propositions and their 
valuation the behavior of program p is given by the product 
automaton of p pk under the assumption that processes work 
asynchronously actions are interleaved and synchronization is obtained 
through common action names 
concurrent programs have several advantages first of all they 
are modular and compact they allow for local modeling of 
components - much more so than interpreted systems not only states 
but also actions are local here moreover they allow for 
representing explicit interaction between local transitions of reactive 
processes like willful communication and synchronization on the 
other hand they do not allow for representing implicit 
incidental or not entirely benevolent interaction between processes for 
example if we want to represent the act of pushing somebody the 
pushed object must explicitly execute an action of being pushed 
which seems somewhat ridiculous side effects of actions are also 
not easy to model still this is a minor complaint in the context 
of ctl because for temporal logics we are only interested in the 
flow of transitions and not in the underlying actions for temporal 
reasoning about k asynchronous processes with no implicit 
interaction concurrent programs seem just about perfect 
the situation is different when we talk about autonomous 
proactive components like agents acting together cooperatively or 
adversely in a common environment - and we want to address 
their strategies and abilities now particular actions are no less 
important than the resulting transitions actions may influence other 
agents local states without their consent they may have side 
effects on other agents states etc passing messages and or calling 
procedures is by no means the only way of interaction between 
agents moreover the availability of actions to an agent should 
not depend on the actions that will be executed by other agents at 
the same time - these are the outcome states that may depend on 
these actions finally we would often like to assume that agents act 
synchronously in particular all agents play simultaneously in 
concurrent game structures but assuming synchrony and autonomy 
of actions synchronization can no longer be a means of 
coordination 
to sum up we need a representation which is very much like 
concurrent programs but allows for modeling agents that play 
synchronously and which enables modeling more sophisticated 
interaction between agents actions the first postulate is easy to satisfy 
as we show in the following section the second will be addressed 
in section 
we note that model checking ctl against concurrent programs 
is pspace-complete in the number of local states and the length 
of the formula 
 synchronous cp and simple reactive 
modules 
the semantics of atl is based on synchronous models where 
availability of actions does not depend on the actions currently 
executed by the other players a slightly different variant of 
concurrent programs can be defined via synchronous product of programs 
so that all agents play simultaneously 
unfortunately under such 
interpretation no direct interaction between agents actions can be 
modeled at all 
definition a synchronous concurrent program consists of 
k concurrent processes pi sti acti ri πi πi with the 
follow 
the concept is not new of course and has already existed in folk 
knowledge although we failed to find an explicit definition in the 
literature 
ing unfolding to a cgs agt k st 
qk 
i sti act 
sk 
i acti d i q qk αi qi αi qi ∈ ri for some qi ∈ 
sti o q qk α αk q qk such that qi αi qi ∈ 
ri for every i π 
sk 
i πi and π p πi p for p ∈ πi 
we note that the simple reactive modules srml from can 
be seen as a particular implementation of synchronous concurrent 
programs 
definition a srml system is a tuple σ π m mk 
where σ k is a set of modules or agents π is a 
set of boolean variables and for each i ∈ σ we have mi 
ctri initi updatei where ctri ⊆ π sets initi and updatei consist 
of guarded commands of the form φ v ψ vk ψk 
where every vj ∈ ctri and φ ψ ψk are propositional 
formulae over π it is required that ctr ctrk partitions π 
the idea is that agent i controls the variables ctri the init guarded 
commands are used to initialize the controlled variables while the 
update guarded commands can change their values in each round 
a guarded command is enabled if the guard φ is true in the current 
state of the system in each round an enabled update guarded 
command is executed each ψj is evaluated against the current state of 
the system and its logical value is assigned to vj several guarded 
commands being enabled at the same time model non-deterministic 
choice model checking atl for srml has been proved 
exptimecomplete in the size of the model and the length of the formula 
 concurrent epistemic programs 
concurrent programs both asynchronous and synchronous can 
be used to encode epistemic relations too - exactly in the same 
way as interpreted systems do that is when unfolding a 
concurrent program to a model of ctlk or atlir we define that 
q qk ∼i q qk iff qi qi model checking ctlk 
against concurrent epistemic programs is pspace-complete 
srml can be also interpreted in the same way then we would 
assume that every agent can see only the variables he controls 
concurrent epistemic programs are modular and have a grounded 
semantics they are usually compact albeit not always for 
example an agent with perfect information will always blow up the size 
of such a program still they inherit all the problems of 
concurrent programs with perfect information discussed in section 
limited interaction between components availability of local 
actions depending on the actual transition etc the problems were 
already important for agents with perfect information but they 
become even more crucial when agents have only limited knowledge 
of the current situation one of the most important applications of 
logics that combine strategic and epistemic properties is 
verification of communication protocols e g in the context of security 
now we may want to e g check agents ability to pass an 
information between them without letting anybody else intercept the 
message the point is that the action of intercepting is by definition 
enabled we just look for a protocol in which the transition of 
successful interception is never carried out so availability of actions 
must be independent of the actions chosen by the other agents under 
incomplete information on the other hand interaction is arguably 
the most interesting feature of multi-agent systems and it is really 
hard to imagine models of strategic-epistemic logics in which it is 
not possible to represent communication 
 reactive modules 
reactive modules can be seen as a refinement of 
concurrent epistemic programs primarily used by the mocha model 
checker but they are much more powerful expressive and 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
grounded we have already mentioned a very limited variant of 
rml i e srml the vocabulary of rml is very close to 
implementations in terms of general computational systems the 
modules are essentially collections of variables states are just 
valuations of variables events actions are variable updates however 
the sets of variables controlled by different agents can overlap 
they can change over time etc moreover reactive modules 
support incomplete information through observability of variables 
although it is not the main focus of rml again the relationship 
between sets of observable variables and to sets of controlled 
variables is mostly left up to the designer of a system agents can act 
synchronously as well as asynchronously 
to sum up rml define a powerful framework for modeling 
distributed systems with various kinds of synchrony and asynchrony 
however we believe that there is still a need for a simpler and 
slightly more abstract class of representations first the 
framework of rml is technically complicated involving a number 
auxiliary concepts and their definitions second it is not always 
convenient to represent all that is going on in a multi-agent system 
as reading and or writing from to program variables this view 
of a multi-agent system is arguably close to its computer 
implementation but usually rather distant from the real world 
domainhence the need for a more abstract and more conceptually flexible 
framework third the separation of the local complexity and the 
complexity of interaction is not straightforward our new proposal 
more in the spirit of interpreted systems takes these observations 
as the starting point the proposed framework is presented in 
section 
 modular interpreted systems 
the idea behind distributed systems multi-agent systems even 
more so is that we deal with several loosely coupled components 
where most of the processing goes on inside components i e 
locally and only a small fraction of the processing occurs between 
the components interaction is crucial which makes concurrent 
programs an insufficient modeling tool but it usually consumes 
much less of the agent s resources than local computations which 
makes the explicit transition tables of cgs cegs and interpreted 
systems an overkill modular interpreted systems proposed here 
extrapolate the modeling idea behind interpreted systems in a way 
that allows for a tight control of the interaction complexity 
definition a modular interpreted system mis is defined 
as a tuple 
s agt env act in 
where agt a ak is a set of agents env is the environment 
act is a set of actions and in is a set of symbols called interaction 
alphabet each agent has the following internal structure 
ai sti di outi ini oi πi πi where 
 sti is a set of local states 
 di sti → p act defines local availability of actions for 
convenience of the notation we additionally define the set of 
situated actions as di qi α qi ∈ sti α ∈ di qi 
 outi ini are interaction functions outi di → in refers to 
the influence that a given situated action of agent ai may 
possibly have on the external world and ini sti ×ink 
→ in 
translates external manifestations of the other agents and 
the environment into the impression that they make on 
ai s transition function depending on the local state of ai 
 oi di × in → sti is a deterministic local transition 
function 
 πi is a set of local propositions of agent ai where we require 
that πi and πj are disjunct when i j and 
 πi πi → p sti is a valuation of these propositions 
the environment env stenv outenv inenv oenv πenv πenv has the 
same structure as an agent except that it does not perform actions 
and that thus outenv stenv → in and oenv stenv × in → stenv 
within our framework we assume that every action is executed 
by an actor that is an agent as a consequence every actor is 
explicitly represented in a mis as an agent just like in the case of 
cgs and cegs the environment on the other hand represents the 
 passive context of agents actions in practice it serves to capture 
the aspects of the global state that are not observable by any of the 
agents 
the input functions ini seem to be the fragile spots here when 
given explicitly as tables they have size exponential wrt the 
number of agents and linear wrt the size of in however we can 
use e g a construction similar to the one from to represent 
interaction functions more compactly 
definition implicit input function for state q ∈ sti is given 
by a sequence ϕ η ϕn ηn where each ηj ∈ in is an 
interaction symbol and each ϕj is a boolean combination of 
propositions ˆηi 
 with η ∈ in ˆηi 
stands for η is the symbol currently 
generated by agent i the input function is now defined as 
follows ini q k env ηj iff j is the lowest index such that 
 ˆ 
 ˆk 
k ˆenv 
env ϕj it is required that ϕn ≡ so that the 
mapping is effective 
remark every ini can be encoded as an implicit input 
function with each ϕj being of polynomial size with respect to the 
number of interaction symbols cf 
note that for some domains the mis representation of a system 
requires exponentially many symbols in the interaction alphabet in 
in such a case the problem is inherent to the domain and ini will 
have size exponential wrt the number of agents 
 representing agent systems with mis 
let stg 
qk 
i sti ×stenv be the set of all possible global states 
generated by a modular interpreted system s 
definition the unfolding of a mis s for initial states q ⊆ 
stg to a cegs cegs s q agt st π π act d o ∼ ∼k 
is defined as follows 
 agt k and act act 
 st is the set of global states from stg which are reachable 
from some state in q via the transition relation defined by o 
 below 
 π 
sk 
i πi ∪ πenv 
 for each q q qk qenv ∈ st and i k env 
we define q ∈ π p iff p ∈ πi and qi ∈ πi p 
 d i q di qi for global state q q qk qenv 
 the transition function is constructed as follows let q 
q qk qenv ∈ st and α α αk be an action 
profile s t αi ∈ d i q we define inputi q α 
ini 
 
qi out q α outi− qi− αi− outi qi αi 
 outk qk αk outenv qenv 
´ 
for each agent i k 
and inputenv q α inenv 
 
qenv out q α outk qk αk 
´ 
 
then o q α o q α input q α 
ok qk αk inputk q α oenv qenv inputenv q α 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 for each i k q qk qenv ∼i q qk qenv iff 
qi qi 
remark note that miss can be used as representations of 
cgss too in that case epistemic relations ∼i are simply omitted in 
the unfolding we denote the unfolding of a mis s for initial states 
q into a cgs by cgs s q 
propositions and state that modular interpreted systems can 
be used as representations for explicit models of multi-agent 
systems on the other hand these representations are not always 
compact as demonstrated by propositions and 
proposition for every cegs m there is a mis sm 
and a 
set of global states q of sm 
such that cegs sm 
 q is isomorphic to 
m 
proof let m k st act d o π π ∼ ∼k 
be a cegs we construct a mis sm 
 a ak env act in 
with agents ai sti di outi ini oi πi πi and environment env 
stenv outenv inenv oenv πenv πenv plus a set q ⊆ stg of global 
states as follows 
 in act ∪ st ∪ actk− 
× st 
 sti q ∼i q ∈ st for ≤ i ≤ k i e sti is the set of i s 
indistinguishability classes in m 
 stenv st 
 di q ∼i d i q for ≤ i ≤ k this is well-defined since 
d i q d i q whenever q ∼i q 
 outi q ∼i αi αi for ≤ i ≤ k outenv q q 
 ini q ∼i α αi− αi αk qenv 
α αi− αi αk qenv for i ∈ k 
inenv q α αk α αk 
ini x and inenv x are arbitrary for other arguments x 
 oi q ∼i αi α αi− αi αk qenv 
 o qenv α αk ∼i for ≤ i ≤ k and αi ∈ di q ∼i 
oenv q α αk o q α αk 
oi and oenv are arbitrary for other arguments 
 πi ∅ for ≤ i ≤ k and πenv π 
 πenv p π p 
 q q ∼ q ∼k q q ∈ st 
let m cegs sm 
 q agt st act d o π π ∼ ∼k 
we argue that m and m are isomorphic by establishing a 
oneto-one correspondence between the respective sets of states and 
showing that the other parts of the structures agree on 
corresponding states 
first we show that for any ˆq q ∼ q ∼k q ∈ q 
and any α α αk such that αi ∈ d i ˆq we have 
o ˆq α q ∼ q ∼k q where q o q α 
let ˆq o ˆq α now for any i inputi ˆq α ini q ∼i 
out q ∼ α outi− q ∼i− αi− outi q ∼i αi 
 outk q ∼k αk outenv q ini q ∼i α αi− αi 
 
this shows another difference between the environment and the 
agents the environment does not possess knowledge 
 
we say that two cegs are isomorphic if they only differ in the 
names of states and or actions 
 αk q α αi− αi αk q similarly we get 
that inputenv ˆq α α αk thus we get that o ˆq α 
o q ∼ α input ˆq α ok q ∼k αk inputk ˆq α 
oenv q inputenv ˆq α o q α αk ∼ 
 o q α αk ∼k o q α αk thus ˆq 
 q ∼ q ∼k q for q o q α αk which completes 
the proof of 
we now argue that st q clearly q ⊆ st let ˆq ∈ st 
we must show that ˆq ∈ q the argument is on induction on the 
length of the least o path from q to ˆq the base case ˆq ∈ q is 
immediate for the inductive step ˆq o ˆq α for some ˆq ∈ q 
and then we have that ˆq ∈ q by thus st q 
now we have a one-to-one correspondence between st and st 
r ∈ st corresponds to r ∼ r ∼k r ∈ st it remains to 
be shown that the other parts of the structures m and m agree on 
corresponding states 
 agt agt 
 act act 
 π 
sk 
i πi ∪ πenv π 
 for p ∈ π π q ∼ q ∼k q ∈ π p iff q ∈ 
πenv p iff q ∈ π p same valuations at corresponding states 
 d i q ∼ q ∼k q di q ∼i d i q 
 it follows immediately from and the fact that q st 
that o q ∼ q ∼k q α r ∼ r ∼k r 
iff o q α r transitions on the same joint action in 
corresponding states lead to corresponding states 
 q ∼ q ∼k q ∼i r ∼ r ∼k r iff q ∼i 
 r ∼i iff q ∼i r the accessibility relations relate 
corresponding states which completes the proof 
corollary for every cegs m there is an atlir-equivalent 
mis s with initial states q that is for every state q in m there is 
a state q in cegs s q satisfying exactly the same atlir formulae 
and vice versa 
proposition for every cgs m there is a mis sm 
and a set 
of global states q of sm 
such that cgs sm 
 q is isomorphic to m 
proof let m agt st act d o π π be given now let 
ˆm agt st act d o π π ∼ ∼k for some arbitrary 
accessibility relations ∼i over st by proposition there exists a mis 
s 
ˆm 
with global states q such that ˆm cegs s 
ˆm 
 q is isomorphic 
to ˆm let m be the cgs obtained by removing the accessibility 
relations from ˆm clearly m is isomorphic to m 
corollary for every cgs m there is an atl-equivalent 
mis s with initial states q that is for every state q in m there is a 
state q in cgs s q satisfying exactly the same atl formulae and 
vice versa 
proposition the local state spaces in a mis are not 
always compact with respect to the underlying concurrent epistemic 
game structure 
proof take a cegs m in which agent i has always perfect 
information about the current global state of the system when 
constructing a modular interpreted system s such that m cegs s q 
we have that sti must be isomorphic with st 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
the above property is a part of the interpreted systems heritage 
the next proposition stems from the fact that explicit models and 
interpreted systems allow for intensive interaction between agents 
proposition the size of in in s is in general exponential 
with respect to the number of local states and local actions this is 
the case even when epistemic relations are not relevant i e when 
s is taken as a representation of an ordinary cgs 
proof consider a cgs m with agents agt k global 
states st 
qk 
i qi 
 qi 
i and actions act all enabled 
everywhere the transition function is defined as 
o q 
j 
 qk 
jk 
 α αk q 
l 
 qk 
lk 
 where li ji α 
 αk mod i note that m can be represented as a modular 
interpreted system with succinct local state spaces sti qi 
 qi 
i 
still the current actions of all agents are relevant to determine the 
resulting local transition of agent i 
we will call items in outi ini the interaction layer of a 
modular interpreted system s the other elements of s constitute the local 
layer of the mis in this paper we are ultimately interested in model 
checking complexity with respect to the size of the local layer to 
this end we will assume that the size of interaction layer is 
polynomial in the number of local states and actions note that by 
propositions and not every explicit model submits to compact 
representation with a mis still as we declared at the beginning of 
section we are mainly interested in a modeling framework for 
systems of loosely coupled components where interaction is 
essential but most processing is done locally anyway more 
importantly the framework of mis allows for separating the interaction 
of agents from their local structure to a larger extent moreover we 
can control and measure the complexity of each layer in a finer way 
than before first we can try to abstract from the complexity of a 
layer e g like in this paper by assuming that the other layer is kept 
within certain complexity bounds second we can also measure 
separately the interaction complexity of different agents 
 modular interpreted systems vs simple 
reactive modules 
in this section we show that simple reactive modules are as we 
already suggested a specific and somewhat limited 
implementation of modular interpreted systems first we define our quite 
strong notion of equivalence of representations 
definition two representations are equivalent if they 
unfold to isomorphic concurrent epistemic game structures they are 
cgs-equivalent if they unfold to the same cgs 
proposition for any srml there is a cgs-equivalent mis 
proof consider an srml r with k modules and n variables 
we construct s agt act in with agt a ak act 
 n ⊥ ⊥n and in 
sk 
i sti × sti the local state 
spaces sti will be defined in a moment let us assume without loss 
of generality that ctri x xr also we consider all guarded 
commands of i to be of type γi ψ ψ xi or γ⊥ 
i ψ ψ 
xi ⊥ now agent ai in s has the following components sti 
p ctri i e local states of ai are valuations of variables controlled 
by i di qi r ⊥ ⊥r outi qi α qi qi 
ini qi q q qi− qi− qi qi qk qk 
 xi ∈ ctri q qk 
w 
γi ψ 
ψ xi ∈ ctri q qk 
w 
γ⊥ 
i ψ 
ψ to define local transitions we consider three cases if 
t f ∅ no update is enabled then oi qi α t f qi for 
every action α if t ∅ we take any arbitrary ˆx ∈ t and 
define oi qi j t f qi ∪ xj if xj ∈ t and qi ∪ ˆx otherwise 
oi qi ⊥j t f qi \ xj if xj ∈ f and qi ∪ ˆx otherwise 
moreover if t ∅ f we take any arbitrary ˆx ∈ f and 
define oi qi j t f qi ∪ xj if xj ∈ t and qi \ ˆx otherwise 
oi qi ⊥j t f qi \ xj if xj ∈ f and qi \ ˆx otherwise finally 
πi ctri and qi ∈ πi xj iff xj ∈ qi 
the above construction shows that srml have more compact 
representation of states than mis ri local variables of agent i give 
rise to ri 
local states in a way reactive modules both simple 
and full are two-level representations first the system is 
represented as a product of modules next each module can be seen 
as a product of its variables together with their update operations 
note however that specification of updates with respect to a single 
variable in an srml may require guarded commands of total length 
o 
pk 
i ri 
 thus the representation of transitions in srml is in 
the worst case no more compact than in mis despite the two-level 
structure of srml we observe finally that mis are more general 
because in srml the current actions of other agents have no 
influence on the outcome of agent i s current action although the 
outcome can be influenced by other agents current local states 
 model checking modular interpreted 
systems 
one of our main aims was to study the complexity of symbolic 
model checking atlir in a meaningful way following the 
reviewers remarks we state our complexity results only as conjectures 
preliminary proofs can be found in 
conjecture model checking atl for modular interpreted 
systems is exptime-complete 
conjecture model checking atlir for the class of 
modular interpreted systems is pspace-complete 
a summary of complexity results for model checking 
temporal and strategic logics with and without epistemic component 
is given in the table below the table presents completeness 
results for various models and settings of input parameters symbols 
n k m stand for the number of states agents and transitions in an 
explicit model l is the length of the formula and nlocal is the 
number of local states in a concurrent program or modular interpreted 
system the new results conjectured in this paper are printed in 
italics note that the result for model checking atl against modular 
interpreted systems is an extension of the result from 
m l n k l nlocal k l 
ctl p p pspace 
ctlk p p pspace 
atl p δp 
 exptime 
atlir δp 
 δp 
 pspace 
if we are right then the results for atl and atlir form an 
intriguing pattern when we compare model checking agents with 
perfect vs imperfect information the first problem appears to be 
much easier against explicit models measured with the number of 
transitions next we get the same complexity class against explicit 
models measured with the number of states and agents finally 
model checking imperfect information turns out to be easier than 
model checking perfect information for modular interpreted 
systems why can it be so 
first a mis unfolds into cegs and cgs in a different way in 
the first case the mis is assumed to encode the epistemic relations 
explicitly which makes it explode when we model agents with 
perfect or almost perfect information in the latter case the epistemic 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
aspect is ignored which gives some extra room for encoding the 
transition relation more efficiently another crucial factor is the 
number of available strategies relative to the size of input 
parameters the number of all strategies is exponential in the number 
of global states for uniform strategies there are usually much less 
of them but still exponentially many in general thus the fact that 
perfect information strategies can be synthesized incrementally has 
a substantial impact on the complexity of the problem however 
measured in terms of local states and agents the number of all 
strategies is doubly exponential while there are only 
exponentially many uniform strategies - which settles the results in favor of 
imperfect information 
 conclusions 
we have presented a new class of representations for open 
multiagent systems our representations called modular interpreted 
systems are modular in the sense that components can be changed 
replaced removed or added with as little changes to the whole 
representation as possible more compact than traditional explicit 
representations and grounded in the sense that the correspondences 
between the primitives of the model and the entities being 
modeled are more immediate giving a methodology for designing and 
implementing systems we also conjecture that the complexity of 
model checking strategic ability for our representations is higher if 
we assume perfect information than if we assume imperfect 
information 
the solutions proposed in this paper are not necessarily 
perfect for example the impression functions ini seem to be the 
main source of non-modularity in mis and can be perhaps 
improved but we believe them to be a step in the right direction 
we also do not mean to claim that our representations should 
replace more elaborate modeling languages like promela or reactive 
modules we only suggest that there is a need for compact modular 
and reasonably grounded models that are more expressive than 
concurrent epistemic programs and still allow for easier theoretical 
analysis than reactive modules we also suggest that mis might be 
better suited for modeling simple multi-agent domains especially 
for human-oriented as opposed to computer-oriented design 
 acknowledgments 
we thank the anonymous reviewers and andrzej tarlecki for 
their helpful remarks thomas ågotnes work on this paper was 
supported by grants v and s from the 
research council of norway 
 references 
 r alur and t a henzinger reactive modules formal 
methods in system design - 
 r alur t a henzinger and o kupferman 
alternating-time temporal logic lecture notes in 
computer science - 
 r alur t a henzinger and o kupferman 
alternating-time temporal logic journal of the acm 
 - 
 r alur t a henzinger f y c mang s qadeer s k 
rajamani and s tasiran mocha user manual in 
proceedings of cav volume of lecture notes in 
computer science pages - 
 e m clarke e a emerson and a p sistla automatic 
verification of finite-state concurrent systems using temporal 
logic specifications acm transactions on programming 
languages and systems - 
 e a emerson and j y halpern sometimes and not never 
revisited on branching versus linear time temporal logic in 
proceedings of the annual acm symposium on principles of 
programming languages pages - 
 r fagin j y halpern y moses and m y vardi 
reasoning about knowledge mit press cambridge ma 
 
 m franceschet a montanari and m de rijke model 
checking for combined logics in proceedings of the rd 
international conference on temporal logic ictl 
 v goranko and w jamroga comparing semantics of logics 
for multi-agent systems synthese - 
 j y halpern reasoning about knowledge a survey in 
d m gabbay c j hogger and j a robinson editors the 
handbook of logic in artificial intelligence and logic 
programming volume iv pages - oxford university 
press 
 j y halpern and r fagin modelling knowledge and action 
in distributed systems distributed computing 
 - 
 w jamroga and j dix do agents make model checking 
explode computationally in m p˘echou˘cek p petta and 
l z varga editors proceedings of ceemas volume 
 of lecture notes in computer science pages - 
springer verlag 
 w jamroga and j dix model checking abilities of agents 
a closer look submitted 
 w jamroga and t ågotnes modular interpreted systems a 
preliminary report technical report ifi- - clausthal 
university of technology 
 o kupferman m y vardi and p wolper an 
automata-theoretic approach to branching-time model 
checking journal of the acm - 
 f laroussinie n markey and g oreiby expressiveness 
and complexity of atl technical report lsv- - cnrs 
 ens cachan france 
 k l mcmillan symbolic model checking an approach to 
the state explosion problem kluwer academic publishers 
 
 k l mcmillan applying sat methods in unbounded 
symbolic model checking in proceedings of cav 
volume of lecture notes in computer science pages 
 - 
 w penczek and a lomuscio verifying epistemic properties 
of multi-agent systems via bounded model checking in 
proceedings of aamas pages - new york ny 
usa acm press 
 f raimondi and a lomuscio the complexity of symbolic 
model checking temporal-epistemic logics in l czaja 
editor proceedings of cs p 
 p y schobbens alternating-time logic with imperfect 
recall electronic notes in theoretical computer science 
 
 w van der hoek a lomuscio and m wooldridge on the 
complexity of practical atl model checking in p stone and 
g weiss editors proceedings of aamas pages 
 - 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
