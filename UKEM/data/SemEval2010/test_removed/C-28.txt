packageblast an adaptive multi-policy grid service for 
biological sequence comparison 
 
marcelo s sousa 
university of brasilia 
campus unb - icc norte sub-solo 
brasilia brazil 
msousa unb br 
alba cristina m a melo 
university of brasilia 
campus unb - icc norte sub-solo 
brasilia brazil 
alves unb br 
abstract 
in this paper we propose an adaptive task allocation 
framework to perform blast searches in a grid environment 
against sequence database segments the framework called 
packageblast provides an infrastructure to choose or 
incorporate task allocation strategies furthermore we 
propose a mechanism to compute grid nodes execution weight 
adapting the chosen allocation policy to the current 
computational power of the nodes our results present very good 
speedups and also show that no single allocation strategy is 
able to achieve the lowest execution times for all scenarios 
categories and subject descriptors 
c distributed systems distributed applications 
j life and medical sciences biology and genetics 
 introduction 
biological sequence comparison or sequence alignment 
is one of the most important problems in computational 
biology given the number and diversity of the sequences and 
the frequency on which it is needed to be solved daily 
sw is an exact algorithm that finds the best local 
alignment between two sequences of size n in quadratic time 
and space in genome projects the size of the sequences to 
be compared is constantly increasing thus an o n 
 solution 
is expensive for this reason heuristics like blast were 
proposed to reduce execution time 
the popularity of the internet made possible the 
interconnection of millions of powerful machines in a global scale 
this led to the idea of grid computing which involves 
cooperative and secure sharing of non-dedicated and 
heterogeneous resources that are geographically distributed 
resource scheduling is one of the most important 
components of a grid system the choice of the best resources for 
a particular application is called task allocation which is 
an np-complete problem grid applications usually do not 
have high communication rates and many of them follow the 
master slave model in order to schedule master slave 
applications many task allocation policies were proposed 
such as self scheduling and fac the choice of 
the best allocation policy depends on the application access 
pattern and on the environment in which it runs 
in this paper we propose packageblast an adaptive 
multi-policy grid service to run blast searches in grids 
composed by segmented genetic databases packageblast 
executes on globus and by now provides five allocation 
policies also we propose an adaptive mechanism to assign 
weights to the grid nodes taking into account their current 
workload as far as we know this is the first grid service that 
runs blast with multiple task policies with a segmented 
database in a heterogeneous non-dedicated platform 
this paper is organized as follows section presents the 
sequence comparison problem and the blast algorithm 
section describes allocation policies for grids section 
 discusses related work section presents the design of 
packageblast experimental results are discussed in 
section section concludes the paper 
 sequence comparison 
to compare two sequences we must find the best 
alignment which is to place one sequence above the other making 
clear the correspondence between similar characters 
given an alignment between two sequences a score is 
usually associated for it as follows figure for each column 
we associate for instance if the two characters are 
identical - if the characters are different and - if one of them 
is a space the score is the sum of all the values and the 
maximal score is the similarity between the sequences 
to compute exact local sequence alignments 
proposed an algorithm sw based on dynamic programming 
with quadratic time and space complexity 
usually one given biological sequence is compared against 
thousands or even millions of sequences that compose 
genetic data banks by now there are millions of entries 
composed of billions of nucleotides at genbank which is one 
of the most important public gene repositories due to the 
 
g a c g g a t t a g 
g a t c g g a a t a g 
 − − 
σ 
figure example of an alignment with score 
current growth rate these databases will soon achieve 
terabytes 
in this scenario the use of exact methods such as sw is 
prohibitive for this reason faster heuristic methods are 
proposed which do not guarantee that the best alignment 
will be produced usually these heuristic methods are 
evaluated using the concepts of sensitivity and sensibility 
sensitivity is the rate at which the method fails to identify similar 
sequences whereas sensibility is the rate at which the method 
identifies sequences that are not similar blast is the 
most widely used heuristic method for sequence comparison 
 the blast algorithm 
blast basic local alignment tool is a set of 
programs used to search dna and protein databases for 
similarities between sequences it is designed to obtain high 
performance with low impact in terms of sensibility blast 
provides programs to compare many combinations of query 
and database sequence types table 
table some of the blast family programs 
program database query translation 
blastn nucleotide nucleotide none 
blastp protein protein none 
blastx protein nucleotide query 
the first version of blast searched for local similarities 
without taking spaces gaps into account in - 
two gapped versions of blast emerged ncbi-blast 
and wu-blast 
basically the algorithm proceeds in three steps seeding 
extension and evaluation in the seeding step a query 
sequence is split in portions called words of size w these 
words are matched to database sequences and used as 
alignment seeds if their scores are higher than a threshold t 
in the extension step alignments are generated from seeds 
a parameter x maintains the recent alignment history and 
controls this step once seeds are extended the last step 
begins the alignments are evaluated to determine if they 
are statistically significant the significant ones are termed 
hsps high-scoring segment pairs a new parameter s 
is used to sort alignments the combination of parameters 
w t x and s is used to determine the sensitivity and 
speed of blast searches 
 task allocation for grids 
 grid computing 
grid computing was initially developed to enable resource 
sharing between scientific institutions who needed to share 
data software and computational power the globus toolkit 
 emerged as an open source project and quickly became a 
de facto standard for grid computing infrastructure globus 
implements a set of protocols apis and services used by 
hundreds of grid applications all over the world 
in the open grid services architecture ogsa 
was introduced by the global grid forum ggf to expand 
standardization ogsa provided a new architecture for grid 
applications based on web services in order to achieve 
interoperability using industry standards many ogsa 
architecture implementations were developed including one for 
globus the work carried out in this paper is deployed on 
a grid based on globus gt 
usually grid applications are modelled as master slave 
where one problem is divided in many independent work 
units tasks of smaller size that can be distributed to slave 
nodes for parallel processing 
a very important problem to be solved in this context 
is task allocation the task allocation problem consists of 
assigning tasks to processors in order to maximize system 
performance in this problem it is assumed that no 
precedence relations exist among the tasks 
 task allocation strategies 
given a master slave application composed by a master 
m and s slaves the allocation function allocate m si n s 
determines how many tasks out of n must be assigned to 
a slave si equation where a n s represents an 
allocation policy weightfactor m si s was defined by 
 equation and provides weights for each slave si based 
on its statically known processing rate workerrate 
allocate m si n s a n s w eightf actor m si s 
w eightf actor m si s 
p w orkerrate m si 
p 
i w orkerrate m si 
 
the following subsections present some work allocation 
policies which are instances a n s of equation 
 fixed static scheduling 
the fixed strategy distributes all work units 
uniformly to slaves nodes this strategy is appropriate for 
homogeneous systems with dedicated resources equation 
a n s 
n 
s 
 
 self scheduling ss 
self scheduling ss distributes a single work unit to 
every slave node equation 
a n s while work units are still left to allocate 
in ss the maximum imbalance is limited by the 
processing time of a work unit in the slowest node nevertheless 
ss usually demands a lot of communication since each work 
unit retrieval requires one interaction with the master 
 trapezoidal self scheduling tss 
trapezoidal self-scheduling tss allocates work units 
in groups with a linearly decreasing size this strategy uses 
two variables steps and δ that represent the total number 
of allocation steps and the block reduction factor 
respectively equations and 
steps 
 ns 
n s 
 
 
δ 
n − s 
 s steps − 
 
tss calculates the length of the sth 
block using the 
difference between the length of the first block and total reduction 
from the last s − blocks equation 
a s n s max 
n 
 s 
− s − δ 
 guided self scheduling gss 
guided self-scheduling gss allocates work units 
in groups whose length decrease exponentially its goal is 
to create a tradeoff between the number of the work units 
processed and the imbalance in finishing times equation 
a s n s max 
n − 
s 
s− 
s 
 s 
 factoring fac 
fac allocates work units in cycles consisting of s 
allocation sequences equation shows the function that defines 
the cycle number of an iteration s in fac half of the 
remaining work units are allocated in each round equation 
 
round s 
 s − 
s 
 
a s n s max 
n 
s round s 
 
 related work 
mpiblast was proposed for clusters and has two 
phases first the genetic database is segmented then the 
queries are evenly distributed among the nodes if the node 
does not have a database fragment a local copy is made a 
method is proposed that associates data fragments to nodes 
trying to minimize the number of copies 
blast groups multiple sequences to reduce the 
number of database accesses a master slave approach is 
used that allocates the queries to the slaves according to the 
fixed policy section each worker executes blast 
independently and finally the results are collected and 
combined by the master 
gridblast is a master slave grid application that uses 
globus it distributes sequences among the grid nodes 
using two allocation policies fcfs and minmax of those 
only the last one takes into account the current load and the 
heterogeneity of the environment however to use minmax 
the total execution time of each blast task must be known 
having decided which sequences will be compared by each 
node gridblast sends the sequences the executable files and 
the whole database to the chosen node when the search 
finishes the results are compacted and sent to the master 
grid blast toolkit gbtk is a web portal to execute 
blast searches in globus all genetic databases are 
statically placed on the grid nodes without replication gbtk 
is a master slave application that receives the sequences and 
the name of the genetic database it then verifies if the node 
that contains the database is available if so it is selected 
if the node is not available the less loaded node is chosen 
and the database is copied to it 
master 
slaveslaveslave 
internet 
database 
segment 
but only part of it is processed in each node 
the database is replicated in the nodes 
figure packageblast segmentation and 
distribution mechanism 
 design of packageblast 
we propose an adaptive task allocation framework which 
is a grid service to perform blast searches against 
sequence database segments the framework called 
packageblast provides an infrastructure to choose or incorporate 
allocation strategies in a master slave application we also 
propose a strategy to compute grid nodes execution weight 
which distributes work units database segments to grid 
nodes according to their current computational power 
 database segmentation and replication 
segmentation consists in the division of a database archive 
in many portions of smaller size called segments that can 
be processed independently it enables grid nodes to search 
smaller parts of a sequence database reducing the number 
of disk accesses and hence improving blast performance 
also a single query sequence can be compared against all 
segments in parallel just as in mpiblast section 
we decided to use database segmentation in packageblast 
with an ncbi tool called formatdb which was modified to 
generate more database segments of smaller size 
we opted to replicate the segmented database in every 
slave grid node to improve data accesses times and to 
provide a potential for fault tolerance figure illustrates this 
 task allocation 
as we think that no allocation policy will produce 
the best results for every situation thus we propose the 
use of a framework where many allocation policies can be 
incorporated by now our framework contains five allocation 
policies fixed ss gss tss fac all described in 
section so the user can choose or even create the allocation 
policy which is the most appropriate to his her environment 
and his her blast parameters 
besides that we propose pss package weighted 
adaptive self-scheduling a new strategy that adapts the chosen 
allocation policy to a grid with local workload considering 
the heterogeneity and dynamic characteristics of the grid 
pss is able to modify the length of the work units during 
execution based on average processing time of each node 
the expression used for work unit allocation is shown in 
equation where a n p is the allocation policy for a 
system with n workload units and p nodes and φ m pi p is 
the weight calculated by pss a n p can be a pre-defined 
allocation policy or a user-defined one 
 
allocate m pi n p a n p φ m pi p 
to distribute database segments to nodes the master 
analyzes periodic slave notifications the expression used is 
φ m pi p equation defined as the weighted mean 
from the last ω notifications sent by each pi slave node 
φ m pi p 
p 
p 
i γ m pi ω 
γ m pi ω 
p 
i 
p 
i 
γ m pi ω 
γ m pi ω 
 
γ m pi ω equation specifies the average computing 
time of a segment in a node pi considering the last ω 
notifications of te m pi τ which is the average computation 
time of τ work units database segments assigned by the 
master m to a slave pi at the moment of computation of 
γ if there is not enough notifications of te the calculation 
is done with total k notifications already received 
γ m pi ω 
min ω k 
j t e m pi τ 
min ω k 
 
 packageblast s general architecture 
packageblast was designed as a grid service over globus 
 based on web services and java figure presents the 
packageblast architecture 
blast 
receives 
master 
strategies 
allocation 
work units 
generate 
work units 
distribute 
reports 
generate 
work units to slaves reports 
searches 
figure packageblast architecture 
the module allocation strategies contains 
implementations for the pre-defined allocation policies fixed ss gss 
tss and fac and also makes possible the creation of new 
allocation strategies 
the module generate work units is the core of the pss 
mechanism it calculates the weight of each slave node and 
decides how many work units will be assigned to a particular 
slave node according to the chosen allocation policy 
distribute work units is the module responsible for the 
communication between the master and slaves nodes it 
distributes the work units generated by the previous module 
and collects the notifications 
finally the module generate reports obtains the 
intermediary outputs sent by the slave nodes through file transfer 
and merges them into a single blast output report 
in general the following execution flow is executed the 
user specifies the sequence to be compared and chooses the 
allocation strategy the master node starts execution and 
waits for slave connections to start processing a minimum 
number of slaves must register into the master node by 
calling a master grid service after receiving connections from 
the slaves the master notifies them about their initial 
segments to compare the slave processes τ database segments 
and notifies the master which uses the last ω notifications 
to compute the next allocation block size based on the 
selected allocation strategy and the weight provided by pss 
then the master sends a xml message to the slave 
informing its new segments to process this flow continues until 
all segments are processed 
 experimental results 
packageblast was evaluated in a -node grid testbed 
composed by two laboratories interconnected by a 
localarea network eleven desktops p - and a notebook 
 nb were used in labpos and four desktops l - 
were used in laico table all grid nodes used linux 
with globus ncbi blast and java vm 
table characteristics of the grid testbed 
node names cpu main memory hd 
nb mhz mb gb 
l -l mhz mb gb 
l mhz mb gb 
p -p mhz mb gb 
p mhz mb gb 
to investigate the performance gains of packageblast 
we executed blastx in and grid nodes each 
blast search compared a kbp real dna sequence against 
the gb nr genetic database segmented in parts of 
 mb each fixed ss tss gss and fac allocation 
strategies were employed in the tests execution times for 
all allocation strategies are presented in table 
table execution times for blastx 
strategy nodes nodes nodes nodes 
fixed 
ss 
tss 
gss 
fac 
table presents execution times in a single machine and 
absolute speedups for and nodes considering the 
best execution time for a given number of nodes to 
calculate the absolute speedups the blast sequential version 
was executed with the nr unsegmented database 
table sequential execution times and speedups 
node seqtime nodes nodes nodes nodes 
nb 
l 
p 
p 
l 
packageblast achieved very good speedups 
considering the worst l average p and best nb node in 
the grid the speedups obtained were superlinear close to 
linear and sublinear respectively 
in table it can also be noticed that there is no allocation 
strategy that always reaches the best execution time this 
variation justifies the allocation framework provided 
to evaluate pss we executed packageblast with 
grid nodes introducing local workload in nodes l l 
p and p the load was started simultaneously 
seconds after the beginning of blast and consisted of the 
 
execution of formatdb on the nr database three scenarios 
were simulated table with pss strategy but without 
workload with pss strategy and workload pss x to 
use grid environment knowledge obtained in the preceeding 
iteration and execution without pss and with workload 
table pss evaluation with local workload gain 
is the comparison of without pss with pss x 
strategy with pss pss x without pss gain 
fixed 
ss 
tss 
gss 
fac - 
as expected the allocation strategies that assign a large 
amount of work to the nodes fixed and gss obtained great 
benefit from using pss this is due to the fact that a slow 
node can easily become a bottleneck in these strategies tss 
also obtained a reduction of in its execution time 
pss uses two parameters τ and ω section we 
varied these parameters in order to evaluate the pss behavior 
in two scenarios in both cases we used a four-node nb 
l p l grid in the first experiment a local 
workload formatdb was introduced when the last task of the 
first tss allocation starts and was stopped immediately 
after the processing of one segment the goal was to evaluate 
the impact of short-lived local tasks in pss in the second 
case local workload was introduced at the same time of the 
previous case but continued until the end the goal was to 
evaluate long-lived local tasks figure presents the gains 
figure percentual gain obtained by pss varying 
τ and ω parameters 
in scenario when a very recent history is considered 
 τ and ω pss tries to adapt to a situation that will 
shortly disappear for τ and ω pss takes longer to 
notice modification and short-lived tasks have low impact 
on the other hand in scenario τ ω presents better 
results than τ ω because it changes weights faster 
 conclusion 
in this article we proposed and evaluated packageblast 
an adaptive multi-policy grid service to execute master slave 
blast searches packageblast contains a framework 
where the user can choose or incorporate allocation policies 
we also defined a strategy pss that adapts the chosen 
policy to a heterogeneous non-dedicated grid environment 
the results collected by running packageblast with 
allocation policies in a grid testbed were very good in 
order to compare a kbp real dna sequence against the 
nr genetic database we were able to reduce execution time 
from min to min also we showed that in our 
testbed there is no allocation policy that always achieves 
the best performance and that makes evident the 
importance of providing multiple policies moreover we showed 
that the introduction of pss led to very good performance 
gains for some policies 
as future work we intend to run packageblast in a 
geographically dispersed grid to evaluate the impact of high 
network latencies in the allocation policies and in pss also 
we intend to provide support for genomic database 
synchronization and dynamic join leave operations for slaves 
 references 
 s f altschul w gish w miller e w myers and 
d j lipman a basic local alignment search tool 
journal of molecular biology - 
 a darling l carey and w feng the design 
implementation and evaluation of mpiblast th 
international conference on linux clusters 
 s f a et al gapped blast and psi-blast a new 
generation of protein database search programs 
nucleic acids research - 
 i foster and c kesselman globus a metacomputing 
infrastructure toolkit international journal of 
supercomputer applications - 
 i foster and c kesselman the grid blueprint of a 
future computing infrastructure morgan-kauffman 
 
 w gish washington university blast 
http blast wustl edu - 
 d gusfield algorithms on strings trees and 
sequences cambridge university press 
 s f hummel e schonberg and l e flynn 
factoring a method for scheduling parallel loops 
communications of the acm - 
 a krishnan gridblast high throughput blast on the 
grid symposium on biocomputing january 
 d peng w yan and z lei parallelization of 
blast technical report singapore-mit 
 c d polychronopoulos and d j kuck guided 
self-scheduling a practical scheduling scheme for 
parallel supercomputers ieee transactions on 
computers - dec 
 m k satish and r r joshi gbtk a toolkit for grid 
implementation of blast th international conference 
hpcasia pages - 
 g shao adaptive scheduling of master worker 
applications on distributed computational resources 
phd thesis univ california at san diego 
 t smith and m waterman identification of common 
molecular subsequences j mol biol - 
 
 p tang and p c yew processor self-scheduling for 
multiple nested parallel loops in int conf on 
parallel processing icpp pages - 
 t h tzen and l m ni trapezoidal self-scheduling 
a practical scheme for parallel compilers ieee 
transactions on parallel and distributed systems 
 - jan 
 
