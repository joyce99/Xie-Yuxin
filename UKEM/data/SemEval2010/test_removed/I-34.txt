resolving conflict and inconsistency in 
norm-regulated virtual organizations 
wamberto vasconcelos 
dept of computing science 
university of aberdeen 
aberdeen ab ue 
united kingdom 
wvasconcelos acm org 
martin j kollingbaum 
dept of computing science 
university of aberdeen 
aberdeen ab ue 
united kingdom 
mkolling csd abdn ac uk 
timothy j norman 
dept of computing science 
university of aberdeen 
aberdeen ab ue 
united kingdom 
tnorman csd abdn ac uk 
abstract 
norm-governed virtual organizations define govern and facilitate 
coordinated resource sharing and problem solving in societies of 
agents with an explicit account of norms openness in virtual 
organizations can be achieved new components designed by 
various parties can be seamlessly accommodated we focus on 
virtual organizations realised as multi-agent systems in which human 
and software agents interact to achieve individual and global goals 
however any realistic account of norms should address their 
dynamic nature norms will change as agents interact with each other 
and their environment due to the changing nature of norms or due 
to norms stemming from different virtual organizations there will 
be situations when an action is simultaneously permitted and 
prohibited that is a conflict arises likewise there will be situations 
when an action is both obliged and prohibited that is an 
inconsistency arises we introduce an approach based on first-order 
unification to detect and resolve such conflicts and inconsistencies 
in our proposed solution we annotate a norm with the set of 
values their variables should not have in order to avoid a conflict or 
an inconsistency with another norm our approach neatly 
accommodates the domain-dependent interrelations among actions and 
the indirect conflicts inconsistencies these may cause more 
generally we can capture a useful notion of inter-agent and inter-role 
delegation of actions and norms associated to them and use it to 
address conflicts inconsistencies caused by action delegation we 
illustrate our approach with an e-science example in which agents 
support grid services 
categories and subject descriptors 
i artificial intelligence applications and expert 
systemslaw i artificial intelligence distributed artificial 
intelligence-multi-agent systems 
general terms 
algorithms theory 
 introduction 
virtual organizations vos facilitate coordinated resource 
sharing and problem solving involving various parties geographically 
remote vos define and regulate interactions thus facilitating 
coordination among software and or human agents that 
communicate to achieve individual and global goals vos are realised as 
multi-agent systems and a most desirable feature of such systems is 
openness whereby new components designed by other parties are 
seamlessly accommodated the use of norms that is prohibitions 
permissions and obligations in the specification and operation of 
multi-agent systems mass is a promising approach to achieving 
openness norms regulate the observable behaviour of 
self-interested heterogeneous software agents designed by 
various parties who may not entirely trust each other 
however norm-regulated vos may experience problems when norms 
assigned to their agents are in conflict i e an action is 
simultaneously prohibited and permitted or inconsistent i e an action is 
simultaneously prohibited and obliged 
we propose a means to automatically detect and solve conflict 
and inconsistency in norm-regulated vos we make use of 
firstorder term unification to find out if and how norms overlap in 
their influence i e the agents and values of parameters in agents 
actions that norms may affect this allows for a fine-grained 
solution whereby the influence of conflicting or inconsistent norms is 
curtailed for particular sets of values for instance norms agent 
x is permitted to send bid ag and agent ag is prohibited 
from doing send bid y z where x y z are variables and ag 
ag are constants are in conflict because their agents actions 
and terms within the actions unify we solve the conflict by 
annotating norms with sets of values their variables cannot have thus 
curtailing their influence in our example the conflict is avoided if 
we require that variable y cannot be ag and that z cannot be 
this paper is organized as follows in the next section we 
provide a minimalistic definition for norm-regulated vos in section 
we formally define norm conflicts and explain how they are 
detected and resolved in section we describe how the machinery 
of the previous section can be adapted to detect and resolve norm 
inconsistencies in section we describe how our curtailed norms 
are used in norm-aware agent societies in section we explain 
how our machinery can be used to detect and solve indirect 
conflicts inconsistencies that is those caused via relationships among 
actions we extend and adapt the machinery to accommodate the 
delegation of norms in section we illustrate our approach with 
an example of norm-regulated software agents serving the grid in 
section we survey related work and in section we discuss our 
contributions and give directions for future work 
 
 - - - - rps c ifaamas 
 virtual organizations 
virtual organizations allow various parties to come together 
to share resources and engage in problem solving this paradigm 
has found strong applications in web-service orchestration 
e-science and the grid vos in their most generic 
formulation can be seen as coordination artifacts allowing software and 
human agents to engage in sophisticated forms of interaction 
we formally represent our vos as finite-state machines in which 
the actions of individual agents label the edges between discrete 
states this provides us with a lowest common denominator 
there are much more sophisticated convenient and expressive ways 
to represent interactions among agents e g auml and 
electronic institutions to name a few but for the sake of 
generalising our approach we shall assume any higher-level formalism 
can be mapped onto a finite-state machine possibly with some loss 
of expressiveness we show in figure a simple vo graphically 
represented as a finite-state machine 
 the labels on the edges 
con 
p x 
 
q y z 
 
s a b 
 - 
figure sample vo as a finite-state machine 
necting the states are first-order atomic formulae denoted 
generically as ϕ they stand for actions performed by individual agents 
we define our virtual organizations as follows 
def a virtual organization i is the triple s s e t where 
s s sn is a finite and non-empty set of states s ∈ s 
is the initial state e is a finite set of edges s s ϕ s s ∈ s 
connecting s to s with a first-order atomic formula ϕ as a label 
and t ⊆ s is the set of terminal states 
notice that edges are directed so s t ϕ t s ϕ the sample 
vo of figure is formally represented as i 
p x q y z s a b we assume an 
implicit existential quantification on any variables in ϕ so that for 
instance s a b stands for ∃a b s a b 
vos should allow for two kinds of non-determinism 
corresponding to choices autonomous agents can make viz i the one 
arising when there is more than one edge leaving a state and ii the 
one arising from variables in the formulae ϕ labelling an edge for 
which the agent carrying out the action instantiates these kinds 
of non-determinism are desirable as they help define generic and 
flexible coordination mechanisms 
another important concept we use is the roles of agents in vos 
roles as exploited in for instance and help us 
abstract from individual agents and define a pattern of behaviour to 
which any agent that adopts a role ought to conform moreover 
all agents with the same role are guaranteed the same rights duties 
and opportunities we shall make use of two finite non-empty sets 
agents ag agn and roles r rm 
representing respectively the sets of agent identifiers and role labels we 
refer generically to first-order terms i e constants variables and 
 nested functions as τ 
 semantics of vos 
the specification of a vo as a finite-state machine gives rise 
to a possibly infinite set of histories of computational behaviours 
in which the actions labelling the paths from the initial state to a 
final state are recorded although the actions comprising a vo are 
carried out distributedly we propose an explicit global account of 
all events in practice this can be achieved if we require individual 
 
we adopt prolog s convention and use strings starting with a capital letter to 
represent variables and strings starting with a small letter to represent constants 
agents to declare inform whatever actions they have carried out 
this assumes trustworthy agents naturally 
 
in order to record the authorship of the action we annotate the 
formulae with the agents unique identification our explicit global 
account of all events is a set of ground atomic formulae ϕ that 
is we only allow constants to appear as terms of formulae each 
formula is a truthful record of an action specified in the vo notice 
however that in the vo specification we do not restrict the syntax 
of the formulae variables may appear in them and when an agent 
performs an actual action then any variables of the specified action 
must be assigned values we thus define 
def a global execution state of a vo denoted as ξ is a 
finite possibly empty set of tuples a r ¯ϕ t where a ∈ agents 
is an agent identifier r ∈ roles is a role label ¯ϕ is a ground 
first-order atomic formula and t ∈ in is a time stamp 
for instance ag buyer p a states that agent ag 
adopting role buyer performed action p a at instant given a vo 
i s s e t an execution state ξ and a state s ∈ s we can 
define a function which obtains a possible next execution state viz 
h i ξ s ξ ∪ a r ¯ϕ t for one s s ϕ ∈ e such 
function h must address the two kinds of non-determinism above as 
well as the choice on the potential agents that can carry out the 
action and their adopted roles we also define a function to compute 
the set of all possible execution states h 
 i ξ s ξ ∪ a 
r ¯ϕ t s s ϕ ∈ e 
 norm-regulated vos 
we advocate a separation of concerns whereby the virtual 
organization is complemented with an explicit and separate set of norms 
that further regulates the behaviour of agents as they take part in 
the enactment of an organization the freedom of choice given to 
agents captured via the non-determinism of vos explained above 
must be curtailed in some circumstances for instance we might 
need to describe that whoever carried out ϕ is obliged to carry out 
ϕ so that if there is a choice point in which ϕ appears as a label 
of an edge then that edge should be followed 
rather than embedding such normative aspects into the agents 
design say by explicitly encoding normative aspects in the agents 
behaviour or into the vo itself say by addressing exceptions and 
deviant behaviour in the mechanism itself we adopt the view that 
a vo should be supplemented with a separate set of norms that 
further regulates the behaviour of agents as they take part in the 
enactment of the organization this separation of concerns should 
facilitate the design of mass however the different components 
 vos and norms must come together at some point in the design 
process our norms are defined as below 
def a norm generically referred to as ν is any construct 
of the form oτ τ ϕ pτ τ ϕ or fτ τ ϕ where τ τ are either 
variables or constants and ϕ is a first-order atomic formula 
we adopt the notation of oτ τ ϕ represents an obligation on 
agent τ taking up role τ to bring about ϕ we recall that τ τ are 
variables constants and functions applied to nested terms pτ τ ϕ 
and fτ τ ϕ stand for respectively a permission and a prohibition 
on agent τ playing role τ to bring about ϕ we shall assume that 
sorts are used to properly manipulate variables for agent identifiers 
and role labels 
we propose to formally represent the normative positions of all 
agents enacting a vo by normative position we mean the 
social burden associated to individuals that is their obligations 
permissions and prohibitions 
 
non-trustworthy agents can be accommodated in this proposal if we associate to 
each of them a governor agent which supervises the actions of the external agent and 
reports on them this approach was introduced in and is explained in section 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
def a global normative state ω is a finite and possibly 
empty set of tuples ω ν td ta te where ν is a norm as above 
and td ta te ∈ in are respectively the time when ν was 
declared introduced when ν becomes active and when ν expires 
td ≤ ta te 
it is worth noticing that we do not require the atomic formulae 
of norms to be ground there could be variables in them we 
assume an implicit universal quantification on the variables a r 
of norms xa rϕ for the deontic modalities x ∈ o p f so 
that for instance pa rp x b c stands for ∀a ∈ agents ∀r ∈ 
roles ∃x pa rp x b c we also refer to the tuples in ω as 
norms 
global normative states complement the execution states of vos 
with information on the normative positions of individual agents 
we can relate them via a function to obtain a norm-regulated next 
execution state of a vos that is g i ξ s ω t ξ t 
standing for the time of the update for instance we might want all 
prohibited actions to be excluded from the next execution state 
that is g i ξ s ω t ξ ∪ a r ¯ϕ t s s ϕ ∈ e and 
fa rϕ td ta te ∈ ω ta ≤ t ≤ te we might equally wish that 
only permitted actions be chosen for the next execution state we 
do not legislate or indeed recommend any particular way to 
regulate vos we do however offer simple underpinnings to allow 
arbitrary policies to be put in place 
in the same way that a normative state is useful to obtain the 
next execution state of a vo we can use an execution state to 
update a normative state for instance we might want to remove any 
obligation specific to an agent and role which has been carried 
out by that specific agent and role that is f ξ ω ω − obls 
obls oa rϕ td ta te ∈ ω a r ¯ϕ t ∈ ξ 
the management i e creation and updating of global 
normative states is an interesting area of research a simple but useful 
approach is reported in production rules generically depict 
how norms should be updated to reflect what agents have done and 
which norms currently hold in this paper our focus is not to 
propose how ω s should be managed we assume some mechanism 
which does that 
 norm conflicts 
we now define means to detect and resolve norm conflicts and 
inconsistencies we make use of the concept of unification 
of first-order terms τ i e constants variables or nested functions 
with terms as parameters initially we define substitutions 
def a substitution σ is a finite and possibly empty set of 
pairs x τ where x is a variable and τ is a term 
we define the application of a substitution as 
 c · σ c for a constant c 
 x · σ τ · σ if x τ ∈ σ otherwise x · σ x 
 pn 
 τ τn · σ pn 
 τ · σ τn · σ 
 xτ τ ϕ · σ x τ ·σ τ ·σ ϕ · σ 
 ν td ta te · σ ν · σ td ta te 
where x generically refers to any of the deontic modalities o p f 
unification between two terms τ τ consists of finding a 
substitution σ also called in this context the unifier of τ and τ such 
that τ · σ τ · σ many algorithms have been proposed to solve 
the unification problem a fundamental issue in automated theorem 
proving and more recent work provides very efficient ways to 
obtain unifiers we shall make use of the following definition 
def relationship unify τ τ σ holds iff there is a 
possibly empty σ such that τ · σ τ · σ 
we also define the unification of atomic formulae as unify pn 
 τ 
 τn pn 
 τ τn σ which holds iff τi · σ τi · σ ≤ 
i ≤ n the unify relationship checks if a substitution σ is indeed 
a unifier for τ τ but it can also be used to find such σ we assume 
that unify is a suitable implementation of a unification algorithm 
which i always terminates possibly failing if a unifier cannot be 
found ii is correct and iii has a linear computational complexity 
 conflict detection 
a norm conflict arises when an atomic formula labelling an edge 
in the vo i e an action is simultaneously permitted and 
prohibited in this case both norms are in conflict with regard to 
their agents roles and parameters terms of specific actions we 
propose to use unification to detect when a prohibition and a 
permission overlap and to employ the unifier to resolve the conflict 
for instance pa rp c x and fa bp y z are in conflict as they 
unify under σ a a r b y c x d if however the 
variables in fa bp y z do not get the values in σ then there will be 
no conflicts we thus propose to annotate the prohibitions in ω 
with unifiers called here conflict sets and use these annotations 
to determine what the variables of the prohibition cannot be in 
future unifications in order to avoid a conflict each prohibition 
is henceforth regarded as having such an annotation denoted as 
 fτ τ ϕ σc td ta te initially this annotation is empty 
we propose to curtail the influence of prohibitions thus giving 
agents more choices in the actions they may perform a similar 
approach could be taken whereby permissions are curtailed thus 
limiting the available agents actions each of these policies is 
possible we do not legislate over any of them nor do we give 
preference over any in this paper we are interested in formalising such 
policies within a simple mathematical framework a prohibition 
can be in conflict with various permissions in ω we therefore 
have to find the maximal set of conflicting pairs of permissions and 
prohibitions in ω by performing a pairwise inspection this 
requires identifying the substitution between two pairs of norms that 
characterises a conflict this is formally captured by the following 
definition 
def a conflict arises between two tuples ω ω ∈ ω under 
a substitution σ denoted as cflct ω ω σ iff the following 
conditions hold 
 ω fτ τ ϕ σc td ta te ω pτ τ 
ϕ td ta te 
 unify τ τ σ unify τ τ σ and unify ϕ ϕ σ 
 te − te ≤ ta − ta 
that is a prohibition and a permission conflict condition if 
and only if the agents and roles they apply to and their actions 
respectively unify under σ condition and their activation 
periods overlap condition substitution σ the conflict set 
unifies the agents roles and atomic formulae of a permission and a 
prohibition the annotation σc does not play any role when 
detecting conflicts but as we show below we have to update the 
annotation to reflect new curtailments to solve conflicts for 
instance cflct fa bp y d ∅ pa rp c x 
 a a r b y c z x holds we define below how we obtain 
the set of conflicting norms of a normative state ω 
def the finite possibly empty set of conflicting norms of a 
normative state ω denoted as cfls ω is defined as 
cfls ω ω ω σ ω ω ∈ ω cflct ω ω σ 
 conflict resolution 
a fine-grained way of resolving conflict can be done via 
unification we detect the overlapping of the norms influences i e how 
they affect the behaviours of agents in the vo and we curtail the 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
influence of the prohibition we illustrate with venn diagrams in 
figure the overlap of norm influences left which characterises a 
conflict and the curtailment necessary to resolve the conflict right 
the illustration shows the space of possible values for p x y and 
p x y 
pa rp c x 
fa bp y z 
p x y 
fa bp y z 
pa rp c x 
figure overlap of influence left and curtailment right 
two portions of this space defining the scope of influence of norms 
pa rp c x and fa bp y z the scope of these norms overlap 
illustrated by the intersection of boxes on the left in actions with 
values for instance a b p c a b p c n the 
curtailment of the prohibition eliminates the intersection it moves the 
scope of the norm influence to outside the influence of the 
permission if there were multiple overlaps among one prohibition and 
various permissions which is likely to happen then the prohibition 
will be multiply curtailed to move the scope of the norm to avoid 
all intersections 
the algorithm shown in figure depicts how we obtain a 
conflictfree set of norms it maps an existing set ω possibly with 
conflictalgorithm conflictresolution ω ω 
input ω 
output ω 
begin 
ω ω 
for each ω ∈ ω s t ω fa r ¯ϕ σc td ta te do 
if ω ω σ ∈ cfls ω then ω ω − ω 
end for 
for each ω ∈ ω s t ω fτ τ ϕ σc td ta te do 
σmax 
c 
 
ω ω σc ∈cfls ω 
 σc 
ω ω − ω ∪ fτ τ ϕ σc ∪ σmax 
c td ta te 
end for 
end 
figure algorithm to resolve conflicts in a set of norms 
ing norms onto a new set ω in which the conflicts if any are 
resolved the algorithm forms ω as a set that is 
conflict-freethis means that prohibitions are annotated with a conflict set that 
indicates which bindings for variables have to be avoided 
initially ω is set to be ω the algorithm operates in two stages 
in the first stage first for each loop we remove all conflicting 
prohibitions ω fa r ¯ϕ σc td ta te with ground agent role 
pairs a r and ground formulae ¯ϕ the only way to resolve 
conflicts arising from such prohibitions is to remove them altogether 
as we cannot curtail a fully ground norm in the second stage 
 second for each loop the remaining prohibitions in ω are examined 
the set cfls ω contains all conflicts between permissions and 
the remaining prohibitions in ω represented as tuples ω ω σc 
with σc representing the conflict set as a prohibition may have 
conflicts with various permissions the set cfls ω may contain 
more than one tuple for each prohibition in order to provide an ω 
that reflects all these conflicts for a specific prohibition we have 
to form σmax 
c containing all conflict sets σc for a given 
prohibition ω the maximal set is used to update the annotation of the 
prohibition 
it is important to explain the need for updating the conflict set 
of prohibitions normative states change as a result of agents 
actions existing permissions prohibitions and obligations are 
revoked and or new ones are put in place as a result of agents 
interactions with the environment and other agents whenever new 
norms are added we must check for new conflicts and 
inconsistencies if we only apply our algorithm to a pair consisting of an 
old and a new norm then some re-processing of pairs of old norms 
 which were dealt with before can be saved the removal of norms 
from the set ω is dealt with efficiently each permission to be 
removed must be checked first for conflicts with any existing 
prohibition re-processing can be avoided if we record the conflict instead 
of detecting it again if there is a conflict then the conflict set will 
have been recorded in the prohibition s annotation this conflict set 
is thus removed from the prohibition s annotation the removal 
of obligations follows a similar process prohibitions are removed 
without the need to consider their relationships with other norms 
our algorithm is correct in that it provides for a given ω a new 
ω in which i all ground prohibitions which conflict with 
permissions have been removed and ii all remaining annotated 
prohibitions fτ τ ¯ϕ σc td ta te will not unify with any of the 
permissions in ω provided the unifier does not appear in σc the 
first requirement is addressed by the first for each loop which does 
precisely this it removes all ground prohibitions which unify with 
an obligation the second requirement is addressed by the second 
for each loop each prohibition has its annotation σc added with 
σmax 
c thus accommodating the unifiers from all permissions that 
unify with the prohibition it is easy to see that the algorithm 
always terminates each of its two loops go through a finite set 
processing one element at a time the set cfls ω is computed in 
a finite number of steps as are the set operations performed within 
each loop the algorithm has however exponential complexity 
 
as the computation of cfls ω requires a pairwise comparison of 
all elements in ω 
we illustrate our algorithm with the following example let there 
be the following global normative state ω 
j 
 fa rp x y pa rp a b 
 fa rp a b pa rp d e 
ff 
the first loop removes the ground prohibition thus obtaining the 
following ω 
j 
 fa rp x y pa bp c d 
pe f p g h 
ff 
we then have the following set of conflicting norms cfls ω 
 
 
 
 
 fa rp x y 
pa bp c d 
 a a r b x c y d 
 
 
 
 fa rp x y 
pe f p g h 
 a e r f x g y h 
 
 
 
for each prohibition ω ∈ ω we retrieve all elements from w w 
σ ∈ cfls ω and collect their σ s in σmax 
c the final ω is 
thus 
 
 
 fa rp x y 
j 
 a a r b x c y d 
 a e r f x g y h 
ff 
 
pa rp a b pa rp d e 
 
 
 
the annotated set of conflict sets should be understood as a record 
of past unifications which informs how prohibitions should be used 
in the future in order to avoid any conflicts with permissions we 
show in section how annotations are used by norm-aware agents 
 norm inconsistencies 
if a substitution σ can be found that unifies an obligation and 
a prohibition then a situation of norm inconsistency occurs 
the obligation demands that an agent performs an action that is 
forbidden we can reuse the machinery introduced above for 
resolving conflicts between permissions and prohibitions in order to 
a detect and b resolve such inconsistencies with definition we 
 
the combinatorial effort is not necessary anymore if instead we maintain a set of 
norms conflict-free each time a new norm is to be introduced then we compare it with 
the existing ones thus making the maintenance process of linear complexity 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
express the nature of a conflict between a prohibition and 
permission similarly a situation of inconsistency can be defined reusing 
this definition and replacing the p deontic modality with o we can 
reuse the machinery for conflict resolution developed previously 
for resolving inconsistency the conflict resolution algorithm can 
be applied without change to accumulate a maximal conflict set 
σmax 
c for each prohibition in ω that unifies with obligations 
 norm-aware agent societies 
we now describe how our norm-regulated vos give rise to 
normaware agent societies we address open and heterogeneous mass 
we accommodate external agents by providing each of them with 
a corresponding governor agent this is a kind of chaperon 
that interacts with an external agent and observes and reports on its 
behaviour we show our architecture in figure below a number 
external governor 
agents agents tuple space 
ag 
£ 
¢ 
 
 
gov ⇐⇒ 
 
 
 
 
 
 
 
 
 
 
 
 i s ξ ω i s ξ ω · · · 
agn 
£ 
¢ 
 
 
govn ⇐⇒ 
figure architecture for norm-aware agent societies 
of external agents interact denoted by the with their 
corresponding governor agents the governor agents have access to 
the vo description i the current state s of the vo enactment the 
global execution state ξ and the global normative state ω 
governor agents are able to write to and read from denoted by the 
⇐⇒ a shared memory space e g a blackboard-like solution 
implemented as a tuple space updating the global configuration 
 denoted by the to reflect the dynamics of the vo enactment 
governor agents are necessary because we cannot anticipate or 
legislate over the design or behaviour of external agents we depict 
below how the pairs of governor external agents work together any 
non-deterministic choices on the vo are decided by the external 
agent any normative aspects are considered by the governor agent 
the governor agent represents the external agent within the vo 
as such it has the unique identifier of the external agent the 
governor agent keeps an account of all roles the external agent is 
currently playing in our vos it is possible for agents to take up more 
than one role simultaneously we define in figure how governor 
agents work - we use a logic program for this purpose we show 
 main id roles ← 
 get tuple i s ξ ω ∧ 
 terminate id roles i ξ ω 
 main id roles ← 
 get tuple i s ξ ω ∧ 
 filter norms id roles ω ωid ∧ 
 discuss norms id roles i s ξ ωid actions ∧ 
 update tuple roles actions newroles ∧ 
 main id newroles 
figure governor agent as a logic program 
the lines of our clauses numbered - the first clause lines - 
depicts the termination condition get tuple line retrieves 
i s ξ ω from the shared tuple space and terminate checks 
if the current vo enactment recorded in ξ has come to an end 
the team of governor agents synchronise their access to the tuple 
space thus ensuring each has a chance to function 
the second clause lines - depicts a generic loop when the 
termination condition of the first clause does not hold in this case 
the tuple is again retrieved line and the governor agent proceeds 
 line to analyse the current global normative state ω with a view 
to obtaining the subset ωid ⊆ ω of norms referring to agent id 
under roles roles predicate filter norms collects the norms 
which apply to agent id the governor agent s external agent in 
line the governor agent in possession of the applicable norms as 
well as other relevant information interacts with the external agent 
to decide on a set of actions which are norm-compliant - these 
actions will be used to update line the global execution state ξ 
in the process of updating the state of execution a new set of roles 
must be assigned to the external agent represented as newroles 
the governor agent keeps looping line using the identifier for 
the external agent and its new set of roles 
 using annotated norms 
we now explain how annotated norms are used by norm-aware 
agents we do so via the definition of predicate check which 
holds if its first argument a candidate action in the format of the 
elements of ξ of def is within the influence of an annotated 
prohibition ω its second parameter the definition as a logic 
program is shown in figure it checks line if the agent identifier 
 check action ω ← 
 action a r ¯ϕ t ∧ 
 ω fτ τ ϕ σc td ta te ∧ 
 unify a τ σ ∧ unify r τ σ ∧ unify ¯ϕ ϕ σ ∧ 
 forall σ σc ∈ σc unify σc σ σ mgus ∧ 
 mgus ∅∧ 
 ta ≤ t ≤ te 
figure check if action is within influence of curtailed norm 
and role of the action unify with the appropriate terms τ τ of ω 
and that the actions ¯ϕ ϕ themselves unify all under the same 
unifier σ it then verifies lines - that σ does not unify with any of 
the conflict sets in σc finally in line it checks if the time of the 
action is within the norm temporal influence 
the verification of non-unification of σ with any element of σc 
deserves an explanation the elements of σc are unifiers stating 
what values the variables of the norm cannot have that is they 
represent gaps in the original scope of the norm s influence the 
test thus equates to asking if the action is outside such gaps that is 
the action is within the curtailed scope of influence of the norm 
 action conflict inconsistency 
in our previous discussion norm conflict and inconsistency were 
detected via a direct comparison of the atomic formulae 
representing the action however conflicts and inconsistencies may also 
arise indirectly via relationships among actions for instance if 
p x amounts to q x x then norms pa rp x and fa rq x 
x are in conflict since pa rp x can be rewritten as pa rq x 
x and we thus have both pa rq x x and fa rq x x in 
the discussion below we concentrate on norm conflict but norm 
inconsistency can be dealt with similarly if we change the deontic 
modalities p for o 
relationships among actions are domain-dependent different 
domains have distinct ways of relating their actions engineers build 
ontologies to represent such relationships we propose a simple 
means to account for such relationships and show how these can 
be connected to the mechanisms introduced above rather than 
making use of sophisticated formalisms for ontology construction 
we employ a set of domain axioms defined below 
def the domain axioms denoted as δ are a finite and 
possibly empty set of formulae ϕ → ϕ ∧ · · · ∧ ϕn where ϕ ϕi ≤ 
i ≤ n are atomic first-order formulae 
our example above can be captured by δ p x → q x x 
 q x x → p x by explicitly representing and manipulating 
domain knowledge we achieve generality the very same 
machinery can be used with different domains a set of norms can have 
different conflicts and inconsistencies for distinct domains of 
application 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
