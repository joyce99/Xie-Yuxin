on the complexity of combinatorial auctions 
structured item graphs and hypertree decompositions 
 extended abstract 
georg gottlob 
computing laboratory 
oxford university 
ox qd oxford uk 
georg gottlob comlab ox ac uk 
gianluigi greco 
dipartimento di matematica 
university of calabria 
i- rende italy 
ggreco mat unical it 
abstract 
the winner determination problem in combinatorial 
auctions is the problem of determining the allocation of the 
items among the bidders that maximizes the sum of the 
accepted bid prices while this problem is in general 
nphard it is known to be feasible in polynomial time on 
those instances whose associated item graphs have bounded 
treewidth called structured item graphs formally an item 
graph is a graph whose nodes are in one-to-one 
correspondence with items and edges are such that for any bid the 
items occurring in it induce a connected subgraph note 
that many item graphs might be associated with a given 
combinatorial auction depending on the edges selected for 
guaranteeing the connectedness in fact the tractability 
of determining whether a structured item graph of a fixed 
treewidth exists and if so computing one was left as a 
crucial open problem 
in this paper we solve this problem by proving that the 
existence of a structured item graph is computationally 
intractable even for treewidth motivated by this bad news 
we investigate different kinds of structural requirements that 
can be used to isolate tractable classes of combinatorial 
auctions we show that the notion of hypertree decomposition 
a recently introduced measure of hypergraph cyclicity turns 
out to be most useful here indeed we show that the 
winner determination problem is solvable in polynomial time 
on instances whose bidder interactions can be represented 
with dual hypergraphs having bounded hypertree width 
even more surprisingly we show that the class of tractable 
instances identified by means of our approach properly 
contains the class of instances having a structured item graph 
categories and subject descriptors 
j computer applications social and behavioral 
sciences-economics f theory of computation 
analysis of algorithms and problem complexity 
 introduction 
combinatorial auctions combinatorial auctions are 
well-known mechanisms for resource and task allocation 
where bidders are allowed to simultaneously bid on 
combinations of items this is desirable when a bidder s valuation 
of a bundle of items is not equal to the sum of her valuations 
of the individual items this framework is currently used to 
regulate agents interactions in several application domains 
 cf e g such as electricity markets bandwidth 
auctions and transportation exchanges 
formally a combinatorial auction is a pair i b where 
i i im is the set of items the auctioneer has 
to sell and b b bn is the set of bids from the 
buyers interested in the items in i each bid bi has 
the form item bi pay bi where pay bi is a rational 
number denoting the price a buyer offers for the items in 
item bi ⊆ i an outcome for i b is a subset b of b 
such that item bi ∩item bj ∅ for each pair bi and bj 
of bids in b with i j 
the winner determination problem a crucial 
problem for combinatorial auctions is to determine the outcome 
b 
that maximizes the sum of the accepted bid prices i e 
bi∈b pay bi over all the possible outcomes this 
problem called winner determination problem e g is 
known to be intractable actually np-hard and even 
not approximable in polynomial time unless np zpp 
hence it comes with no surprise that several efforts have 
been spent to design practically efficient algorithms for 
general auctions e g and to identify classes of 
instances where solving the winner determination problem 
is feasible in polynomial time e g in fact 
constraining bidder interaction was proven to be useful for 
identifying classes of tractable combinatorial auctions 
item graphs currently the most general class of 
tractable combinatorial auctions has been singled out by 
modelling interactions among bidders with the notion of 
item graph which is a graph whose nodes are in one-to-one 
correspondence with items and edges are such that for any 
 
figure example maxwsp problem a hypergraph 
h i b 
 and a packing h for it b primal graph for 
h i b 
 and c d two item graphs for h i b 
 
bid the items occurring in it induce a connected subgraph 
indeed the winner determination problem was proven to be 
solvable in polynomial time if interactions among bidders 
can be represented by means of a structured item graph 
i e a tree or more generally a graph having tree-like 
structure -formally bounded treewidth 
to have some intuition on how item graphs can be built 
we notice that bidder interaction in a combinatorial auction 
i b can be represented by means of a hypergraph h i b 
such that its set of nodes n h i b coincides with set of 
items i and where its edges e h i b are precisely the bids 
of the buyers item bi bi ∈ b a special item graph for 
i b is the primal graph of h i b denoted by g h i b 
which contains an edge between any pair of nodes in some 
hyperedge of h i b then any item graph for h i b can be 
viewed as a simplification of g h i b obtained by deleting 
some edges yet preserving the connectivity condition on the 
nodes included in each hyperedge 
example the hypergraph h i b 
reported in 
figure a is an encoding for a combinatorial auction i b 
where i i i and item bi hi for each 
 ≤ i ≤ the primal graph for h i b 
is reported in 
figure b while two example item graphs are reported in 
figure c and d where edges required for maintaining 
the connectivity for h are depicted in bold 
open problem computing structured item 
graphs efficiently the above mentioned tractability result 
on structured item graphs turns out to be useful in practice 
only when a structured item graph either is given or can be 
efficiently determined however exponentially many item 
graphs might be associated with a combinatorial auction 
and it is not clear how to determine whether a structured 
item graph of a certain constant treewidth exists and if 
so how to compute such a structured item graph efficiently 
polynomial time algorithms to find the best 
simplification of the primal graph were so far only known for the cases 
where the item graph to be constructed is a line a cycle 
 or a tree but it was an important open problem cf 
 whether it is tractable to check if for a combinatorial 
auction an item graph of treewidth bounded by a fixed 
natural number k exists and can be constructed in polynomial 
time if so 
weighted set packing let us note that the hypergraph 
representation h i b of a combinatorial auction i b is 
also useful to make the analogy between the winner 
determination problem and the maximum weighted-set packing 
problem on hypergraphs clear e g 
formally a packing h for a hypergraph h is a set of 
hyperedges of h such that for each pair h h ∈ h with h h it 
holds that h ∩ h ∅ letting w be a weighting function for 
h i e a polynomially-time computable function from e h 
to rational numbers the weight of a packing h is the 
rational number w h h∈h w h where w then 
the maximum-weighted set packing problem for h w r t w 
denoted by maxwsp h w is the problem of finding a 
packing for h having the maximum weight over all the packings 
for h to see that maxwsp is just a different formulation 
for the winner determination problem given a 
combinatorial auction i b it is sufficient to define the weighting 
function w i b item bi pay bi then the set of the 
solutions for the weighted set packing problem for h i b 
w r t w i b coincides with the set of the solutions for the 
winner determination problem on i b 
example consider again the hypergraph h i b 
 
reported in figure a an example packing for h i b 
is 
h h which intuitively corresponds to an outcome for 
i b where the auctioneer accepted the bid b by 
assuming that bids b b and b are such that pay b 
pay b pay b the packing h is not a solution for 
the problem maxwsp h i b 
 w i b 
 indeed the packing 
h 
 h h is such that w i b 
 h 
 w i b 
 h 
contributions 
the primary aim of this paper is to identify large tractable 
classes for the winner determination problem that are 
moreover polynomially recognizable towards this aim we 
first study structured item graphs and solve the open 
problem in the result is very bad news 
it is np complete to check whether a combinatorial 
auction has a structured item graph of treewidth more 
formally letting c ig k denote the class of all the 
hypergraphs having an item tree of treewidth bounded by k 
we prove that deciding whether a hypergraph associated 
with a combinatorial auction problem belongs to c ig 
is np-complete 
in the light of this result it was crucial to assess whether 
there are some other kinds of structural requirement that 
can be checked in polynomial time and that can still be 
used to isolate tractable classes of the maximum 
weightedset packing problem or equivalently the winner 
determination problem our investigations this time led to very good 
news which are summarized below 
for a hypergraph h its dual ¯h v e is such that 
nodes in v are in one-to-one correspondence with 
hyperedges in h and for each node x ∈ n h h x ∈ h ∧ h ∈ 
 
e h is in e we show that maxwsp is tractable on the 
class of those instances whose dual hypergraphs have 
hypertree width bounded by k short class c hw k of 
hypergraphs note that a key issue of the tractability is to 
consider the hypertree width of the dual hypergraph ¯h 
instead of the auction hypergraph h in fact we can show 
that maxwsp remains np-hard even when h is acyclic i e 
when it has hypertree width even when each node is 
contained in hyperedges at most 
for some relevant special classes of hypergraphs in 
c hw k we design a higly-parallelizeable algorithm for 
maxwsp specifically if the weighting functions can be 
computed in logarithmic space and weights are 
polynomial e g when all the hyperegdes have unitary weights 
and one is interested in finding the packing with the 
maximum number of edges we show that maxwsp can be solved 
by a logcfl algorithm recall in fact that logcfl is 
the class of decision problems that are logspace reducible 
to context free languages and that logcfl ⊆ nc ⊆ p 
 see e g 
surprisingly we show that nothing is lost in terms of 
generality when considering the hypertree decomposition 
of dual hypergraphs instead of the treewidth of item 
graphs to the contrary the proposed hypertree-based 
decomposition method is strictly more general than the 
method of structured item graphs in fact we show that 
strictly larger classes of instances are tractable according 
to our new approach than according to the structured item 
graphs approach intuitively the np-hardness of 
recognizing bounded-width structured item graphs is thus not due 
to its great generality but rather to some peculiarities in 
its definition 
the proof of the above results give us some interesting 
insight into the notion of structured item graph indeed we 
show that structured item graphs are in one-to-one 
correspondence with some special kinds of hypertree 
decomposition of the dual hypergraph which we call strict hypertree 
decompositions a game-characterization for the notion of 
strict hypertree width is also proposed which specializes 
the robber and marshals game in proposed to 
characterize the hypertree width and which makes it clear the 
further requirements on hypertree decompositions 
the rest of the paper is organized as follows section 
discusses the intractability of structured item graphs section 
presents the polynomial-time algorithm for solving maxwsp 
on the class of those instances whose dual hypergraphs have 
bounded hypertree width and discusses the cases where the 
algorithm is also highly parallelizable the comparison 
between the classes c ig k and c hw k is discussed in 
section finally in section we draw our conclusions by also 
outlining directions for further research 
 complexity of structured 
item graphs 
let h be a hypergraph a graph g v e is an item 
graph for h if v n h and for each h ∈ e h the 
subgraph of g induced over the nodes in h is connected 
an important class of item graphs is that of structured item 
graphs i e of those item graphs having bounded treewidth 
as formalized below 
a tree decomposition of a graph g v e is a pair 
t χ where t n f is a tree and χ is a labelling 
function assigning to each vertex p ∈ n a set of vertices 
χ p ⊆ v such that the following conditions are satisfied 
 for each vertex b of g there exists p ∈ n such that 
b ∈ χ p for each edge b d ∈ e there exists p ∈ n 
such that b d ⊆ χ p for each vertex b of g the 
set p ∈ n b ∈ χ p induces a connected subtree of t 
the width of t χ is the number maxp∈n χ p − the 
treewidth of g denoted by tw g is the minimum width 
over all its tree decompositions 
the winner determination problem can be solved in 
polynomial time on item graphs having bounded treewidth 
theorem cf assume a k-width tree 
decomposition t χ of an item graph for h is given then 
maxwsp h w can be solved in time o t 
× e h k 
 
many item graphs can be associated with a hypergraph 
as an example observe that the item graph in figure c 
has treewidth while figure d reports an item graph 
whose treewidth is indeed it was an open question 
whether for a given constant k it can be checked in 
polynomial time if an item graph of treewidth k exists and if so 
whether such an item graph can be efficiently computed 
let c ig k denote the class of all the hypergraphs having 
an item graph g such that tw g ≤ k the main result of 
this section is to show that the class c ig k is hard to 
recognize 
theorem deciding whether a hypergraph h belongs to 
c ig is np-hard 
the proof of this result relies on an elaborate reduction from 
the hamiltonian path problem hp s t of deciding whether 
there is an hamiltonian path from a node s to a node t in a 
directed graph g n e to help the intuition we report 
here a high-level overview of the main ingredients exploited 
in the proof 
 
the general idea it to build a hypergraph hg such that 
there is an item graph g for hg with tw g ≤ if and only 
if hp s t over g has a solution first we discuss the way 
hg is constructed see figure a for an illustration where 
the graph g consists of the nodes s x y and t and the set of 
its edges is e s x e x y e x t e y t 
from g to hg let g n e be a directed graph 
then the set of the nodes in hg is such that for each 
x ∈ n n hg contains the nodes bsx btx bx bx bdx for 
each e x y ∈ e n hg contains the nodes nsx nsx 
nty nty nse 
x and nte 
y no other node is in n hg 
hyperedges in hg are of three kinds 
 for each x ∈ n e hg contains the hyperedges 
 sx bsx ∪ nse 
x e x y ∈ e 
 tx btx ∪ nte 
x e z x ∈ e 
 a 
x bdx bx a 
x bdx bx and a 
x bx bx 
-notice that these hyperedges induce a clique on 
the nodes bx bx bdx 
 
detailed proofs can be found in the appendix available at 
www mat unical it ∼ggreco papers ca pdf 
 
figure proof of theorem a from g to hg - hyperedges in and are reported only b a skeleton 
for a tree decomposition td for hg 
 sa 
x bsx bx sa 
x bsx bx sa 
x 
 bsx bdx -notice that these hyperedges plus 
a 
x a 
x and a 
x induce a clique on the nodes 
 bsx bx bx bdx 
 ta 
x btx bx ta 
x btx bx and ta 
x 
 btx bdx -notice that these hyperedges plus 
a 
x a 
x and a 
x induce a clique on the nodes 
 btx bx bx bdx 
 for each e x y ∈ e e hg contains the hyperedges 
 shx nsx nsx 
 thy nty nty 
 see nsx nse 
x and see nsx nse 
x -notice 
that these two hyperedges plus shx induce a clique 
on the nodes nsx nsx nse 
x 
 tee nty nte 
y and tee nty nte 
y -notice 
that these two hyperedges plus thy induce a clique 
on the nodes nty nty nte 
y 
notice that each of the above hyperedges but those of the 
form sx and tx contains exactly two nodes as an example 
of the hyperedges of kind and the reader may refer 
to the example construction reported in figure a and 
notice for instance that sx bsx nse 
x nse 
x and that 
tt btt nte 
t nte 
t 
 finally we denote by dg the set containing the 
hyperedges in e hg of the third kind in the 
reduction we are exploiting dg can be an arbitrary set 
of hyperedges satisfying the four conditions that are 
discussed below let pg be the set of the following 
 pg ≤ n × e pairs pg bx bx x ∈ n ∪ 
 nsx nsx nty nty nse 
x nte 
y e x y ∈ e 
also let i v denote the set h ∈ e h v ∈ h of the 
hyperedges of h that are touched by v and for a set 
v ⊆ n h let i v v∈v i v then dg has to be 
a set such that 
 c ∀ α β ∈ pg i α ∩ i β ∩ dg ∅ 
 c ∀ α β ∈ pg i α ∪ i β ⊇ dg 
 c ∀α ∈ n such that ∃β ∈ n with α β ∈ pg or 
 β α ∈ pg it holds i α ∩ dg ∅ and 
 c ∀s ⊆ n such that s ≤ and where ∃α β ∈ s 
with α β ∈ pg it is the case that i s ⊇ dg 
intuitively the set dg is such that each of its hyperedges 
is touched by exactly one of the two nodes in every pair 
 
of pg - cf c and c moreover hyperedges in 
dg touch only vertices included in at least a pair of pg 
- cf c and any triple of nodes is not capable of 
touching all the elements of dg if none of the pairs that 
can be built from it belongs to pg - cf c 
the reader may now ask whether a set dg exists at 
all satisfying c c c and c in the following 
lemma we positively answer this question and refer the 
reader to its proof for an example construction 
lemma a set dg with dg × pg 
satisfying conditions c c c and c can be built 
in time o pg 
 
key ingredients we are now in the position of presenting 
an overview of the key ingredients of the proof let g be 
an arbitrary item graph for hg and let td t χ be a 
 -width tree decomposition of g note that because of the 
cliques e g on the nodes bsx bx bx bdx any item graph 
for hg has treewidth at least 
there are three basic observations serving the purpose of 
proving the correctness of the reduction 
blocks of td first we observe that td must contain 
some special kinds of vertex specifically for each 
node x ∈ n td contains a vertex bs x such that 
χ bs x ⊇ bsx bx bx bdx and a vertex bt x such 
that χ bt x ⊇ btx bx bx bdx and for each edge 
e x y ∈ e td contains a vertex ns x e such that 
χ ns x e ⊇ nse 
x nsx nsx and a vertex nt y e such 
that χ nt y e ⊇ nte 
y nty nty 
intuitively these vertices are required to cover the 
cliques of hg associated with the hyperedges of kind 
 and each of these vertices plays a specific 
role in the reduction indeed each directed edge 
e x y ∈ e is encoded in td by means of the 
vertices ns x e representing precisely that e starts 
from x and nt y e representing precisely that e 
terminates into y also each node x ∈ n is encoded in 
td be means of the vertices bs x representing the 
starting point of edges originating from x and bt x 
representing the terminating point of edges ending into 
x as an example figure b reports the skeleton 
of a tree decomposition td the reader may notice 
in it the blocks defined above and how they are 
related with the hypergraph hg in figure a - other 
blocks in it of the form w x y are defined next 
connectedness between blocks 
and uniqueness of the connections the second 
crucial observation is that in the path connecting a 
vertex of the form bs x resp bt y with a vertex of 
the form ns x e resp nt y e there is one special 
vertex of the form w x y such that χ w x y ⊇ 
 nse 
x nte 
y for some edge e x y ∈ e 
guaranteeing the existence of one such vertex is precisely 
the role played by the hyperedges in dg the 
arguments for the proof are as follows first we 
observe that i χ bs x ∩ i χ ns x e ⊇ dg ∪ sx 
and i χ bt y ∩ i χ nt y e ⊇ dg ∪ ty then 
we show a property stating that for a pair of 
consecutive vertices p and q in the path connecting bs x 
and ns x e resp bt y and nt y e i χ p ∩ χ q ⊇ 
i χ bs x ∩ i χ ns x e resp i χ p ∩ χ q ⊇ 
i χ bt x ∩ i χ nt y e thus we have i χ p ∩ 
χ q ⊇ dg ∪ sx resp i χ p ∩χ q ⊇ dg ∪ ty 
based on this observation and by exploiting the 
properties of the hyperedges in dg it is not difficult to 
show that any pair of consecutive vertices p and q 
must share two nodes of hg forming a pair in pg and 
must both touch sx resp ty when the treewidth 
of g is we can conclude that a vertex say w x y 
in this path is such that χ w x y ⊇ nse 
x nte 
y for 
some edge e x y ∈ e - to this end note that 
nse 
x ∈ sx nte 
t ∈ ty and i χ w x y ⊇ dg in 
particular w x y is the only kind of vertex satisfying these 
conditions i e in the path there is no further vertex 
of the form w x z for z y resp w z y for z x 
to help the intuition we observe that having a vertex 
of the form w x y in td corresponds to the selection 
of an edge from node x to node y in the hamiltonian 
path in fact given the uniqueness of these vertices 
selected for ensuring the connectivity a one-to-one 
correspondence can be established between the existence 
of a hamiltonian path for g and the vertices of the 
form w x y as an example in figure b the 
vertices of the form w s x w x y and w y t are in td 
and gt d shows the corresponding hamiltonian path 
unused blocks finally the third ingredient of the proof 
is the observation that if a vertex of the form w x y 
for an edge e x y ∈ e is not in td i e if the 
edge x y does not belong to the hamiltonian path 
then the corresponding block ns x e resp nt y e 
can be arbitrarily appended in the subtree rooted at 
the block ns x e resp nt y e where e is the edge of 
the form e x z resp e z y such that w x z 
 resp w z y is in td 
e g figure a shows w x t which is not used in 
td and figure b shows how the blocks ns x e 
and nt t e can be arranged in td for ensuring the 
connectedness condition 
 tractable cases via hypertree 
decompositions 
since constructing structured item graphs is intractable it 
is relevant to assess whether other structural restrictions can 
be used to single out classes of tractable maxwsp instances 
to this end we focus on the notion of hypertree 
decomposition which is a natural generalization of hypergraph 
acyclicity and which has been profitably used in other 
domains e g constraint satisfaction and database query 
evaluation to identify tractability islands for np-hard problems 
a hypertree for a hypergraph h is a triple t χ λ where 
t n e is a rooted tree and χ and λ are labelling 
functions which associate each vertex p ∈ n with two sets 
χ p ⊆ n h and λ p ⊆ e h if t n e is a subtree 
of t we define χ t v∈n χ v we denote the set of 
vertices n of t by vertices t moreover for any p ∈ n 
tp denotes the subtree of t rooted at p 
definition a hypertree decomposition of a 
hypergraph h is a hypertree hd t χ λ for h which satisfies 
all the following conditions 
 for each edge h ∈ e h there exists p ∈ vertices t 
such that h ⊆ χ p we say that p covers h 
 
figure example maxwsp problem a hypergraph 
h b hypergraph ¯h b a -width hypertree 
decomposition of ¯h 
 for each node y ∈ n h the set p ∈ vertices t 
y ∈ χ p induces a connected subtree of t 
 for each p ∈ vertices t χ p ⊆ n λ p 
 for each p ∈ vertices t n λ p ∩ χ tp ⊆ χ p 
the width of a hypertree decomposition t χ λ is 
maxp∈vertices t λ p the hypertree width hw h of h 
is the minimum width over all its hypertree decompositions 
a hypergraph h is acyclic if hw h p 
example the hypergraph h i b 
reported in 
figure a is an example acyclic hypergraph instead both 
the hypergraphs h and ¯h shown in figure a and 
figure b respectively are not acyclic since their hypertree 
width is a -width hypertree decomposition for ¯h is 
reported in figure c 
in particular observe that h has been obtained by 
adding the two hyperedges h and h to h i b 
to model 
for instance that two new bids b and b respectively 
have been proposed to the auctioneer 
in the following rather than working on the hypergraph 
h associated with a maxwsp problem we shall deal with its 
dual ¯h i e with the hypergraph such that its nodes are in 
one-to-one correspondence with the hyperedges of h and 
where for each node x ∈ n h h x ∈ h ∧ h ∈ e h 
is in e ¯h as an example the reader may want to check 
again the hypergraph h in figure a and notice that the 
hypergraph in figure b is in fact its dual 
the rationale for this choice is that issuing restrictions on 
the original hypergraph is a guarantee for the tractability 
only in very simple scenarios 
theorem on the class of acyclic hypergraphs maxwsp 
is in p if each node occurs into two hyperedges at most 
and np-hard even if each node is contained into three 
hyperedges at most 
 hypertree decomposition on the dual 
hypergraph and tractable packing 
problems 
for a fixed constant k let c hw k denote the class of 
all the hypergraphs whose dual hypergraphs have 
hypertree width bounded by k the maximum weighted-set 
packing problem can be solved in polynomial time on the class 
c hw k by means of the algorithm computesetpackingk 
shown in figure 
the algorithm receives in input a hypergraph h a 
weighting function w and a k-width hypertree decomposition 
hd t n e χ λ of ¯h 
for each vertex v ∈ n let hv be the hypergraph whose 
set of nodes n hv ⊆ n h coincides with λ v and whose 
set of edges e hv ⊆ e h coincides with χ v in an 
initialization step the algorithm equips each vertex v with all 
the possible packings for hv which are stored in the set 
hv note that the size of hv is bounded by e h k 
 
since each node in λ v is either left uncovered in a 
packing or is covered with precisely one of the hyperedges in 
χ v ⊆ e h then computesetpackingk is designed to 
filter these packings by retaining only those that conform 
with some packing for hc for each children c of v in t as 
formalized next let hv and hc be two packings for hv and 
hc respectively we say that hv conforms with hc denoted 
by hv ≈ hc if for each h ∈ hc ∩ e hv h is in hv and for 
each h ∈ e hc − hc h is not in hv 
example consider again the hypertree 
decomposition of ¯h reported in figure c then the set of all 
the possible packings which are build in the initialization 
step of computesetpackingk for each of its vertices is 
refigure example application of algorithm 
computesetpackingk 
 
input h w and a k-width hypertree decomposition hd t n e χ λ of ¯h 
output a solution to maxwsp h w 
var hv set of packings for hv for each v ∈ n h 
 packing for h 
v 
hv 
 rational number for each partial packing hv for hv 
hhv c partial packing for hc for each partial packing hv for hv and for each v c ∈ e 
 
-------------------------------------------procedure bottomup 
begin 
done the set of all the leaves of t 
while ∃v ∈ t such that i v ∈ done and ii c c is child of v ⊆ done do 
for each c such that v c ∈ e do 
hv hv − hv ∃hc ∈ hc s t hv ≈ hc 
for each hv ∈ hv do 
v 
hv 
 w hv 
for each c such that v c ∈ e do 
¯hc arg maxhc∈hc hv≈ hc 
c 
hc 
− w hc ∩ hv 
hhv c ¯hc set best packing 
v 
hv 
 v 
hv 
 c 
¯hc 
− w ¯hc ∩ hv 
end for 
end for 
done done ∪ v 
end while 
end 
 
-------------------------------------------begin main 
for each vertex v in t do 
hv hv packing for hv 
bottomup 
let r be the root of t 
¯hr arg maxhr∈hr 
r 
hr 
 
h 
 ¯hr include packing 
t opdown r hr 
return h 
 
end 
procedure t opdown v vertex of n ¯hv ∈ hv 
begin 
for each c ∈ n s t v c ∈ e do 
¯hc h¯hv c 
h 
 h 
∪ ¯hc include packing 
t opdown c ¯hc 
end for 
end 
figure algorithm computesetpackingk 
ported in figure a for instance the root v is such that 
hv h h h 
moreover an arrow from a packing hc to hv denotes that 
hv conforms with hc for instance the reader may check 
that the packing h ∈ hv conforms with the packing 
 h h ∈ hv but do not conform with h ∈ hv 
computesetpackingk builds a solution by traversing t in 
two phases in the first phase vertices of t are processed 
from the leaves to the root r by means of the procedure 
bottomup for each node v being processed the set hv is 
preliminary updated by removing all the packings hv that 
do not conform with any packing for some of the children 
of v after this filtering is performed the weight hv is 
updated intuitively v 
hv 
stores the weight of the best partial 
packing for h computed by using only the hyperedges 
occurring in χ tv indeed if v is a leaf then v 
hv 
 w hv 
otherwise for each child c of v in t v 
hv 
is updated with 
the maximum of c 
hc 
− w hc ∩ hv over all the packings hc 
that conforms with hv resolving ties arbitrarily the 
packing ¯hc for which this maximum is achieved is stored in the 
variable hhv c 
in the second phase the tree t is processed starting from 
the root firstly the packing h 
is selected that maximizes 
the weight equipped with the packings in hr then 
procedure topdown is used to extend h 
to all the other partial 
packings for vertices of t in particular at each vertex v 
h 
is extended with the packing hhv c for each child c of v 
example assume that in our running example 
w h w h w h w h then an 
execution of computesetpackingk is graphically depicted in 
figure b where an arrow from a packing hc to a 
packing hv is used to denote that hc hhv c specifically the 
choices made during the computation are such that the 
packing h h is computed 
in particular during the bottom-up phase we have that 
 v is processed and we set v 
 h v 
 h and v 
 
 v is processed and we set v 
 h v 
 h and v 
 
 v is processed and we set v 
 h v 
 h v 
 h 
v 
 h v 
 h h and v 
 v is processed 
and we set v 
 h v 
 h v 
 h and v 
 for 
instance note that v 
 h since h conforms with the 
packing h of hv such that v 
 h 
then at the beginning of the top-down phase 
computesetpackingk selects h as a packing for hv and 
propagates this choice in the tree equivalently the 
algorithm may have chosen h 
as a further example the way the solution h is 
obtained by the algorithm when w h and w h 
w h w h is reported in figure c notice 
that this time in the top-down phase computesetpackingk 
starts selecting h as the best packing for hv 
theorem let h be a hypergraph and w be a weighting 
function for it let hd t χ λ be a complete k-width 
hypertree decomposition of ¯h then computesetpackingk 
on input h w and hd correctly outputs a solution for 
maxwsp h w in time o t × e h k 
 
proof sketch we observe that h 
 computed by 
computesetpackingk is a packing for h indeed consider 
a pair of hyperedges h and h in h 
 and assume for the 
sake of contradiction that h ∩ h ∅ let v resp v 
be an arbitrary vertex of t for which computesetpackingk 
included h resp h in h 
in the bottom-down 
computation by construction we have h ∈ χ v and h ∈ χ v 
 
let i be an element in h ∩ h in the dual hypergraph 
h i is a hyperedge in e ¯h which covers both the nodes 
h and h hence by condition in definition there is 
a vertex v ∈ vertices t such that h h ⊆ χ v note 
that because of the connectedness condition in definition 
we can also assume w l o g that v is in the path connecting 
v and v in t 
let hv ∈ hv denote the element added by 
computesetpackingk into h 
during the bottom-down 
phase since the elements in hv are packings for hv it is the 
case that either h ∈ hv or h ∈ hv assume w l o g that 
h ∈ hv and notice that each vertex w in t in the path 
connecting v to v is such that h ∈ χ w because of the 
connectedness condition hence because of definition of 
conformance the packing hw selected by computesetpackingk 
to be added at vertex w in h 
must be such that h ∈ hw 
this holds in particular for w v contradiction with the 
definition of v 
therefore h 
is a packing for h it remains then to show 
that it has the maximum weight over all the packings for h 
to this aim we can use structural induction on t to prove 
that in the bottom-up phase the variable v 
hv 
is updated 
to contain the weight of the packing on the edges in χ tv 
which contains hv and which has the maximum weight over 
all such packings for the edges in χ tv then the result 
follows since in the top-down phase the packing hr giving 
the maximum weight over χ tr e h is first included in 
h 
 and then extended at each node c with the packing hhv c 
conformingly with hv and such that the maximum value of 
v 
hv 
is achieved 
as for the complexity observe that the initialization step 
requires the construction of the set hv for each vertex v and 
each set has size e h k 
at most then the function 
bottomup checks for the conformance between strategies 
in hv with strategies in hc for each pair v c ∈ e and 
updates the weight v 
hv 
 these tasks can be carried out in 
time o e h k 
 and must be repeated for each edge 
in t i e o t times finally the function topdown can 
be implemented in linear time in the size of t since it just 
requires updating h 
by accessing the variable hhv c 
the above result shows that if a hypertree decomposition 
of width k is given the maxwsp problem can be efficiently 
solved moreover differently from the case of structured 
item graphs it is well known that deciding the existence of 
a k-bounded hypertree decomposition and computing one 
 if any are problems which can be efficiently solved in 
polynomial time therefore theorem witnesses that the 
class c hw k actually constitutes a tractable class for the 
winner determination problem 
as the following theorem shows for large subclasses 
 that depend only on how the weight function is specified 
maxwsp h w is even highly parallelizeable let us call a 
weighting function smooth if it is logspace computable and 
if all weights are polynomial and thus just require o log n 
bits for their representation recall that logcfl is a 
parallel complexity class contained in nc cf the 
functional version of logcfl is llogcfl 
 which is obtained by 
equipping a logspace transducer with an oracle in logcfl 
theorem let h be a hypergraph in c hw k and let w 
be a smooth weighting function for it then maxwsp h w 
is in llogcfl 
 
 hypertree decompositions vs 
structured item graphs 
given that the class c hw k has been shown to be an 
island of tractability for the winner determination problem 
and given that the class c ig k has been shown not to be 
efficiently recognizable one may be inclined to think that 
there are instances having unbounded hypertree width but 
admitting an item graph of bounded tree width so that the 
intractability of structured item graphs would lie in their 
generality 
surprisingly we establish this is not the case the line of 
the proof is to first show that structured item graphs are in 
one-to-one correspondence with a special kind of hypertree 
decompositions of the dual hypergraph which we shall call 
strict then the result will follow by proving that k-width 
strict hypertree decompositions are less powerful than 
kwith hypertree decompositions 
 strict hypertree decompositions 
let h be a hypergraph and let v ⊆ n h be a set of 
nodes and x y ∈ n h x is v -adjacent to y if there 
exists an edge h ∈ e h such that x y ⊆ h − v a 
 v -path π from x to y is a sequence x x x y 
of variables such that xi is v -adjacent to xi for each 
i ∈ - a set w ⊆ n h of nodes is v -connected 
if ∀x y ∈ w there is a v -path from x to y a 
 v -component is a maximal v -connected non-empty set 
of nodes w ⊆ n h − v for any v -component c let 
e c h ∈ e h h ∩ c ∅ 
definition a hypertree decomposition hd 
t χ λ of h is strict if the following conditions hold 
 for each pair of vertices r and s in vertices t 
such that s is a child of r and for each 
 χ r -component cr s t cr ∩ χ ts ∅ cr is a 
 χ r ∩ n λ r ∩ λ s -component 
 for each edge h ∈ e h there is a vertex p such that 
h ∈ λ p and h ⊆ χ p we say p strongly covers h 
 for each edge h ∈ e h the set p ∈ vertices t h ∈ 
λ p induces a connected subtree of t 
the strict hypertree width shw h of h is the minimum 
width over all its strict hypertree decompositions p 
the basic relationship between nice hypertree 
decompositions and structured item graphs is shown in the following 
theorem 
theorem let h be a hypergraph such that for each 
node v ∈ n h v is in e h then a k-width tree 
decomposition of an item graph for h exists if and only if ¯h 
has a k -width strict hypertree decomposition 
 
note that as far as the maximum weighted-set packing 
problem is concerned given a hypergraph h we can always 
assume that for each node v ∈ n h v is in e h in 
fact if this hyperedge is not in the hypergraph then it can 
be added without loss of generality by setting w v 
therefore letting c shw k denote the class of all the 
hypergraphs whose dual hypergraphs associated with maximum 
 
the term only plays the technical role of taking care 
of the different definition of width for tree decompositions 
and hypertree decompositions 
 
weighted-set packing problems have strict hypertree width 
bounded by k we have that c shw k c ig k 
by definition strict hypertree decompositions are special 
hypertree decompositions in fact we are able to show that 
the additional conditions in definition induce an actual 
restriction on the decomposition power 
theorem c ig k c shw k ⊂ c hw k 
a game theoretic view we shed further lights on 
strict hypertree decompositions by discussing an interesting 
characterization based on the strict robber and marshals 
game defined by adapting the robber and marshals game 
defined in which characterizes hypertree width 
the game is played on a hypergraph h by a robber against 
k marshals which act in coordination marshals move on 
the hyperedges of h while the robber moves on nodes of 
h the robber sees where the marshals intend to move and 
reacts by moving to another node which is connected with 
its current position and through a path in g h which does 
not use any node contained in a hyperedge that is occupied 
by the marshals before and after their move-we say that 
these hyperedges are blocked note that in the basic game 
defined in the robber is not allowed to move on vertices 
that are occupied by the marshals before and after their 
move even if they do not belong to blocked hyperedges 
importantly marshals are required to play monotonically 
i e they cannot occupy an edge that was previously 
occupied in the game and which is currently not the marshals 
win the game if they capture the robber by occupying an 
edge covering a node where the robber is otherwise the 
robber wins 
theorem let h be a hypergraph such that for each 
node v ∈ n h v is in e h then ¯h has a k-width 
strict hypertree decomposition if and only if k marshals can 
win the strict robber and marshals game on ¯h no matter 
of the robber s moves 
 conclusions 
we have solved the open question of determining the 
complexity of computing a structured item graph 
associated with a combinatorial auction scenario the result is 
bad news since it turned out that it is np-complete to 
check whether a combinatorial auction has a structured item 
graph even for treewidth motivated by this result we 
investigated the use of hypertree decomposition on the dual 
hypergraph associated with the scenario and we shown that 
the problem is tractable on the class of those instances whose 
dual hypergraphs have bounded hypertree width for some 
special yet relevant cases a highly parallelizable algorithm 
is also discussed interestingly it also emerged that the class 
of structured item graphs is properly contained in the class 
of instances having bounded hypertree width hence the 
reason of their intractability is not their generality 
in particular the latter result is established by showing 
a precise relationship between structured item graphs and 
restricted forms of hypertree decompositions on the dual 
hypergraph called query decompositions see e g in 
the light of this observation we note that proving some 
approximability results for structured item graphs requires a 
deep understanding of the approximability of query 
decompositions which is currently missing in the literature 
as a further avenue of research it would be relevant to 
enhance the algorithm computesetpackingk e g by using 
specialized data structures in order to avoid the quadratic 
dependency from e h k 
 
finally an other interesting question is to assess whether 
the structural decomposition techniques discussed in the 
paper can be used to efficiently deal with generalizations of the 
winner determination problem for instance it might be 
relevant in several application scenarios to design algorithms 
that can find a selling strategy when several copies of the 
same item are available for selling and when moreover the 
auctioneer is satisfied when at least a given number of copies 
is actually sold 
acknowledgement 
g gottlob s work was supported by the ec - e-commerce 
competence center vienna and by a royal society 
wolfson research merit award in particular this award 
allowed gottlob to invite g greco for a research visit to 
oxford in addition g greco is supported by icar-cnr 
and by m i u r under project tocai it 
 references 
 i adler g gottlob and m grohe hypertree-width 
and related hypergraph invariants in proc of 
eurocomb pages - 
 c boutilier solving concisely expressed 
combinatorial auction problems in proc of 
aaai pages - 
 v conitzer j derryberry and t sandholm 
combinatorial auctions with structured item graphs 
in proc of aaai pages - 
 e m eschen and j p sinrad an o n 
 algorithm for 
circular-arc graph recognition in proc of soda 
pages - 
 y fujishima k leyton-brown and y shoham 
taming the computational complexity of 
combinatorial auctions optimal and approximate in 
proc of ijcai pages - 
 g gottlob n leone and f scarcello robbers 
marshals and guards game theoretic and logical 
characterizations of hypertree width journal of 
computer and system sciences - 
 g gottlob n leone and s scarcello hypertree 
decompositions and tractable queries journal of 
computer and system sciences - 
 h h hoos and c boutilier solving combinatorial 
auctions using stochastic local search in proc of 
aaai pages - 
 d johnson a catalog of complexity classes in 
p cramton y shoham and r steinberg editors 
handbook of theoretical computer science volume 
a algorithms and complexity pages - 
 n korte and r h mohring an incremental 
linear-time algorithm for recognizing interval graphs 
siam journal on computing - 
 d lehmann r m¨uller and t sandholm the 
winner determination problem in p cramton 
y shoham and r steinberg editors combinatorial 
auctions mit press 
 d lehmann l i o callaghan and y shoham 
truth revelation in approximately efficient 
 
combinatorial auctions j acm - 
 r mcafee and j mcmillan analyzing the airwaves 
auction journal of economic perspectives 
 
 j mcmillan selling spectrum rights journal of 
economic perspectives - 
 n nisan bidding and allocation in combinatorial 
auctions in proc of ec pages - 
 n robertson and p seymour graph minors ii 
algorithmic aspects of tree width journal of 
algorithms - 
 m h rothkopf a pekec and r m harstad 
computationally manageable combinatorial auctions 
management science - 
 t sandholm an implementation of the contract net 
protocol based on marginal cost calculations in proc 
of aaai pages - 
 t sandholm algorithm for optimal winner 
determination in combinatorial auctions artificial 
intelligence - - 
 t sandholm winner determination algorithms in 
p cramton y shoham and r steinberg editors 
combinatorial auctions mit press 
 t sandholm and s suri bob improved winner 
determination in combinatorial auctions and 
generalizations artificial intelligence - 
 m tennenholtz some tractable combinatorial 
auctions in proc of aaai pages - 
 e zurel and n nisan an efficient approximate 
allocation algorithm for combinatorial auctions in 
proc of ec pages - 
 
