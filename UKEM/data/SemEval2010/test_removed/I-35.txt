distributed norm management in regulated 
multi-agent systems 
dorian gaertner 
dept of computing 
imperial college london 
london sw az 
united kingdom 
dg  doc ic ac uk 
andres garcia-camino 
pablo noriega 
j -a rodriguez-aguilar 
iiia-csic 
 bellaterra spain 
 andres pablo jar  iiia csic es 
wamberto vasconcelos 
dept of computing science 
university of aberdeen 
aberdeen ab ue 
united kingdom 
wvasconcelos acm org 
abstract 
norms are widely recognised as a means of coordinating 
multi-agent systems the distributed management of norms 
is a challenging issue and we observe a lack of truly 
distributed computational realisations of normative models in 
order to regulate the behaviour of autonomous agents that 
take part in multiple related activities we propose a 
normative model the normative structure ns an artifact that 
is based on the propagation of normative positions 
 obligations prohibitions permissions as consequences of agents 
actions within a ns conflicts may arise due to the dynamic 
nature of the mas and the concurrency of agents actions 
however ensuring conflict-freedom of a ns at design time 
is computationally intractable we show this by 
formalising the notion of conflict providing a mapping of nss into 
coloured petri nets and borrowing well-known theoretical 
results from that field since online conflict resolution is 
required we present a tractable algorithm to be employed 
distributedly we then demonstrate that this algorithm is 
paramount for the distributed enactment of a ns 
categories and subject descriptors 
i distributed artificial intelligence languages 
and structures 
general terms 
algorithms design theory 
 introduction 
a fundamental feature of open regulated multi-agent 
systems in which autonomous agents interact is that 
participating agents are meant to comply with the conventions 
of the system norms can be used to model such 
conventions and hence as a means to regulate the observable 
behaviour of agents there are many contributions on 
the subject of norms from sociologists philosophers and 
logicians e g however there are very few proposals 
for computational realisations of normative models - the 
way norms can be integrated in the design and execution 
of mass the few that exist e g operate in 
a centralised manner which creates bottlenecks and single 
points-of-failure to our knowledge no proposal truly 
supports the distributed enactment of normative environments 
in our paper we approach that problem and propose means 
to handle conflicting commitments in open regulated 
multiagent systems in a distributed manner the type of 
regulated mas we envisage consists of multiple concurrent 
related activities where agents interact each agent may 
concurrently participate in several activities and change from 
one activity to another an agent s actions within an 
activity may have consequences in the form of normative 
positions i e obligations permissions and prohibitions 
that may constrain its future behaviour for instance a 
buyer agent who runs out of credit may be forbidden to 
make further offers or a seller agent is obliged to deliver 
after closing a deal we assume that agents may choose not 
to fulfill all their obligations and hence may be sanctioned 
by the mas notice that when activities are distributed 
normative positions must flow from the activities in which 
they are generated to those in which they take effect for 
instance the seller s obligation above must flow or be 
propagated from a negotiation activity to a delivery activity 
since in an open regulated mas one cannot embed 
normative aspects into the agents design we adopt the view 
that the mas should be supplemented with a separate set of 
norms that further regulates the behaviour of participating 
agents in order to model the separation of concerns between 
the coordination level agents interactions and the 
normative level propagation of normative positions we propose 
an artifact called the normative structure ns 
within a ns conflicts may arise due to the dynamic 
nature of the mas and the concurrency of agents actions for 
instance an agent may be obliged and prohibited to do the 
 
 - - - - rps c ifaamas 
very same action in an activity since the regulation of a 
mas entails that participating agents need to be aware of 
the validity of those actions that take place within it such 
conflicts ought to be identified and possibly resolved if a 
claim of validity is needed for an agent to engage in an 
action or be sanctioned however ensuring conflict-freedom of 
a ns at design time is computationally intractable we show 
this by formalising the notion of conflict providing a 
mapping of nss into coloured petri nets cpns and borrowing 
well-known theoretical results from the field of cpns 
we believe that online conflict detection and resolution 
is required hence we present a tractable algorithm for 
conflict resolution this algorithm is paramount for the 
distributed enactment of a ns 
the paper is organised as follows in section we detail a 
scenario to serve as an example throughout the paper next 
in section we formally define the normative structure 
artifact further on in section we formalise the notion of 
conflict to subsequently analyse the complexity of conflict 
detection in terms of cpns in section section describes 
the computational management of nss by describing their 
enactment and presenting an algorithm for conflict 
resolution finally we comment on related work draw conclusions 
and report on future work in section 
 scenario 
we use a supply-chain scenario in which companies and 
individuals come together at an online marketplace to 
conduct business the overall transaction procedure may be 
organised as six distributed activities represented as nodes 
in the diagram in figure they involve different 
participants whose behaviour is coordinated through protocols 
in this scenario agents can play one of four roles 
marexit 
registration 
payment 
delivery 
negotiation 
coordination model 
contract 
figure activity structure of the scenario 
ketplace accountant acc client supplier supp and 
warehouse managers wm the arrows connecting the activities 
represent how agents can move from one activity to another 
after registering at the marketplace clients and suppliers 
get together in an activity where they negotiate the terms of 
their transaction i e prices amounts of goods to be 
delivered deadlines and other details in the contract activity 
the order becomes established and an invoice is prepared 
the client will then participate in a payment activity 
verifying his credit-worthiness and instructing his bank to transfer 
the correct amount of money the supplier in the meantime 
will arrange for the goods to be delivered e g via a 
warehouse manager in the delivery activity finally agents can 
leave the marketplace conforming to a predetermined exit 
protocol the marketplace accountant participates in most 
of the activities as a trusted provider of auditing tools 
in the rest of the paper we shall build on this scenario 
to exemplify the notion of normative structure and to 
illustrate our approach to conflict detection and resolution in a 
distributed setting 
 normative structure 
in mass agents interact according to protocols which 
naturally are distributed we advocate that actions in one such 
protocol may have an effect on the enactment of other 
protocols certain actions can become prohibited or obligatory 
for example we take normative positions to be obligations 
prohibitions and permissions akin to work described in 
the intention of adding or removing a normative position 
we call normative command occurrences of normative 
positions in one protocol may also have consequences for other 
protocols 
 
in order to define our norm language and specify how 
normative positions are propagated we have been inspired by 
multi-context systems these systems allow the 
structuring of knowledge into distinct formal theories and the 
definition of relationships between them the relationships are 
expressed as bridge rules - deducibility of formulae in some 
contexts leads to the deduction of other formulae in other 
contexts recently these systems have been successfully 
used to define agent architectures the metaphor 
translates to our current work as follows the utterance of 
illocutions and or the existence of normative positions in 
some normative scenes leads to the deduction of 
normative positions in other normative scenes we are concerned 
with the propagation and distribution of normative positions 
within a network of distributed normative scenes as a 
consequence of agents actions we take normative scenes to be 
sets of normative positions and utterances that are 
associated with an underlying interaction protocol corresponding 
to an activity 
in this section we first present a simple language 
capturing these aspects and formally introduce the notions of 
normative scene normative transition rule and normative 
structure we give the intended semantics of these rules 
and show how to control a mas via norms in an example 
 basic concepts 
the building blocks of our language are terms and atomic 
formulae 
def a term denoted as t is i any constant 
expressed using lowercase with or without subscripts e g 
a b c or ii any variable expressed using uppercase with 
or without subscripts e g x y zb or iii any function 
f t tn where f is an n-ary function symbol and t tn 
are terms 
some examples of terms and functions are credit price or 
offer bible being respectively a variable a constant and 
a function we will be making use of identifiers 
throughout the paper which are constant terms and also need the 
following definition 
def an atomic formula is any construct p t tn 
where p is an n-ary predicate symbol and t tn are terms 
the set of all atomic formulae is denoted as Î´ 
we focus on an expressive class of mass in which 
interaction is carried out by means of illocutionary speech acts 
exchanged among participating agents 
def illocutions i are ground atomic formulae which 
have the form p ag r ag r Î´ t where p is an element of 
 
here we abstract from protocols and refer to them generically as 
activities 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
a set of illocutionary particles e g inform request offer 
ag ag are agent identifiers r r are role identifiers Î´ an 
arbitrary ground term is the content of the message built 
from a shared content language t â n is a time stamp 
the intuitive meaning of p ag r ag r m t is that agent 
ag playing role r sent message m to agent ag playing role 
r at time t an example of an illocution is inform ag 
supp ag client offer wire sometimes it is useful 
to refer to illocutions that are not fully grounded that is 
those that may contain uninstantiated free variables in 
the description of a protocol for instance the precise values 
of the message exchanged can be left unspecified during 
the enactment of the protocol agents will produce the actual 
values which will give rise to a ground illocution we can 
thus define illocution schemata 
def an illocution schema Â¯i is any atomic formula 
p ag r ag r Î´ t in which some of the terms may either be 
variables or may contain variables 
 formal definition of the notion of ns 
we first define normative scenes as follows 
def a normative scene is a tuple s ids Î´s where 
ids is a scene identifier and Î´s is the set of atomic formulae 
Î´ i e utterances and normative positions that hold in s 
we will also refer to Î´s as the state of normative scene s 
for instance a snapshot of the state of the delivery 
normative scene of our scenario could be represented as 
Î´s 
 
 
 
utt request sean client kev wm receive wire 
utt accept kev wm sean client receive wire 
obl inform kev wm sean client delivered wire 
 
 
 
that is agent sean taking up the client role has requested 
agent kev taking up the warehouse manager role wm to 
receive kg of wire and agent kev is obliged to deliver 
 kg of wire to sean since he accepted the request note 
that the state of a normative scene Î´s evolves over time 
these normative scenes are connected to one another via 
normative transitions that specify how utterances and 
normative positions in one scene affect other normative scenes 
as mentioned above activities are not independent since 
illocutions uttered in some of them may have an effect on 
other ones normative transition rules define the conditions 
under which a normative command is generated these 
conditions are either utterances or normative positions 
associated with a given protocol denoted e g activity utterance 
which yield a normative command i e the addition or 
removal of another normative position possibly related to a 
different activity our transition rules are thus defined 
def a normative transition rule r is of the form 
r v c 
v ids d v v 
d n utt Â¯i 
n per Â¯i prh Â¯i obl Â¯i 
c add ids n remove ids n 
where Â¯i is an illocution schema n is a normative position 
 i e permission prohibition or obligation ids is an 
identifier for activity s and c is a normative command 
we endow our language with the usual semantics of 
rulebased languages rules map an existing normative 
structure to a new normative structure where only the state 
of the normative scenes change in the definitions below we 
rely on the standard concept of substitution 
def a normative transition is a tuple b idb rb 
where idb is an identifier and rb is a normative transition 
rule 
we are proposing to extend the notion of mas regulated 
by protocols with an extra layer consisting of normative 
scenes and normative transitions this layer is represented 
as a bi-partite graph that we term normative structure a 
normative structure relates normative scenes and normative 
transitions specifying which normative positions are to be 
generated or removed in which normative scenes 
def a normative structure is a labelled bi-partite graph 
ns nodes edges lin 
 lout 
 nodes is a set sâªb where 
s is a set of normative scenes and b is a set of normative 
transitions edges is a set ain 
âª aout 
where ain 
â s Ã b 
is a set of input arcs labelled with an atomic formula using 
the labelling function lin 
 ain 
â d and aout 
â b Ã s is 
a set of output arcs labelled with a normative position using 
the labelling function lout 
 aout 
â n the following must 
hold 
 each atomic formula appearing in the lhs of a rule 
rb must be of the form ids d where s â s and 
d â Î´ and âain 
â ain 
such that ain 
 s b and 
lin 
 ain 
 d 
 the atomic formula appearing in the rhs of a rule rb 
must be of the form add ids n or remove ids n 
where s â s and âaout 
â aout 
such that aout 
 b s 
and lout 
 aout 
 n 
 âa â ain 
such that a s b and b idb rb and 
lin 
 a d then ids d must occur in the lhs of rb 
 âa â aout 
such that a b s and b idb rb and 
lout 
 a n then add ids n or remove ids n must 
occur in the rhs of rb 
the first two points ensure that every atomic formulae on 
the lhs of a normative transition rule labels an arc 
entering the appropriate normative transition in the normative 
structure and that the atomic formula on the rhs labels 
the corresponding outgoing arc points three and four 
ensure that labels from all incoming arcs are used in the lhs 
of the normative transition rule that these arcs enter into 
and that the labels from all outgoing arcs are used in the 
rhs of the normative transition rule that these arcs leave 
 intended semantics 
the formal semantics will be defined via a mapping to 
coloured petri nets in section here we start 
defining the intended semantics of normative transition rules by 
describing how a rule changes a normative scene of an 
existing normative structure yielding a new normative structure 
each rule is triggered once for each substitution that 
unifies the left-hand side v of the rule with the state of the 
corresponding normative scenes an atomic formula i e 
an utterance or a normative position holds iff it is 
unifiable with an utterance or normative position that belongs 
to the state of the corresponding normative scene every 
time a rule is triggered the normative command specified 
on the right-hand side of that rule is carried out 
intending to add or remove a normative position from the state 
of the corresponding normative scene however addition is 
not unconditional as conflicts may arise this topic will be 
treated in sections and 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 example 
in our running example we have the following exemplary 
normative transition rule 
â 
payment obl inform x client y acc pay z p q t 
payment utt inform x client y acc pay z p q t 
 
delivery add obl inform y wm x client delivered z q t 
that is during the payment activity an obligation on client 
x to inform accountant y about the payment p of item z 
at time t and the corresponding utterance which fulfills this 
obligation allows the flow of a norm to the delivery activity 
the norm is an obligation on agent y this time taking up 
the role of the warehouse manager wm to send a message 
to client x that item z has been delivered we show in 
figure a diagrammatic representation of how activities 
and a normative structure relate 
payment 
delivery 
contract 
normative level 
exit 
registration 
payment 
delivery 
negotiation 
coordination level 
contract 
nt 
figure activities and normative structure 
as illocutions are uttered during activities normative 
positions arise utterances and normative positions are 
combined in transition rules causing the flow of normative 
positions between normative scenes the connection between 
the two levels is described in section 
 conflict definition 
the terms deontic conflict and deontic inconsistency have 
been used interchangeably in the literature however in 
this paper we adopt the view of in which the authors 
suggest that a deontic inconsistency arises when an action 
is simultaneously permitted and prohibited - since a 
permission may not be acted upon no real conflict occurs the 
situations when an action is simultaneously obliged and 
prohibited are however deontic conflicts as both obligations 
and prohibitions influence behaviours in a conflicting 
fashion the content of normative positions in this paper are 
illocutions therefore a normative conflict arises when an 
illocution is simultaneously obliged and prohibited 
we propose to use the standard notion of unification to 
detect when a prohibition and a permission overlap for 
instance an obligation obl inform a r a r p c x t 
and a prohibition prh inform a r a r p y d t are 
in conflict as they unify under Ï a a r r a a 
r r y c x d t t we formally capture this notion 
def a deontic conflict arises between two 
normative positions n and n under a substitution Ï denoted as 
conflict n n Ï if and only if n prh Â¯i n obl Â¯i 
and unify Â¯i Â¯i Ï 
that is a prohibition and an obligation are in conflict if 
and only if their illocutions unify under Ï the 
substitution Ï called here the conflict set unifies the agents roles 
and atomic formulae we assume that unify is a suitable 
implementation of a unification algorithm which i always 
terminates possibly failing if a unifier cannot be found ii 
is correct and iii has linear computational complexity 
inconsistencies caused by the same illocution being 
simultaneously permitted and prohibited can be formalised 
similarly in this paper we focus on prohibition obligation 
conflicts but the computational machinery introduced in 
section can equally be used to detect prohibition permission 
inconsistencies if we substitute modality obl for per 
 formalising conflict-freedom 
in this section we introduce some background knowledge 
on cpns assuming a basic understanding of ordinary petri 
nets for technical details we refer the reader to we 
then map nss to cpns and analyse their properties 
cpns combine the strength of petri nets with the strength 
of functional programming languages on the one hand 
petri nets provide the primitives for the description of the 
synchronisation of concurrent processes as noticed in 
cpns have a semantics which builds upon true concurrency 
instead of interleaving in our opinion a true-concurrency 
semantics is easier to work with because it is the way we 
envisage the connection between the coordination level and 
the normative level of a multi-agent system to be on the 
other hand the functional programming languages used by 
cpns provide the primitives for the definition of data types 
and the manipulation of their data values thus we can 
readily translate expressions of a normative structure last 
but not least cpns have a well-defined semantics which 
unambiguously defines the behaviour of each cpn 
furthermore cpns have a large number of formal analysis methods 
and tools by which properties of cpns can be proved 
summing up cpns provide us with all the necessary features 
to formally reason about normative structures given that an 
adequate mapping is provided 
in accordance with petri nets the states of a cpn are 
represented by means of places but unlike petri nets each 
place has an associated data type determining the kind of 
data which the place may contain a state of a cpn is called 
a marking it consists of a number of tokens positioned on 
the individual places each token carries a data value which 
has the type of the corresponding place in general a place 
may contain two or more tokens with the same data value 
thus a marking of a cpn is a function which maps each 
place into a multi-set 
of tokens of the correct type one 
often refers to the token values as token colours and one 
also refers to the data types as colour sets the types of a 
cpn can be arbitrarily complex 
actions in a cpn are represented by means of transitions 
an incoming arc into a transition from a place indicates that 
the transition may remove tokens from the corresponding 
place while an outgoing arc indicates that the transition 
may add tokens the exact number of tokens and their 
data values are determined by the arc expressions which 
are encoded using the programming language chosen for the 
cpn a transition is enabled in a cpn if and only if all the 
 
a multi-set or bag is an extension to the notion of set allowing 
the possibility of multiple appearances of the same element 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
variables in the expressions of its incoming arcs are bound 
to some value s each one of these bindings is referred to 
as a binding element if so the transition may occur by 
removing tokens from its input places and adding tokens 
to its output places in addition to the arc expressions 
it is possible to attach a boolean guard expression with 
variables to each transition putting all the elements above 
together we obtain a formal definition of cpn that shall be 
employed further ahead for mapping purposes 
def a cpn is a tuple Ï p t a n c g e i 
where i Ï is a finite set of non-empty types also called 
colour sets ii p is a finite set of places iii t is a finite 
set of transitions iv a is a finite set of arcs v n is a 
node function defined from a into p Ã t âª t Ã p vi c 
is a colour function from p into Ï vii g is a guard 
function from t into expressions viii e is an arc expression 
function from a into expressions ix i is an initialisation 
function from p into closed expressions 
notice that the informal explanation of the enabling and 
occurrence rules given above provides the foundations to 
understand the behaviour of a cpn in accordance with 
ordinary petri nets the concurrent behaviour of a cpn is 
based on the notion of step formally a step is a non-empty 
and finite multi-set over the set of all binding elements let 
step s be enabled in a marking m then s may occur 
changing the marking m to m moreover we say that 
marking m is directly reachable from marking m by the 
occurrence of step s and we denote it by m s m 
a finite occurrence sequence is a finite sequence of steps 
and markings m s m mn sn mn such that 
n â n and mi si mi âi â n the set of all 
possible markings reachable for a net net from a marking m 
is called its reachability set and is denoted as r net m 
 mapping to coloured petri nets 
our normative structure is a labelled bi-partite graph 
the same is true for a coloured petri net we are 
presenting a mapping f from one to the other in order to provide 
semantics for the normative structure and prove properties 
about it by using well-known theoretical results from work 
on cpns the mapping f makes use of correspondences 
between normative scenes and cpn places normative 
transitions and cpn transitions and finally between arc labels 
and cpn arc expressions 
s â p 
b â t 
lin 
âª lout 
â e 
the set of types is the singleton set containing the colour 
np i e Ï np this complex type is structured as 
follows we use cpn-ml syntax 
color npt with obl per prh nomod 
color ip with inform declare offer 
color utt record 
illp ip 
ag role ag role string 
content string 
time int 
color np record 
mode npt 
illoc utt 
modelling illocutions as norms without modality nomod 
is a formal trick we use to ensure that sub-nets can be 
combined as explained below arcs are mapped almost directly 
a is a finite set of arcs and n is a node function such that 
âa â a âa â ain 
âªaout 
 n a a the initialisation 
function i is defined as i p Î´s âs â s where p is obtained 
from s using the mapping remember that s ids Î´s 
finally the colour function c assigns the colour np to 
every place c p np âp â p we are not making use of 
the guard function g in future work this function can be 
used to model constraints when we extend the 
expressiveness of our norm language 
 properties of normative structures 
having defined the mapping from normative structures 
to coloured petri nets we now look at properties of cpns 
that help us understand the complexity of conflict detection 
one question we would like to answer is whether at a given 
point in time a given normative structure is conflict-free 
such a snapshot of a normative structure corresponds to a 
marking in the mapped cpn 
def given a marking mi this marking is 
conflictfree if Â¬âp â p ânp np â mi p such that np mode 
obl and np mode prh and np illoc and np illoc unify 
under a valid substitution 
another interesting question would be whether a conflict 
will occur from such a snapshot of the system by 
propagating the normative positions in order to answer this 
question we first translate the snapshot of the normative 
structure to the corresponding cpn and then execute the 
finite occurence sequence of markings and steps verifying 
the conflict-freedom of each marking as we go along 
def given a marking mi a finite occurrence 
sequence si si sn is called conflict-free if and only if 
mi si mi mn sn mn and mk is conflict-free 
for all k such that i â¤ k â¤ n 
however the main question we would like to investigate 
is whether or not a given normative structure is 
conflictresistant that is whether or not the agents enacting the 
mas are able to bring about conflicts through their actions 
as soon as one includes the possibility of actions or 
utterances from autonomous agents one looses determinism 
having mapped the normative structure to a cpn we 
now add cpn models of the agents interactions each form 
of agent interaction i e each activity can be modelled 
using cpns along the lines of cost et al these 
nondeterministic cpns feed tokens into the cpn that models 
the normative structure this leads to the introduction of 
non-determinism into the combined cpn 
the lower half of figure shows part of a cpn model of 
an agent protocol where the arc denoted with   represents 
some utterance of an illocution by an agent the target 
transition of this arc not only moves a token on to the next 
state of this cpn but also places a token in the place 
corresponding to the appropriate normative scene in the cpn 
model of the normative structure via arc   transition   
finally could propagate that token in form of an obligation 
for example thus from a given marking many different 
occurrence sequences are possible depending on the agents 
actions we make use of the reachability set r to define a 
situation in which agents cannot cause conflicts 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
figure constructing the combined cpn 
def given a net n a marking m is conflict-resistant 
if and only if all markings in r n m are conflict-free 
checking conflict-freedom of a marking can be done in 
polynomial time by checking all places of the cpn for 
conflicting tokens conflict-freedom of an occurrence sequence 
in the cpn that represents the normative structure can also 
be done in polynomial time since this sequence is 
deterministic given a snapshot 
whether or not a normative structure is designed safely 
corresponds to checking the conflict-resistance of the 
initial marking m now verifying conflict-resistance of a 
marking becomes a very difficult task it corresponds to the 
reachability problem in a cpn can a state be reached or 
a marking achieved that contains a conflict this 
reachability problem is known to be np-complete for ordinary 
petri nets and since cpns are functionally identical 
we cannot hope to verify conflict-resistance of a normative 
structure off-line in a reasonable amount of time therefore 
distributed run-time mechanisms are needed to ensure that 
a normative structure maintains consistency we present 
one such mechanism in the following section 
 managing normative structures 
once a conflict as defined in section has been detected 
we propose to employ the unifier to resolve the conflict 
in our example if the variables in prh inform a r a r 
p y d t do not get the values specified in substitution 
Ï then there will not be a conflict however rather than 
computing the complement set of a substitution which can 
be an infinite set we propose to annotate the prohibition 
with the unifier itself and use it to determine what the 
variables of that prohibition cannot be in future unifications in 
order to avoid a conflict we therefore denote annotated 
prohibitions as prh Â¯i Ï where Ï Ï Ïn is a 
set of unifiers annotated norms 
are interpreted as deontic 
constructs with curtailed influences that is their effect on 
agents roles and illocutions has been limited by the set Ï 
of unifiers a prohibition may be in conflict with various 
obligations in a given normative scene s id Î´ and we 
need to record and possibly avoid all these conflicts we 
define below an algorithm which ensures that a normative 
position will be added to a normative scene in such a way 
that it will not cause any conflicts 
 
although we propose to curtail prohibitions the same machinery 
can be used to define the curtailment of obligations instead these 
different policies are dependent on the intended deontic semantics and 
requirements of the systems addressed for instance some mass may 
require that their agents should not act in the presence of conflicts 
that is the obligation should be curtailed 
 conflict resolution 
we propose a fine-grained way of resolving normative 
conflicts via unification we detect the overlapping of the 
influences of norms i e how they affect the behaviour of the 
concerned agents and we curtail the influence of the 
normative position by appropriately using the annotations when 
checking if the norm applies to illocutions the algorithm 
shown in figure depicts how we maintain a conflict-free 
set of norms it adds a given norm n to an existing 
conflictfree normative state Î´ obtaining a resulting new normative 
state Î´ which is conflict-free that is its prohibitions are 
annotated with a set of conflict sets indicating which 
bindings for variables have to be avoided for conflicts not to take 
place 
algorithm addnorm n Î´ 
begin 
 timestamp n 
 case n of 
 per Â¯i Î´ Î´ âª n 
 prh i if n â Î´ s t conflict n n Ï then Î´ Î´ 
 else Î´ Î´ âª n 
 prh Â¯i 
 begin 
 Ï â 
 for each n â Î´ do 
 if conflict n n Ï then Ï Ï âª Ï 
 Î´ Î´ âª n Ï 
 end 
 obl Â¯i 
 begin 
 Î´ â Î´ â 
 for each n Ï â Î´ do 
 if n prh i then 
 if conflict n n Ï then Î´ Î´ âª n Ï 
 else nil 
 else 
 if conflict n n Ï then 
 begin 
 Î´ Î´ âª n Ï 
 Î´ Î´ âª n Ï âª Ï 
 end 
 Î´ Î´ â Î´ âª Î´ âª n 
 end 
 end case 
 return Î´ 
end 
figure algorithm to preserve conflict-freedom 
the algorithm uses a case of structure to differentiate the 
different possibilities for a given norm n line addresses 
the case when the given norm is a permission n is simply 
added to Î´ lines - address the case when we attempt 
to add a ground prohibition to a normative state if it 
conflicts with any obligation then it is discarded otherwise it 
is added to the normative state lines - describe the 
situation when the normative position to be added is a 
nonground prohibition in this case the algorithm initialises Ï 
to an empty set and loops line - through the norms n 
in the old normative state Î´ upon finding one that 
conflicts with n the algorithm updates Ï by adding the newly 
found conflict set Ï to it line by looping through Î´ 
we are able to check any conflicts between the new 
prohibition and the existing obligations adequately building the 
annotation Ï to be used when adding n to Î´ in line 
lines - describe how a new obligation is 
accommodated to an existing normative state we make use of two 
initially empty temporary sets Î´ Î´ the algorithm loops 
through Î´ lines - picking up those annotated 
prohibitions n Ï which conflict with the new obligation there 
are however two cases to deal with the one when a ground 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
prohibition is found line and its exception covering 
non-ground prohibitions line in both cases the old 
prohibition is stored in Î´ lines and to be later 
removed from Î´ line however in the case of a 
nonground prohibition the algorithm updates its annotation of 
conflict sets line the loop guarantees that an 
exhaustive linear search through a normative state takes place 
checking if the new obligation is in conflict with any 
existing prohibitions possibly updating the annotations of these 
conflicting prohibitions in line the algorithm builds the 
new updated Î´ by removing the old prohibitions stored in 
Î´ and adding the updated prohibitions stored in Î´ if 
any as well as the new obligation n 
our proposed algorithm is correct in that for a given 
normative position n and a normative state Î´ it provides a 
new normative state Î´ in which all prohibitions have 
annotations recording how they unify with existing obligations 
the annotations can be empty though this is the case when 
we have a ground prohibition or a prohibition which does 
not unify conflict with any obligation permissions do not 
affect our algorithm and they are appropriately dealt with 
 line any attempt to insert a ground prohibition which 
conflicts yields the same normative state line when a 
new obligation is being added then the algorithm guarantees 
that all prohibitions are considered lines - leading to 
the removal of conflicting ground prohibitions or the update 
of annotations of non-ground prohibitions the algorithm 
always terminates the loops are over a finite set Î´ and the 
conflict checks and set operations always terminate the 
complexity of the algorithm is linear the set Î´ is only 
examined once for each possible case of norm to be added 
when managing normative states we may also need to 
remove normative positions this is straightforward 
permissions can be removed without any problems annotated 
prohibitions can also be removed without further 
considerations obligations however require some housekeeping 
when an obligation is to be removed we must check it 
against all annotated prohibitions in order to update their 
annotations we apply the conflict check and obtain a 
unifier then remove this unifier from the prohibition s 
annotation we invoke the removal algorithm as removenorm n Î´ 
it returns a new normative state Î´ in which n has been 
removed with possible alterations to other normative 
positions as explained 
 enactment of a normative structure 
the enactment of a normative structure amounts to the 
parallel distributed execution of normative scenes and 
normative transitions for illustrative purposes hereafter we 
shall describe the interplay between the payment and 
delivery normative scenes and the normative transition nt 
linking them in the upper half of figure with this aim 
consider for instance that obl inform jules client rod acc 
pay copper t â Î´payment and that Î´delivery 
holds prh inform rod wm jules client delivered z q t 
such states indicate that client jules is obliged to pay Â£ 
for kg of copper to accountant rod according to the 
payment normative scene whereas rod taking up the role of 
warehouse manager this time is prohibited to deliver 
anything to client jules according to the delivery normative 
scene 
for each normative scene the enactment process goes as 
follows firstly it processes its incoming message queue 
that contains three types of messages utterances from the 
activity it is linked to and normative commands either 
to add or remove normative positions for instance in 
our example the payment normative scene collects the 
illocution i utt inform jules client rod acc pay copper 
 standing for client jules pending payment 
for copper via arrow a in figure utterances are 
timestamped and subsequently added to the normative state 
we would have Î´payment Î´payment âª i in our 
example upon receiving normative commands to either add or 
remove a normative position the normative scene invokes 
the corresponding addition or removal algorithm described 
in section secondly the normative scene acknowledges 
its state change by sending a trigger message to every 
outgoing normative transition it is connected to in our example 
the payment normative scene would be signalling its state 
change to normative transition nt 
for normative transitions the process works differently 
because each normative transition controls the operation of 
a single rule upon receiving a trigger message it polls every 
incoming normative scene for substitutions for the relevant 
illocution schemata on the lhs of its rule in our example 
nt being responsible for the rule described in section 
would poll the payment normative scene via arrow b for 
substitutions upon receiving replies from them in the form 
of sets of substitutions together with time-stamps it has to 
unify substitutions from each of these normative scenes for 
each unification it finds the rule is fired and hence the 
corresponding normative command is sent along to the output 
normative scene the normative transition then keeps track 
of the firing message it sent on and of the time-stamps of the 
normative positions that triggered the firing this is done 
to ensure that the very same normative positions in the lhs 
of a rule only trigger its firing once 
in our example nt would be receiving Ï x jules 
y rod z copper q from the payment normative scene 
since the substitions in Ï unify with nt s rule the rule is 
fired and the normative command add delivery obl rod 
wm jules client delivered copper t is sent along to 
the delivery normative scene to oblige rod to deliver to 
client jules kg of copper after that the delivery 
normative scene would invoke the addnorm algorithm from 
figure with Î´delivery and n obl rod wm jules client 
delivered copper as arguments 
 related work and conclusions 
our contributions in this paper are three-fold firstly we 
introduce an approach for the management of and reasoning 
about norms in a distributed manner 
to our knowledge there is little work published in this 
direction in two languages are presented for the 
distributed enforcement of norms in mas however in both 
works each agent has a local message interface that forwards 
legal messages according to a set of norms since these 
interfaces are local to each agent norms can only be expressed 
in terms of actions of that agent this is a serious 
disadvantage e g when one needs to activate an obligation to one 
agent due to a certain message of another one 
the second contribution is the proposal of a normative 
structure the notion is fruitful because it allows the 
separation of normative and procedural concerns the normative 
structure we propose makes evident the similarity between 
the propagation of normative positions and the propagation 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
of tokens in coloured petri nets that similarity readily 
suggests a mapping between the two and gives grounds to 
a convenient analytical treatment of the normative 
structure in general and the complexity of conflict detection 
in particular the idea of modelling interactions in the 
form of conversations via petri nets has been investigated 
in where the interaction medium and individual agents 
are modelled as cpn sub-nets that are subsequently 
combined for analysis in conversations are first designed 
and analysed at the level of cpns and thereafter translated 
into protocols lin et al map conversation schemata to 
cpns to our knowledge the use of this representation in 
the support of conflict detection in regulated mas has not 
been reported elsewhere 
finally we present a distributed mechanism to resolve 
normative conflicts sartor treats normative conflicts 
from the point of view of legal theory and suggests a way to 
order the norms involved his idea is implemented in 
but requires a central resource for norm maintenance the 
approach to conflict detection and resolution is an 
adaptation and extension of the work on instantiation graphs 
reported in and a related algorithm in the algorithm 
presented in the current paper can be used to manage 
normative states distributedly normative scenes that happen 
in parallel have an associated normative state Î´ to which the 
algorithm is independently applied each time a new norm is 
to be introduced 
these three contributions we present in this paper open 
many possibilities for future work we should mention first 
that as a broad strategy we are working on a 
generalisation of the notion of normative structure to make it operate 
with different coordination models with richer deontic 
content and on top of different computational realisations of 
regulated mas as a first step in this direction we are 
taking advantage of the de-coupling between interaction 
protocols and declarative normative guidance that the normative 
structure makes available to provide a normative layer for 
electronic institutions as defined in we expect such 
coupling will endow electronic institutions with a more 
flexible -and more expressive- normative environment 
furthermore we want to extend our model along several 
directions to handle negation and constraints as part 
of the norm language and in particular the notion of time 
 to accommodate multiple hierarchical norm authorities 
based on roles along the lines of cholvy and cuppens 
and power relationships as suggested by carabelea et al 
 to capture in the conflict resolution algorithm different 
semantics relating the deontic notions by supporting 
different axiomations e g relative strength of prohibition versus 
obligation default deontic notions deontic inconsistencies 
on the theoretical side we intend to use analysis 
techniques of cpns in order to characterise classes of cpns 
 e g acyclic symmetric etc corresponding to families of 
normative structures that are susceptible to tractable 
offline conflict detection the combination of these techniques 
along with our online conflict resolution mechanisms is 
intended to endow mas designers with the ability to 
incorporate norms into their systems in a principled way 
 references 
 j l arcos m esteva p noriega j a rodrÂ´Ä±guez and 
c sierra engineering open environments with electronic 
institutions journal on engineering applications of artificial 
intelligence - 
 c carabelea o boissier and c castelfranchi using social 
power to enable agents to reason about being part of a group 
in th internat workshop esaw pages - 
 l cholvy and f cuppens solving normative conflicts by 
merging roles in fifth international conference on artificial 
intelligence and law washington usa 
 s christensen and t b haagh design cpn - overview of 
cpn ml syntax technical report university of aarhus 
 r s cost y chen t w finin y labrou and y peng 
using colored petri nets for conversation modeling in issues in 
agent communication pages - london uk 
 f dignum autonomous agents with norms artificial 
intelligence and law - 
 a elhag j breuker and p brouwer on the formal analysis 
of normative conflicts information comms techn law 
 - oct 
 m esteva w vasconcelos c sierra and j a 
rodrÂ´Ä±guez-aguilar norm consistency in electronic institutions 
volume lnai pages - springer-verlag 
 m fitting first-order logic and automated theorem 
proving springer-verlag new york u s a 
 n fornara f vigan`o and m colombetti an event driven 
approach to norms in artificial institutions in aamas 
workshop agents norms and institutions for regulated 
multiagent systems ani rem utrecht 
 d gaertner p noriega and c sierra extending the bdi 
architecture with commitments in proceedings of the th 
international conference of the catalan association of 
artificial intelligence 
 a garcÂ´Ä±a-camino p noriega and j -a rodrÂ´Ä±guez-aguilar 
an algorithm for conflict resolution in regulated compound 
activities in th int workshop - esaw 
 a garcÂ´Ä±a-camino j -a rodrÂ´Ä±guez-aguilar c sierra and 
w vasconcelos a distributed architecture for norm-aware 
agent societies in dalt iii volume lnai pages 
 - springer 
 f giunchiglia and l serafini multi-language hierarchical 
logics or how we can do without modal logics artificial 
intelligence - 
 j habermas the theory of communication action volume 
one reason and the rationalization of society beacon 
press 
 k jensen coloured petri nets basic concepts analysis 
methods and practical uses volume springer 
 m kollingbaum and t norman strategies for resolving norm 
conflict in practical reasoning in ecai workshop 
coordination in emergent agent societies 
 j -l koning g francois and y demazeau formalization 
and pre-validation for interaction protocols in a multi agent 
systems in ecai pages - 
 b kramer and j mylopoulos knowledge representation in 
s c shapiro editor encyclopedia of artificial intelligence 
volume pages - john wiley sons 
 f lin d h norrie w shen and r kremer a schema-based 
approach to specifying conversation policies in issues in agent 
communication pages - 
 n minsky law governed interaction lgi a distributed 
coordination and control mechanism an introduction and a 
reference manual technical report rutgers university 
 t murata petri nets properties analysis and applications 
proceedings of the ieee - 
 s parsons c sierra and n jennings agents that reason and 
negotiate by arguing journal of logic and computation 
 - 
 a ricci and m viroli coordination artifacts a unifying 
abstraction for engineering environment-mediated 
coordination in mas informatica - 
 g sartor normative conflicts in legal reasoning artificial 
intelligence and law - - june 
 m sergot a computational theory of normative positions 
acm trans comput logic - 
 w w vasconcelos m kollingbaum and t norman 
resolving conflict and inconsistency in norm-regulated 
virtual organisations in proceedings of aamas hawai i 
usa ifaamas 
 g h von wright norm and action a logical inquiry 
routledge and kegan paul london 
 m wooldridge an introduction to multiagent systems john 
wiley sons chichester uk feb 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
