computing the banzhaf power index 
in network flow games 
yoram bachrach jeffrey s rosenschein 
school of engineering and computer science 
the hebrew university of jerusalem israel 
 yori jeff  cs huji ac il 
abstract 
preference aggregation is used in a variety of multiagent 
applications and as a result voting theory has become an important topic 
in multiagent system research however power indices which 
reflect how much real power a voter has in a weighted voting 
system have received relatively little attention although they have 
long been studied in political science and economics the banzhaf 
power index is one of the most popular it is also well-defined for 
any simple coalitional game 
in this paper we examine the computational complexity of 
calculating the banzhaf power index within a particular multiagent 
domain a network flow game agents control the edges of a graph a 
coalition wins if it can send a flow of a given size from a source 
vertex to a target vertex the relative power of each edge agent reflects 
its significance in enabling such a flow and in real-world networks 
could be used for example to allocate resources for maintaining 
parts of the network 
we show that calculating the banzhaf power index of each agent 
in this network flow domain is p-complete we also show that 
for some restricted network flow domains there exists a polynomial 
algorithm to calculate agents banzhaf power indices 
categories and subject descriptors 
f theory of computation analysis of algorithms and 
problem complexity 
i artificial intelligence distributed artificial 
intelligencemultiagent systems 
j computer applications social and behavioral 
scienceseconomics 
general terms 
algorithms theory economics 
 introduction 
social choice theory can serve as an appropriate foundation upon 
which to build multiagent applications there is a rich literature 
on the subject of voting 
from political science mathematics and 
economics with important theoretical results and builders of 
automated agents can benefit from this work as they engineer systems 
that reach group consensus 
interest in the theory of economics and social choice has in fact 
become widespread throughout computer science because it is 
recognized as having direct implications on the building of systems 
comprised of multiple automated agents 
what distinguishes computer science work in these areas is its 
concern for computational issues how are results arrived at e g 
equilibrium points what is the complexity of the process can 
complexity be used to guard against unwanted phenomena does 
complexity of computation prevent realistic implementation of a 
technique 
the practical applications of voting among automated agents are 
already widespread ghosh et al built a movie 
recommendation system a user s preferences were represented as agents and 
movies to be suggested were selected through agent voting 
candidates in virtual elections have also been beliefs joint plans 
and schedules in fact to see the generality of the automated 
voting scenario consider modern web searching one of the most 
massive preference aggregation schemes in existence is google s 
pagerank algorithm which can be viewed as a vote among 
indexed web pages on candidates determined by a user-input search 
string winners are ranked tennenholtz and altman consider 
the axiomatic foundations of ranking systems such as this 
in this paper we consider a topic that has been less studied in the 
context of automated agent voting namely power indices a power 
index is a measure of the power that a subgroup or equivalently 
a voter in a weighted voting environment has over decisions of a 
larger group the banzhaf power index is one of the most popular 
measures of voting power and although it has been used primarily 
for measuring power in weighted voting games it is well-defined 
for any simple coalitional game 
we look at some computational aspects of the banzhaf power 
index in a specific environment namely a network flow game in 
this game a coalition of agents wins if it can send a flow of size k 
from a source vertex s to a target vertex t with the relative power 
of each edge reflecting its significance in allowing such a flow we 
show that calculating the banzhaf power index of each agent in 
this general network flow domain is p-complete we also show 
that for some restricted network flow domains specifically of 
con 
we use the term in its intuitive sense here but in the social choice 
literature preference aggregation and voting are basically 
synonymous 
 
 - - - - rps c ifaamas 
nectivity games on bounded layer graphs there does exist a 
polynomial algorithm to calculate the banzhaf power index of an agent 
there are implications in this scenario to real-world networks for 
example the power index might be used to allocate maintenance 
resources a more powerful edge being more critical in order to 
maintain a given flow of data between two points 
the paper proceeds as follows in section we give some 
background concerning coalitional games and the banzhaf power 
index and in section we introduce our specific network flow game 
in section we discuss the banzhaf power index in network flow 
games presenting our complexity result in the general case in 
section we consider a restricted case of the network flow game 
and present results in section we discuss related work and we 
conclude in section 
 technical background 
a coalitional game is composed of a set of n agents i and a 
function mapping any subset coalition of the agents to a real value 
v i 
→ r in a simple coalitional game v only gets values of or 
 v i 
→ we say a coalition c ⊂ i wins if v c 
and say it loses if v c we denote the set of all winning 
coalitions as w v c ⊂ i 
 v c 
an agent i is a swinger or pivot in a winning coalition c 
if the agent s removal from that coalition would make it a losing 
coalition v c v c \ i a swing is a pair i s 
such that agent i is a swinger in coalition s 
a question that arises in this context is that of measuring the 
influence a given agent has on the outcome of a simple game one 
approach to measuring the power of individual agents in simple 
coalitional games is the banzhaf index 
 the banzhaf index 
a common interpretation of the power an agent possesses is that 
of its a priori probability of having a significant role in the game 
different assumptions about the formation of coalitions and 
different definitions of having a significant role have caused 
researchers to define different power indices one of the most 
prominent of which is the banzhaf index this index has been widely 
used though primarily for the purpose of measuring individual 
power in a weighted voting system however it can also easily 
be applied to any simple coalitional game 
the banzhaf index depends on the number of coalitions in which 
an agent is a swinger out of all possible coalitions 
the banzhaf 
index is given by β v β v βn v where 
βi v 
 
 n− 
s⊂n i∈s 
 v s − v s \ i 
different probabilistic models on the way a coalition is formed 
yield different appropriate power indices the banzhaf power 
index reflects the assumption that the agents are independent in 
their choices 
 network flow games 
 motivation 
consider a communication network where it is crucial to be able 
to send a certain amount of information between two sites given 
limited resources to maintain network links which edges should 
get those resources 
 
banzhaf actually considered the percentage of such coalitions out 
of all winning coalitions this is called the normalized banzhaf 
index 
we model this problem by considering a network flow game the 
game consists of agents in a network flow graph with a certain 
source vertex s and target vertex t each agent controls one of the 
graph s edges and a coalition of agents controls all the edges its 
members control a coalition of agents wins the game if it manages 
to send a flow of at least k from source s to target t and loses 
otherwise 
to ensure that the network is capable of maintaining the desired 
flow between s and t we may choose to allocate our limited 
maintenance resources to the edges according to their impact on 
allowing this flow in other words resources could be devoted to the 
links whose failure is most likely to cause us to lose the ability to 
send the required amount of information between the source and 
target 
under a reasonable probabilistic model the banzhaf index 
provides us with a measure of the impact each edge has on enabling 
this amount of information to be sent between the sites and thus 
provides a reasonable basis for allocation of scarce maintenance 
resources 
 formal definition 
formally a network flow game is defined as follows the game 
consists of a network flow graph g v e with capacities on 
the edges c e → r a source vertex s a target vertex t and a set i 
of agents where agent i controls the edge ei given a coalition c 
which controls the edges ec ei i ∈ c we can check whether 
the coalition allows a flow of k from s to t we define the simple 
coalitional game of network flow as the game where the coalition 
wins if it allows such a flow and loses otherwise 
v c 
 if ec allows a flow of k from s to t 
 otherwise 
a simplified version of the network flow game is the connectivity 
game in a connectivity game a coalition wants to have some path 
from source to target more precisely a connectivity game is a 
network flow game where each of the edges has identical capacity 
c e and the target flow value is k in such a scenario 
the goal of a coalition is to have at least one path from s to t 
v c 
 if ec contains a path from s to t 
 otherwise 
given a network flow game or a connectivity game we can 
compute the power indices of the game when a coalition of edges 
is chosen at random and each coalition is equiprobable the 
appropriate index is the banzhaf index 
we can use the banzhaf value 
of an agent i ∈ i or the edge it controls ei βei v βi v to 
measure its impact on allowing a given flow between s and t 
 the banzhaf index in network 
flow games 
we now define the problem of calculating the banzhaf index in 
the network flow game 
definition network-flow-banzhaf we are given a 
network flow graph g v e with a source vertex s and a 
target vertex t a capacity function c e → r and a target flow 
value k we consider the network flow game as defined above in 
section we are given an agent i controlling the edge ei and are 
asked to calculate the banzhaf index for that agent in the network 
 
when each ordering of edges is equiprobable the appropriate 
index is the shapley-shubik index 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
flow game let cei be the set of all subsets of e that contain ei 
cei c ⊂ e ei ∈ c in this game the banzhaf index of ei is 
βi v 
 
 e − 
e ⊂cei 
 v e − v e \ ei 
let w cei be the set of winning subsets of edges in cei i e 
the subsets e ∈ cei where a flow of at least k can be sent from 
s to t using only the edges in e the banzhaf index of ei is the 
proportion of subsets in w cei where ei is crucial to maintaining 
the k-flow all the edge subsets in w cei contain ei and are 
winning but only for some of them e ∈ w cei do we have 
that v e \ ei i e e is no longer winning if we remove 
ei the banzhaf index of ei is the proportion of such subsets 
 p-completeness of calculating the banzhaf 
index in the network flow game 
we now show that the general case of network-flow-banzhaf 
is p-complete by a reduction from matching 
first we note that network-flow-banzhaf is in p there 
are several polynomial algorithms to calculate the maximal 
network flow so it is easy to check if a certain subset of edges e ⊂ e 
contains ei and allows a flow of at least k from s to t it is also 
easy to check if a flow of at least k is no longer possible when 
we remove ei from e again by running a polynomial algorithm 
for calculating the maximal flow the banzhaf index of ei is 
exactly the number of such subsets e ⊂ e so 
network-flowbanzhaf is in p to show that network-flow-banzhaf 
is p-complete we reduce a matching problem 
to a 
networkflow-banzhaf problem 
definition matching we are given a bipartite graph 
g u v e such that u v n and are asked to 
count the number of perfect matchings possible in g 
 the overall reduction approach 
the reduction is done as follows from the matching 
input g u v e we build two inputs for the 
networkflow-banzhaf problem the difference between the answers 
obtained from the network-flow-banzhaf runs is the 
answer to the matching problem both runs of the 
networkflow-banzhaf problem are constructed with the same graph 
g v e with the same source vertex s and target vertex 
t and with the same edge ef for which to compute the banzhaf 
index they differ only in the target flow value the first run is with 
a target flow of k and the second run is with a target flow of k 
a choice of subset ec ⊂ e reflects a possible matching in the 
original graph g is a subgraph of the constructed g we identify 
an edge in g e ∈ e with the same edge in g this edge indicates 
a particular match between some vertex u ∈ u and another vertex 
v ∈ v thus if ec ⊂ e is a subset of edges in g which contains 
only edges in the subgraph of g we identify it with a subset of 
edges in g or with some candidate of a matching 
we say ec ⊂ e matches some vertex v ∈ v if ec contains 
some edge that connects to v i e for some u ∈ u we have u v ∈ 
ec ec is a possible matching if it does not match a vertex v ∈ v 
with more than one vertex in u i e there are not two vertices 
u u in u that both u v ∈ ec and u v ∈ ec a perfect 
matching matches all the vertices in v 
if ec fails to match a vertex in v the right side of the partition 
the maximal possible flow that ec allows in g is less than k if it 
matches all the vertices in v a flow of k is possible if it matches 
 
this is one of the most well-known p-complete problems 
all the vertices in v but matches some vertex in v more than once 
 which means this is not a true matching a flow of k is possible 
is chosen so that if a single vertex v ∈ v is unmatched the 
maximal possible flow would be less than v even if all the other 
vertices are matched more than once in other words is chosen 
so that matching several vertices in v more than once can never 
compensate for not matching some vertex in v in terms of the 
maximal possible flow 
thus when we check the banzhaf index of ef when the required 
flow is at least k we get the number of subsets e ⊂ e that match 
all the vertices in v at least once when we check the banzhaf 
index of ef with a required flow of at least k we get the number 
of subsets e ⊂ e that match all the vertices in v at least once and 
match at least one vertex v ∈ v more than once the difference 
between the two is exactly the number of perfect matchings in g 
therefore if there existed a polynomial algorithm for 
networkflow-banzhaf we could use it to build a polynomial 
algorithm for matching so network-flow-banzhaf is 
 pcomplete 
 reduction details 
the reduction takes the matching input the bipartite graph 
g u v e where u v k it then generates 
a network flow graph g as follows the graph g is kept as a 
subgraph of g and each edge in g is given a capacity of a 
new source vertex s is added along with a new vertex t and a new 
target vertex t let 
k 
so that · k the source s is 
connected to each of the vertices in u the left partition of g with 
an edge of capacity each of the vertices in v is connected to 
t with an edge of capacity t is connected to t with an edge 
ef of capacity 
as mentioned above we perform two runs of 
network-flowbanzhaf both checking the banzhaf index of the edge ef in the 
flow network g we denote the network flow game defined on g 
with target flow k as v g k the first run is performed on the game 
with a target flow of k v g k returning the index βef v g k 
the second run is performed on the game with a target flow of 
k v g k returning the index βef v g k the number 
of perfect matchings in g is the difference between the answers 
in the two runs βef v g k − βef v g k this is proven in 
theorem 
figure shows an example of constructing g from g on the 
left is the original graph g and on the right is the constructed 
network flow graph g 
 proof of the reduction 
we now prove that the reduction above is correct in all of this 
section we take the input to the matching problem to be 
g u v e with u v k the network flow graph 
constructed in the reduction to be g v e with capacities 
c e → r as defined in section the edge for which to 
calculate the banzhaf index to be ef and target flow values of k and 
k 
proposition let ec ⊂ e be a subset of edges that lacks 
one or more edges of the following 
 the edges connected to s 
 the edges connected to t 
 the edge ef t t 
we call such a subset a missing subset the maximal flow between 
s and t using only the edges in the missing subset ec is less than k 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
figure reducing matching to network-flow-banzhaf 
proof the graph is a layer graph with s being the vertex in 
the first layer u the vertices in the second layer v the vertices in 
the third t the vertex in the fourth and t in the fifth edges in g 
only go between consecutive layers the maximal flow in a layer 
graph is limited by the total capacity of the edges between every 
two consecutive layers if any of the edges between s and u is 
missing the flow is limited by v − k if any of 
the edges between v and t is missing the flow is also limited by 
 v − k if the edge ef is missing there are no edges 
going to the last layer and the maximal flow is 
since such missing subsets of edges do not affect the banzhaf 
index of ef they add to the sum from now on we will consider 
only non-missing subsets as explained in section we identify 
the edges in g that were copied from g the edges between u and 
v in g with their counterparts in g each such edge u v ∈ e 
represents a match between u and v in g ec is a perfect matching 
if it matches every vertex u to a single vertex v and vice versa 
proposition let ec ⊂ e be a subset of edges that fails 
to match some vertex v ∈ v the maximal flow between s and t 
using only the edges in the missing subset ec is less than k we call 
such a set sub-matching and it is not a perfect matching 
proof if ec fails to match some vertex v ∈ v the maximal 
flow that can reach the vertices in the v layer is k− k 
so this is also the maximal flow that can reach t 
proposition let ec ⊂ e be a subset of edges that is a 
perfect matching in g then the maximal flow between s and t 
using only the edges in ec is exactly k 
proof a flow of k is possible we send a flow of from s 
to each of the vertices in u send a flow of from each vertex 
u ∈ u to its match v ∈ v and send a flow of from each v ∈ v 
to t t gets a total flow of exactly k and sends it to t a flow 
of more than k is not possible since there are exactly k edges of 
capacity between the u layer and the v layer and the maximal 
flow is limited by the total capacity of the edges between these two 
consecutive layers 
proposition let ec ⊂ e be a subset of edges that 
contains a perfect matching m ⊂ e in g and at least one more edge 
ex between some vertex ua ∈ u and va ∈ v then the maximal 
flow between s and t using only the edges in ec is at least k we 
call such a set a super-matching and it is not a perfect matching 
proof a flow of k is possible by using the edges of the perfect 
match as in proposition we send a flow of from s to each of 
the vertices in u send a flow of from each vertex u ∈ u to its 
match v ∈ v and send a flow of from each v ∈ v to t t gets 
a total flow of exactly k and sends it to t after using the edges 
of the perfect matching we send a flow of from s to ua this is 
possible since the capacity of the edge s ua is and we have 
only used up we then send a flow of from ua to va this 
is possible since we have not used this edge at all-it is the edge 
which is not a part of the perfect matching we then send a flow of 
from va to t again this is possible since we have used out of 
the total capacity of which that edge has now t gets a total 
flow of k and sends it all to t so we have achieved a total flow 
of k thus the maximal possible flow is at least k 
theorem consider a matching instance g u v e 
reduced to a banzhaf-network-flow instance g as explained 
in section let v g k be the network flow game defined on g 
with target flow k and v g k be the game defined with a target 
flow of k let the resulting index of the first run be βef v g k 
and βef v g k be the resulting index of the second run then 
the number of perfect matchings in g is the difference between the 
answers in the two runs βef v g k − βef v g k 
proof consider the game v g k according to proposition 
in this game the banzhaf index of ef does not count missing 
subsets ec ∈ e since they are losing in this game according to 
proposition it does not count subsets ec ∈ e that are 
submatchings since they are also losing according to proposition 
it adds to the count for each perfect matching since such subsets 
allow a flow of k and are winning according to proposition 
it adds to the count for each super-matching since such subsets 
allow a flow of k and more than k and are winning 
consider the game v g k again according to proposition 
in this game the banzhaf index of ef does not count missing 
subsets ec ∈ e since they are losing in this game according to 
proposition it does not count subsets ec ∈ e that are 
submatchings since they are also losing according to proposition 
it adds to the count for each perfect matching since such subsets 
allow a flow of k but not k and are thus losing according to 
proposition it adds to the count for each super-matching since 
such subsets allow a flow of k and are winning 
thus the difference between the two indices 
βef v g k − βef v g k 
is exactly the number of perfect matchings in g 
we have reduced a matching problem to a 
networkflow-banzhaf problem this means that given a polynomial 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
algorithm to calculate the banzhaf index of an agent in a 
general network flow game we can build an algorithm to solve the 
 matching problem thus the problem of calculating the banzhaf 
index of agents in general network flow games is also p-complete 
 calculating the banzhaf index 
in bounded layer graph 
connectivity games 
we here present a polynomial algorithm to calculate the banzhaf 
index of an edge in a connectivity game where the network is a 
bounded layer graph this positive result indicates that for some 
restricted domains of network flow games it is possible to calculate 
the banzhaf index in a reasonable amount of time 
definition a layer graph is a graph g v e with 
source vertex s and target vertex t where the vertices of the graph 
are partitioned into n layers l s l ln t 
the edges run only between consecutive layers 
definition a c-bounded layer graph is a layer graph where 
the number of vertices in each layer is bounded by some constant 
number c 
although there is no limit on the number of layers in a bounded 
layer graph the structure of such graphs makes it possible to 
calculate the banzhaf index of edges in connectivity games on such 
graphs the algorithm provided below is indeed polynomial in the 
number of vertices given that the network is a c-bounded layer 
graph however there is a constant factor to the running time 
which is exponential in c therefore this method is only tractable 
for graphs where the bound c is small bounded layer graphs may 
occur in networks when the nodes are located in several ordered 
segments where nodes can be connected only between 
consecutive segments 
let v be a vertex in layer li we say an edge e occurs before v if 
it connects two vertices in v s layer or a previous layer e u w 
connects vertex u ∈ lj to vertex w ∈ lj and j ≤ i let 
predv ⊂ e be the subset of edges that occur before v consider 
a subset of these edges e ⊂ predv e may contain a path 
from s to v or it may not we define pv as the number of subsets 
e ⊂ predv that contain a path from s to v 
similarly let vi ∈ v be the subset of all the vertices in the same 
layer li let predvi ⊂ e be the subset of edges that occur before 
vi all the vertices in vi are in the same layer so any edge that 
occurs before some v ∈ vi occurs before any other vertex w ∈ vi 
consider a subset of these edges e ⊂ predv let vi e be the 
subset of vertices in vi that are reachable from s using only the 
edges in e vi e v ∈ vi e contains a path from s to v 
we say e ∈ predv connects exactly the vertices in si ⊂ vi if all 
the vertices in si are reachable from s using the edges in e but no 
other vertices in vi are reachable from s using e so vi e si 
let v ⊂ vi be a subset of the vertices in layer li we define 
pv as the number of subsets e ⊂ predv that connect exactly 
the vertices in v pv e ⊂ predv vi e v 
lemma let s s ⊂ vi where s s be two different 
subsets of vertices in the same layer let e e ⊂ predvi be 
two sets of edge subsets so that e connects exactly the vertices in 
s and e connects exactly the vertices in s vi e s and 
vi e s then e and e do not contain the same edges 
e e 
proof if e e then both sets of edges allow the same 
paths from s so vi e vi e 
let si ⊂ vi be a subset of vertices in layer li let ei ⊂ 
e be the set of edges between the vertices in layer li and layer 
li let e ⊂ ei be some subset of these edges we denote by 
dests si e the set of vertices in layer li that are connected 
to some vertex in si by an edge in e 
dests si e v ∈ vi there exists some 
w ∈ si and some e ∈ e that e w v 
let si ⊂ vi be a subset of vertices in li and e ⊂ ei be some 
subset of the edges between layer li and layer li psi counts 
the number of edge subsets in predvi that connect exactly the 
vertices in si consider such a subset e counted in psi e ∪ e is a 
subset of edges in predvi that connects exactly to dest si e 
according to lemma if we iterate over the different si s in layer 
li the psi s count different subsets of edges and thus every 
expansion using the edges in e is also different 
algorithm calculates pt it iterates through the layers and 
updates the data for the next layer given the data for the current 
layer for each layer li and every subset of edges in that layer 
si ⊂ vi it calculates psi it does so using the values calculated in 
the previous layer the algorithm considers every subset of possible 
vertices in the current layer and every possible subset of expanding 
edges to the next layer and updates the value of the appropriate 
subset in the next layer 
algorithm 
 procedure connecting-exactly-subsets g v 
 p s ← initialization 
 for all other subsets of vertices s do initialization 
 ps ← 
 end for 
 for i ← to n − do iterate through layers 
 for all vertex subsets si in li do 
 for all edge subsets e between li li do 
 d ← dests si e subset in li 
 pd ← pd psi 
 end for 
 end for 
 end for 
 end procedure 
a c-bounded layer graph contains at most c vertices in each 
layer so for each layer there are at most c 
different subsets of 
vertices in that layer there are also at most c 
edges between 
consecutive layers and thus at most c 
 
edge subsets between 
two layers 
if the graph contains k layers the running time of the algorithm 
is bounded by k· c 
· c 
 
 since c is a constant this is a polynomial 
algorithm 
consider the connectivity game on a layer graph g with a single 
source vertex s and target vertex t the banzhaf index of the edge 
e is the number of subsets of edges that allow a path between s 
and t but do not allow such a path when e is removed divided 
by a constant we can calculate p t p t g for g using 
the algorithm to count the number of subsets of edges that allow 
a path from s to t we can then remove e from g to obtain the 
graph g v e \ e and calculate p t p t g the 
difference p t g − p t g is the number of subsets of edges 
that contain a path from s to t but no longer contain such a path 
when e is removed the banzhaf index for e is 
p t g −p t g 
 e − 
thus this algorithm allows us to calculate the banzhaf index on an 
edge in the connectivity games on bounded layer graphs 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 related work 
measuring the power of individual players in coalitional games 
has been studied for many years the most popular indices 
suggested for such measurement are the banzhaf index and the 
shapley-shubik index 
in his seminal paper shapley considered coalitional games 
and the fair allocation of the utility gained by the grand coalition 
 the coalition of all agents to its members the shapley-shubik 
index is the direct application of the shapley value to simple 
coalitional games 
the banzhaf index emerged directly from the study of voting in 
decision-making bodies the normalized banzhaf index measures 
the proportion of coalitions in which a player is a swinger out of 
all winning coalitions this index is similar to the banzhaf index 
discussed in section and is defined as 
βi 
βi v 
k∈n βk 
 
the banzhaf index was mathematically analyzed in where 
it was shown that this normalization lacks certain desirable 
properties and the more natural banzhaf index is introduced 
both the shapley-shubik and the banzhaf indices have been widely 
studied and straffin has shown that each index reflects specific 
conditions in a voting body considers these two indices along 
with several others and describes the axioms that characterize the 
different indices 
the naive implementation of an algorithm for calculating the 
banzhaf index of an agent i enumerates all coalitions containing 
i there are n− 
such coalitions so the performance is 
exponential in the number of agents contains a survey of algorithms 
for calculating power indices of weighted majority games deng 
and papadimitriou show that computing the shapley value in 
weighted majority games is p-complete using a reduction from 
knapsack since the shapley value of any simple game has the 
same value as its shapley-shubik index this shows that 
calculating the shapley-shubik index in weighted majority games is 
 pcomplete 
matsui and matsui have shown that calculating both the 
banzhaf and shapley-shubik indices in weighted voting games is 
np-complete 
the problem of computing power indices in simple games 
depends on the chosen representation of the game since the number 
of possible coalitions is exponential in the number of agents 
calculating power indices in time polynomial in the number of agents 
can only be achieved in specific domains 
in this paper we have considered the network flow domain where 
a coalition of agents must achieve a flow beyond a certain value 
the network flow game we have defined is a simple game 
have considered a similar network flow domain where each agent 
controls an edge of a network flow graph however they 
introduced a non-simple game where the value a coalition of agents 
achieves is the maximal total flow they have shown that certain 
families of network flow games and similar games have nonempty 
cores 
 conclusions and future 
directions 
we have considered network flow games where a coalition of 
agents wins if it manages to send a flow of more than some value k 
between two vertices we have assessed the relative power of each 
agent in this scenario using the banzhaf index this power index 
may be used to decide how to allocate maintenance resources in 
real-world networks in order to maximize our ability to maintain a 
certain flow of information between two sites 
although the banzhaf index theoretically allows us to measure 
the power of the agents in the network flow game we have shown 
that the problem of calculating the banzhaf index in this domain 
in p-complete despite this discouraging result for the general 
network flow domain we have also provided a more encouraging 
result for a restricted domain in the case of connectivity games 
 where it is only required for a coalition to contain a path from 
the source to the destination played on bounded layer graphs it is 
possible to calculate the banzhaf index of an agent in polynomial 
time 
it remains an open problem to find ways to tractably 
approximate the banzhaf index in the general network flow domain it 
might also be possible to find other useful restricted domains where 
it is possible to exactly calculate the banzhaf index we have only 
considered the complexity of calculating the banzhaf index it 
remains an open problem to find the complexity of calculating the 
shapley-shubik or other indices in the network flow domain 
finally we believe that there are many additional interesting domains 
other than weighted voting games and network flow games and it 
would be worthwhile to investigate the complexity of calculating 
the banzhaf index or other power indices in such domains 
 acknowledgment 
this work was partially supported by grant from the 
israel science foundation 
 references 
 j f banzhaf weighted voting doesn t work a mathematical 
analysis rutgers law review - 
 x deng and c h papadimitriou on the complexity of 
cooperative solution concepts math oper res 
 - 
 p dubey and l shapley mathematical properties of the 
banzhaf power index mathematics of operations research 
 - 
 e ephrati and j s rosenschein the clarke tax as a 
consensus mechanism among automated agents in 
proceedings of the ninth national conference on artificial 
intelligence pages - anaheim california july 
 
 e ephrati and j s rosenschein a heuristic technique for 
multiagent planning annals of mathematics and artificial 
intelligence - spring 
 s ghosh m mundhe k hernandez and s sen voting for 
movies the anatomy of a recommender system in 
proceedings of the third annual conference on autonomous 
agents pages - 
 t haynes s sen n arora and r nadella an automated 
meeting scheduling system that utilizes user preferences in 
proceedings of the first international conference on 
autonomous agents pages - 
 e hemaspaandra l hemaspaandra and j rothe anyone 
but him the complexity of precluding an alternative in 
proceedings of the th national conference on artificial 
intelligence pittsburgh july 
 e kalai and e zemel on totally balanced games and games 
of flow discussion papers northwestern university 
center for mathematical studies in economics and 
management science jan available at 
http ideas repec org p nwu cmsems html 
 the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
 e kalai and e zemel generalized network problems 
yielding totally balanced games operations research 
 - september 
 a laruelle on the choice of a power index papers - 
valencia - instituto de investigaciones economicas 
 y matsui and t matsui a survey of algorithms for 
calculating power indices of weighted majority games 
journal of the operations research society of japan 
 
 y matsui and t matsui np-completeness for calculating 
power indices of weighted majority games theoretical 
computer science - - 
 n nisan and a ronen algorithmic mechanism design 
games and economic behavior - 
 a d procaccia and j s rosenschein junta distributions 
and the average-case complexity of manipulating elections 
in the fifth international joint conference on autonomous 
agents and multiagent systems pages - hakodate 
japan may 
 j s rosenschein and m r genesereth deals among 
rational agents in proceedings of the ninth international 
joint conference on artificial intelligence pages - los 
angeles california august 
 t sandholm and v lesser issues in automated negotiation 
and electronic commerce extending the contract net 
framework in proceedings of the first international 
conference on multiagent systems icmas- pages 
 - san francisco 
 l s shapley a value for n-person games contributions to 
the theory of games pages - 
 l s shapley and m shubik a method for evaluating the 
distribution of power in a committee system american 
political science review - 
 p straffin homogeneity independence and power indices 
public choice - 
 m tennenholtz and a altman on the axiomatic 
the sixth intl joint conf on autonomous agents and multi-agent systems aamas 
